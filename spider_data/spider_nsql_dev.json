{"context":"CREATE TABLE continents (\n  ContId INTEGER PRIMARY KEY,\n  Continent TEXT\n);\nCREATE TABLE countries (\n  CountryId INTEGER PRIMARY KEY,\n  CountryName TEXT,\n  Continent INTEGER,\n  FOREIGN KEY (Continent) REFERENCES continents(ContId)\n);\n\nCREATE TABLE car_makers (\n  Id INTEGER PRIMARY KEY,\n  Maker TEXT,\n  FullName TEXT,\n  Country TEXT,\n  FOREIGN KEY (Country) REFERENCES countries(CountryId)\n);\n\nCREATE TABLE model_list (\n  ModelId INTEGER PRIMARY KEY,\n  Maker INTEGER,\n  Model TEXT UNIQUE,\n  FOREIGN KEY (Maker) REFERENCES car_makers (Id)\n);\n\nCREATE TABLE car_names (\n  MakeId INTEGER PRIMARY KEY,\n  Model TEXT,\n  Make TEXT,\n  FOREIGN KEY (Model) REFERENCES model_list (Model)\n);\nCREATE TABLE cars_data (\n  Id INTEGER PRIMARY KEY,\n  MPG TEXT,\n  Cylinders INTEGER,\n  Edispl REAL,\n  Horsepower TEXT,\n  Weight INTEGER,\n  Accelerate REAL,\n  Year INTEGER,\n  FOREIGN KEY (Id) REFERENCES car_names (MakeId)\n);\n\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"for compile run","prompt":"Hi?"}
{"context":"CREATE TABLE continents (\n  ContId INTEGER PRIMARY KEY,\n  Continent TEXT\n);\nCREATE TABLE countries (\n  CountryId INTEGER PRIMARY KEY,\n  CountryName TEXT,\n  Continent INTEGER,\n  FOREIGN KEY (Continent) REFERENCES continents(ContId)\n);\n\nCREATE TABLE car_makers (\n  Id INTEGER PRIMARY KEY,\n  Maker TEXT,\n  FullName TEXT,\n  Country TEXT,\n  FOREIGN KEY (Country) REFERENCES countries(CountryId)\n);\n\nCREATE TABLE model_list (\n  ModelId INTEGER PRIMARY KEY,\n  Maker INTEGER,\n  Model TEXT UNIQUE,\n  FOREIGN KEY (Maker) REFERENCES car_makers (Id)\n);\n\nCREATE TABLE car_names (\n  MakeId INTEGER PRIMARY KEY,\n  Model TEXT,\n  Make TEXT,\n  FOREIGN KEY (Model) REFERENCES model_list (Model)\n);\nCREATE TABLE cars_data (\n  Id INTEGER PRIMARY KEY,\n  MPG TEXT,\n  Cylinders INTEGER,\n  Edispl REAL,\n  Horsepower TEXT,\n  Weight INTEGER,\n  Accelerate REAL,\n  Year INTEGER,\n  FOREIGN KEY (Id) REFERENCES car_names (MakeId)\n);\n\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT count(*) FROM CONTINENTS;","prompt":"How many continents are there?"}
{"context":"CREATE TABLE continents (\n  ContId INTEGER PRIMARY KEY,\n  Continent TEXT\n);\nCREATE TABLE countries (\n  CountryId INTEGER PRIMARY KEY,\n  CountryName TEXT,\n  Continent INTEGER,\n  FOREIGN KEY (Continent) REFERENCES continents(ContId)\n);\n\nCREATE TABLE car_makers (\n  Id INTEGER PRIMARY KEY,\n  Maker TEXT,\n  FullName TEXT,\n  Country TEXT,\n  FOREIGN KEY (Country) REFERENCES countries(CountryId)\n);\n\nCREATE TABLE model_list (\n  ModelId INTEGER PRIMARY KEY,\n  Maker INTEGER,\n  Model TEXT UNIQUE,\n  FOREIGN KEY (Maker) REFERENCES car_makers (Id)\n);\n\nCREATE TABLE car_names (\n  MakeId INTEGER PRIMARY KEY,\n  Model TEXT,\n  Make TEXT,\n  FOREIGN KEY (Model) REFERENCES model_list (Model)\n);\nCREATE TABLE cars_data (\n  Id INTEGER PRIMARY KEY,\n  MPG TEXT,\n  Cylinders INTEGER,\n  Edispl REAL,\n  Horsepower TEXT,\n  Weight INTEGER,\n  Accelerate REAL,\n  Year INTEGER,\n  FOREIGN KEY (Id) REFERENCES car_names (MakeId)\n);\n\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT count(*) FROM CONTINENTS;","prompt":"How many continents are there?"}
{"context":"CREATE TABLE continents (\n  ContId INTEGER PRIMARY KEY,\n  Continent TEXT\n);\nCREATE TABLE countries (\n  CountryId INTEGER PRIMARY KEY,\n  CountryName TEXT,\n  Continent INTEGER,\n  FOREIGN KEY (Continent) REFERENCES continents(ContId)\n);\n\nCREATE TABLE car_makers (\n  Id INTEGER PRIMARY KEY,\n  Maker TEXT,\n  FullName TEXT,\n  Country TEXT,\n  FOREIGN KEY (Country) REFERENCES countries(CountryId)\n);\n\nCREATE TABLE model_list (\n  ModelId INTEGER PRIMARY KEY,\n  Maker INTEGER,\n  Model TEXT UNIQUE,\n  FOREIGN KEY (Maker) REFERENCES car_makers (Id)\n);\n\nCREATE TABLE car_names (\n  MakeId INTEGER PRIMARY KEY,\n  Model TEXT,\n  Make TEXT,\n  FOREIGN KEY (Model) REFERENCES model_list (Model)\n);\nCREATE TABLE cars_data (\n  Id INTEGER PRIMARY KEY,\n  MPG TEXT,\n  Cylinders INTEGER,\n  Edispl REAL,\n  Horsepower TEXT,\n  Weight INTEGER,\n  Accelerate REAL,\n  Year INTEGER,\n  FOREIGN KEY (Id) REFERENCES car_names (MakeId)\n);\n\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT count(*) FROM CONTINENTS;","prompt":"What is the number of continents?"}
{"context":"CREATE TABLE continents (\n  ContId INTEGER PRIMARY KEY,\n  Continent TEXT\n);\nCREATE TABLE countries (\n  CountryId INTEGER PRIMARY KEY,\n  CountryName TEXT,\n  Continent INTEGER,\n  FOREIGN KEY (Continent) REFERENCES continents(ContId)\n);\n\nCREATE TABLE car_makers (\n  Id INTEGER PRIMARY KEY,\n  Maker TEXT,\n  FullName TEXT,\n  Country TEXT,\n  FOREIGN KEY (Country) REFERENCES countries(CountryId)\n);\n\nCREATE TABLE model_list (\n  ModelId INTEGER PRIMARY KEY,\n  Maker INTEGER,\n  Model TEXT UNIQUE,\n  FOREIGN KEY (Maker) REFERENCES car_makers (Id)\n);\n\nCREATE TABLE car_names (\n  MakeId INTEGER PRIMARY KEY,\n  Model TEXT,\n  Make TEXT,\n  FOREIGN KEY (Model) REFERENCES model_list (Model)\n);\nCREATE TABLE cars_data (\n  Id INTEGER PRIMARY KEY,\n  MPG TEXT,\n  Cylinders INTEGER,\n  Edispl REAL,\n  Horsepower TEXT,\n  Weight INTEGER,\n  Accelerate REAL,\n  Year INTEGER,\n  FOREIGN KEY (Id) REFERENCES car_names (MakeId)\n);\n\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT T1.ContId ,  T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.Continent GROUP BY T1.ContId;","prompt":"How many countries does each continent have? List the continent id, continent name and the number of countries."}
{"context":"CREATE TABLE continents (\n  ContId INTEGER PRIMARY KEY,\n  Continent TEXT\n);\nCREATE TABLE countries (\n  CountryId INTEGER PRIMARY KEY,\n  CountryName TEXT,\n  Continent INTEGER,\n  FOREIGN KEY (Continent) REFERENCES continents(ContId)\n);\n\nCREATE TABLE car_makers (\n  Id INTEGER PRIMARY KEY,\n  Maker TEXT,\n  FullName TEXT,\n  Country TEXT,\n  FOREIGN KEY (Country) REFERENCES countries(CountryId)\n);\n\nCREATE TABLE model_list (\n  ModelId INTEGER PRIMARY KEY,\n  Maker INTEGER,\n  Model TEXT UNIQUE,\n  FOREIGN KEY (Maker) REFERENCES car_makers (Id)\n);\n\nCREATE TABLE car_names (\n  MakeId INTEGER PRIMARY KEY,\n  Model TEXT,\n  Make TEXT,\n  FOREIGN KEY (Model) REFERENCES model_list (Model)\n);\nCREATE TABLE cars_data (\n  Id INTEGER PRIMARY KEY,\n  MPG TEXT,\n  Cylinders INTEGER,\n  Edispl REAL,\n  Horsepower TEXT,\n  Weight INTEGER,\n  Accelerate REAL,\n  Year INTEGER,\n  FOREIGN KEY (Id) REFERENCES car_names (MakeId)\n);\n\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT T1.ContId ,  T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.Continent GROUP BY T1.ContId;","prompt":"For each continent, list its id, name, and how many countries it has?"}
{"context":"CREATE TABLE continents (\n  ContId INTEGER PRIMARY KEY,\n  Continent TEXT\n);\nCREATE TABLE countries (\n  CountryId INTEGER PRIMARY KEY,\n  CountryName TEXT,\n  Continent INTEGER,\n  FOREIGN KEY (Continent) REFERENCES continents(ContId)\n);\n\nCREATE TABLE car_makers (\n  Id INTEGER PRIMARY KEY,\n  Maker TEXT,\n  FullName TEXT,\n  Country TEXT,\n  FOREIGN KEY (Country) REFERENCES countries(CountryId)\n);\n\nCREATE TABLE model_list (\n  ModelId INTEGER PRIMARY KEY,\n  Maker INTEGER,\n  Model TEXT UNIQUE,\n  FOREIGN KEY (Maker) REFERENCES car_makers (Id)\n);\n\nCREATE TABLE car_names (\n  MakeId INTEGER PRIMARY KEY,\n  Model TEXT,\n  Make TEXT,\n  FOREIGN KEY (Model) REFERENCES model_list (Model)\n);\nCREATE TABLE cars_data (\n  Id INTEGER PRIMARY KEY,\n  MPG TEXT,\n  Cylinders INTEGER,\n  Edispl REAL,\n  Horsepower TEXT,\n  Weight INTEGER,\n  Accelerate REAL,\n  Year INTEGER,\n  FOREIGN KEY (Id) REFERENCES car_names (MakeId)\n);\n\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT count(*) FROM COUNTRIES;","prompt":"How many countries are listed?"}
{"context":"CREATE TABLE continents (\n  ContId INTEGER PRIMARY KEY,\n  Continent TEXT\n);\nCREATE TABLE countries (\n  CountryId INTEGER PRIMARY KEY,\n  CountryName TEXT,\n  Continent INTEGER,\n  FOREIGN KEY (Continent) REFERENCES continents(ContId)\n);\n\nCREATE TABLE car_makers (\n  Id INTEGER PRIMARY KEY,\n  Maker TEXT,\n  FullName TEXT,\n  Country TEXT,\n  FOREIGN KEY (Country) REFERENCES countries(CountryId)\n);\n\nCREATE TABLE model_list (\n  ModelId INTEGER PRIMARY KEY,\n  Maker INTEGER,\n  Model TEXT UNIQUE,\n  FOREIGN KEY (Maker) REFERENCES car_makers (Id)\n);\n\nCREATE TABLE car_names (\n  MakeId INTEGER PRIMARY KEY,\n  Model TEXT,\n  Make TEXT,\n  FOREIGN KEY (Model) REFERENCES model_list (Model)\n);\nCREATE TABLE cars_data (\n  Id INTEGER PRIMARY KEY,\n  MPG TEXT,\n  Cylinders INTEGER,\n  Edispl REAL,\n  Horsepower TEXT,\n  Weight INTEGER,\n  Accelerate REAL,\n  Year INTEGER,\n  FOREIGN KEY (Id) REFERENCES car_names (MakeId)\n);\n\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT count(*) FROM COUNTRIES;","prompt":"How many countries exist?"}
{"context":"CREATE TABLE continents (\n  ContId INTEGER PRIMARY KEY,\n  Continent TEXT\n);\nCREATE TABLE countries (\n  CountryId INTEGER PRIMARY KEY,\n  CountryName TEXT,\n  Continent INTEGER,\n  FOREIGN KEY (Continent) REFERENCES continents(ContId)\n);\n\nCREATE TABLE car_makers (\n  Id INTEGER PRIMARY KEY,\n  Maker TEXT,\n  FullName TEXT,\n  Country TEXT,\n  FOREIGN KEY (Country) REFERENCES countries(CountryId)\n);\n\nCREATE TABLE model_list (\n  ModelId INTEGER PRIMARY KEY,\n  Maker INTEGER,\n  Model TEXT UNIQUE,\n  FOREIGN KEY (Maker) REFERENCES car_makers (Id)\n);\n\nCREATE TABLE car_names (\n  MakeId INTEGER PRIMARY KEY,\n  Model TEXT,\n  Make TEXT,\n  FOREIGN KEY (Model) REFERENCES model_list (Model)\n);\nCREATE TABLE cars_data (\n  Id INTEGER PRIMARY KEY,\n  MPG TEXT,\n  Cylinders INTEGER,\n  Edispl REAL,\n  Horsepower TEXT,\n  Weight INTEGER,\n  Accelerate REAL,\n  Year INTEGER,\n  FOREIGN KEY (Id) REFERENCES car_names (MakeId)\n);\n\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT T1.FullName ,  T1.Id ,  count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id;","prompt":"How many models does each car maker produce? List maker full name, id and the number."}
{"context":"CREATE TABLE continents (\n  ContId INTEGER PRIMARY KEY,\n  Continent TEXT\n);\nCREATE TABLE countries (\n  CountryId INTEGER PRIMARY KEY,\n  CountryName TEXT,\n  Continent INTEGER,\n  FOREIGN KEY (Continent) REFERENCES continents(ContId)\n);\n\nCREATE TABLE car_makers (\n  Id INTEGER PRIMARY KEY,\n  Maker TEXT,\n  FullName TEXT,\n  Country TEXT,\n  FOREIGN KEY (Country) REFERENCES countries(CountryId)\n);\n\nCREATE TABLE model_list (\n  ModelId INTEGER PRIMARY KEY,\n  Maker INTEGER,\n  Model TEXT UNIQUE,\n  FOREIGN KEY (Maker) REFERENCES car_makers (Id)\n);\n\nCREATE TABLE car_names (\n  MakeId INTEGER PRIMARY KEY,\n  Model TEXT,\n  Make TEXT,\n  FOREIGN KEY (Model) REFERENCES model_list (Model)\n);\nCREATE TABLE cars_data (\n  Id INTEGER PRIMARY KEY,\n  MPG TEXT,\n  Cylinders INTEGER,\n  Edispl REAL,\n  Horsepower TEXT,\n  Weight INTEGER,\n  Accelerate REAL,\n  Year INTEGER,\n  FOREIGN KEY (Id) REFERENCES car_names (MakeId)\n);\n\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT T1.FullName ,  T1.Id ,  count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id;","prompt":"What is the full name of each car maker, along with its id and how many models it produces?"}
{"context":"CREATE TABLE continents (\n  ContId INTEGER PRIMARY KEY,\n  Continent TEXT\n);\nCREATE TABLE countries (\n  CountryId INTEGER PRIMARY KEY,\n  CountryName TEXT,\n  Continent INTEGER,\n  FOREIGN KEY (Continent) REFERENCES continents(ContId)\n);\n\nCREATE TABLE car_makers (\n  Id INTEGER PRIMARY KEY,\n  Maker TEXT,\n  FullName TEXT,\n  Country TEXT,\n  FOREIGN KEY (Country) REFERENCES countries(CountryId)\n);\n\nCREATE TABLE model_list (\n  ModelId INTEGER PRIMARY KEY,\n  Maker INTEGER,\n  Model TEXT UNIQUE,\n  FOREIGN KEY (Maker) REFERENCES car_makers (Id)\n);\n\nCREATE TABLE car_names (\n  MakeId INTEGER PRIMARY KEY,\n  Model TEXT,\n  Make TEXT,\n  FOREIGN KEY (Model) REFERENCES model_list (Model)\n);\nCREATE TABLE cars_data (\n  Id INTEGER PRIMARY KEY,\n  MPG TEXT,\n  Cylinders INTEGER,\n  Edispl REAL,\n  Horsepower TEXT,\n  Weight INTEGER,\n  Accelerate REAL,\n  Year INTEGER,\n  FOREIGN KEY (Id) REFERENCES car_names (MakeId)\n);\n\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;","prompt":"Which model of the car has the minimum horsepower?"}
{"context":"CREATE TABLE continents (\n  ContId INTEGER PRIMARY KEY,\n  Continent TEXT\n);\nCREATE TABLE countries (\n  CountryId INTEGER PRIMARY KEY,\n  CountryName TEXT,\n  Continent INTEGER,\n  FOREIGN KEY (Continent) REFERENCES continents(ContId)\n);\n\nCREATE TABLE car_makers (\n  Id INTEGER PRIMARY KEY,\n  Maker TEXT,\n  FullName TEXT,\n  Country TEXT,\n  FOREIGN KEY (Country) REFERENCES countries(CountryId)\n);\n\nCREATE TABLE model_list (\n  ModelId INTEGER PRIMARY KEY,\n  Maker INTEGER,\n  Model TEXT UNIQUE,\n  FOREIGN KEY (Maker) REFERENCES car_makers (Id)\n);\n\nCREATE TABLE car_names (\n  MakeId INTEGER PRIMARY KEY,\n  Model TEXT,\n  Make TEXT,\n  FOREIGN KEY (Model) REFERENCES model_list (Model)\n);\nCREATE TABLE cars_data (\n  Id INTEGER PRIMARY KEY,\n  MPG TEXT,\n  Cylinders INTEGER,\n  Edispl REAL,\n  Horsepower TEXT,\n  Weight INTEGER,\n  Accelerate REAL,\n  Year INTEGER,\n  FOREIGN KEY (Id) REFERENCES car_names (MakeId)\n);\n\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;","prompt":"What is the model of the car with the smallest amount of horsepower?"}
{"context":"CREATE TABLE continents (\n  ContId INTEGER PRIMARY KEY,\n  Continent TEXT\n);\nCREATE TABLE countries (\n  CountryId INTEGER PRIMARY KEY,\n  CountryName TEXT,\n  Continent INTEGER,\n  FOREIGN KEY (Continent) REFERENCES continents(ContId)\n);\n\nCREATE TABLE car_makers (\n  Id INTEGER PRIMARY KEY,\n  Maker TEXT,\n  FullName TEXT,\n  Country TEXT,\n  FOREIGN KEY (Country) REFERENCES countries(CountryId)\n);\n\nCREATE TABLE model_list (\n  ModelId INTEGER PRIMARY KEY,\n  Maker INTEGER,\n  Model TEXT UNIQUE,\n  FOREIGN KEY (Maker) REFERENCES car_makers (Id)\n);\n\nCREATE TABLE car_names (\n  MakeId INTEGER PRIMARY KEY,\n  Model TEXT,\n  Make TEXT,\n  FOREIGN KEY (Model) REFERENCES model_list (Model)\n);\nCREATE TABLE cars_data (\n  Id INTEGER PRIMARY KEY,\n  MPG TEXT,\n  Cylinders INTEGER,\n  Edispl REAL,\n  Horsepower TEXT,\n  Weight INTEGER,\n  Accelerate REAL,\n  Year INTEGER,\n  FOREIGN KEY (Id) REFERENCES car_names (MakeId)\n);\n\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  <  (SELECT avg(Weight) FROM CARS_DATA)","prompt":"Find the model of the car whose weight is below the average weight."}
{"context":"CREATE TABLE continents (\n  ContId INTEGER PRIMARY KEY,\n  Continent TEXT\n);\nCREATE TABLE countries (\n  CountryId INTEGER PRIMARY KEY,\n  CountryName TEXT,\n  Continent INTEGER,\n  FOREIGN KEY (Continent) REFERENCES continents(ContId)\n);\n\nCREATE TABLE car_makers (\n  Id INTEGER PRIMARY KEY,\n  Maker TEXT,\n  FullName TEXT,\n  Country TEXT,\n  FOREIGN KEY (Country) REFERENCES countries(CountryId)\n);\n\nCREATE TABLE model_list (\n  ModelId INTEGER PRIMARY KEY,\n  Maker INTEGER,\n  Model TEXT UNIQUE,\n  FOREIGN KEY (Maker) REFERENCES car_makers (Id)\n);\n\nCREATE TABLE car_names (\n  MakeId INTEGER PRIMARY KEY,\n  Model TEXT,\n  Make TEXT,\n  FOREIGN KEY (Model) REFERENCES model_list (Model)\n);\nCREATE TABLE cars_data (\n  Id INTEGER PRIMARY KEY,\n  MPG TEXT,\n  Cylinders INTEGER,\n  Edispl REAL,\n  Horsepower TEXT,\n  Weight INTEGER,\n  Accelerate REAL,\n  Year INTEGER,\n  FOREIGN KEY (Id) REFERENCES car_names (MakeId)\n);\n\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  <  (SELECT avg(Weight) FROM CARS_DATA)","prompt":"What is the model for the car with a weight smaller than the average?"}
{"context":"CREATE TABLE continents (\n  ContId INTEGER PRIMARY KEY,\n  Continent TEXT\n);\nCREATE TABLE countries (\n  CountryId INTEGER PRIMARY KEY,\n  CountryName TEXT,\n  Continent INTEGER,\n  FOREIGN KEY (Continent) REFERENCES continents(ContId)\n);\n\nCREATE TABLE car_makers (\n  Id INTEGER PRIMARY KEY,\n  Maker TEXT,\n  FullName TEXT,\n  Country TEXT,\n  FOREIGN KEY (Country) REFERENCES countries(CountryId)\n);\n\nCREATE TABLE model_list (\n  ModelId INTEGER PRIMARY KEY,\n  Maker INTEGER,\n  Model TEXT UNIQUE,\n  FOREIGN KEY (Maker) REFERENCES car_makers (Id)\n);\n\nCREATE TABLE car_names (\n  MakeId INTEGER PRIMARY KEY,\n  Model TEXT,\n  Make TEXT,\n  FOREIGN KEY (Model) REFERENCES model_list (Model)\n);\nCREATE TABLE cars_data (\n  Id INTEGER PRIMARY KEY,\n  MPG TEXT,\n  Cylinders INTEGER,\n  Edispl REAL,\n  Horsepower TEXT,\n  Weight INTEGER,\n  Accelerate REAL,\n  Year INTEGER,\n  FOREIGN KEY (Id) REFERENCES car_names (MakeId)\n);\n\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';","prompt":"Find the name of the makers that produced some cars in the year of 1970?"}
{"context":"CREATE TABLE continents (\n  ContId INTEGER PRIMARY KEY,\n  Continent TEXT\n);\nCREATE TABLE countries (\n  CountryId INTEGER PRIMARY KEY,\n  CountryName TEXT,\n  Continent INTEGER,\n  FOREIGN KEY (Continent) REFERENCES continents(ContId)\n);\n\nCREATE TABLE car_makers (\n  Id INTEGER PRIMARY KEY,\n  Maker TEXT,\n  FullName TEXT,\n  Country TEXT,\n  FOREIGN KEY (Country) REFERENCES countries(CountryId)\n);\n\nCREATE TABLE model_list (\n  ModelId INTEGER PRIMARY KEY,\n  Maker INTEGER,\n  Model TEXT UNIQUE,\n  FOREIGN KEY (Maker) REFERENCES car_makers (Id)\n);\n\nCREATE TABLE car_names (\n  MakeId INTEGER PRIMARY KEY,\n  Model TEXT,\n  Make TEXT,\n  FOREIGN KEY (Model) REFERENCES model_list (Model)\n);\nCREATE TABLE cars_data (\n  Id INTEGER PRIMARY KEY,\n  MPG TEXT,\n  Cylinders INTEGER,\n  Edispl REAL,\n  Horsepower TEXT,\n  Weight INTEGER,\n  Accelerate REAL,\n  Year INTEGER,\n  FOREIGN KEY (Id) REFERENCES car_names (MakeId)\n);\n\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';","prompt":"What is the name of the different car makers who produced a car in 1970?"}
{"context":"CREATE TABLE continents (\n  ContId INTEGER PRIMARY KEY,\n  Continent TEXT\n);\nCREATE TABLE countries (\n  CountryId INTEGER PRIMARY KEY,\n  CountryName TEXT,\n  Continent INTEGER,\n  FOREIGN KEY (Continent) REFERENCES continents(ContId)\n);\n\nCREATE TABLE car_makers (\n  Id INTEGER PRIMARY KEY,\n  Maker TEXT,\n  FullName TEXT,\n  Country TEXT,\n  FOREIGN KEY (Country) REFERENCES countries(CountryId)\n);\n\nCREATE TABLE model_list (\n  ModelId INTEGER PRIMARY KEY,\n  Maker INTEGER,\n  Model TEXT UNIQUE,\n  FOREIGN KEY (Maker) REFERENCES car_makers (Id)\n);\n\nCREATE TABLE car_names (\n  MakeId INTEGER PRIMARY KEY,\n  Model TEXT,\n  Make TEXT,\n  FOREIGN KEY (Model) REFERENCES model_list (Model)\n);\nCREATE TABLE cars_data (\n  Id INTEGER PRIMARY KEY,\n  MPG TEXT,\n  Cylinders INTEGER,\n  Edispl REAL,\n  Horsepower TEXT,\n  Weight INTEGER,\n  Accelerate REAL,\n  Year INTEGER,\n  FOREIGN KEY (Id) REFERENCES car_names (MakeId)\n);\n\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);","prompt":"Find the make and production time of the cars that were produced in the earliest year?"}
{"context":"CREATE TABLE continents (\n  ContId INTEGER PRIMARY KEY,\n  Continent TEXT\n);\nCREATE TABLE countries (\n  CountryId INTEGER PRIMARY KEY,\n  CountryName TEXT,\n  Continent INTEGER,\n  FOREIGN KEY (Continent) REFERENCES continents(ContId)\n);\n\nCREATE TABLE car_makers (\n  Id INTEGER PRIMARY KEY,\n  Maker TEXT,\n  FullName TEXT,\n  Country TEXT,\n  FOREIGN KEY (Country) REFERENCES countries(CountryId)\n);\n\nCREATE TABLE model_list (\n  ModelId INTEGER PRIMARY KEY,\n  Maker INTEGER,\n  Model TEXT UNIQUE,\n  FOREIGN KEY (Maker) REFERENCES car_makers (Id)\n);\n\nCREATE TABLE car_names (\n  MakeId INTEGER PRIMARY KEY,\n  Model TEXT,\n  Make TEXT,\n  FOREIGN KEY (Model) REFERENCES model_list (Model)\n);\nCREATE TABLE cars_data (\n  Id INTEGER PRIMARY KEY,\n  MPG TEXT,\n  Cylinders INTEGER,\n  Edispl REAL,\n  Horsepower TEXT,\n  Weight INTEGER,\n  Accelerate REAL,\n  Year INTEGER,\n  FOREIGN KEY (Id) REFERENCES car_names (MakeId)\n);\n\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);","prompt":"What is the maker of the carr produced in the earliest year and what year was it?"}
{"context":"CREATE TABLE continents (\n  ContId INTEGER PRIMARY KEY,\n  Continent TEXT\n);\nCREATE TABLE countries (\n  CountryId INTEGER PRIMARY KEY,\n  CountryName TEXT,\n  Continent INTEGER,\n  FOREIGN KEY (Continent) REFERENCES continents(ContId)\n);\n\nCREATE TABLE car_makers (\n  Id INTEGER PRIMARY KEY,\n  Maker TEXT,\n  FullName TEXT,\n  Country TEXT,\n  FOREIGN KEY (Country) REFERENCES countries(CountryId)\n);\n\nCREATE TABLE model_list (\n  ModelId INTEGER PRIMARY KEY,\n  Maker INTEGER,\n  Model TEXT UNIQUE,\n  FOREIGN KEY (Maker) REFERENCES car_makers (Id)\n);\n\nCREATE TABLE car_names (\n  MakeId INTEGER PRIMARY KEY,\n  Model TEXT,\n  Make TEXT,\n  FOREIGN KEY (Model) REFERENCES model_list (Model)\n);\nCREATE TABLE cars_data (\n  Id INTEGER PRIMARY KEY,\n  MPG TEXT,\n  Cylinders INTEGER,\n  Edispl REAL,\n  Horsepower TEXT,\n  Weight INTEGER,\n  Accelerate REAL,\n  Year INTEGER,\n  FOREIGN KEY (Id) REFERENCES car_names (MakeId)\n);\n\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980;","prompt":"Which distinct car models are the produced after 1980?"}
{"context":"CREATE TABLE continents (\n  ContId INTEGER PRIMARY KEY,\n  Continent TEXT\n);\nCREATE TABLE countries (\n  CountryId INTEGER PRIMARY KEY,\n  CountryName TEXT,\n  Continent INTEGER,\n  FOREIGN KEY (Continent) REFERENCES continents(ContId)\n);\n\nCREATE TABLE car_makers (\n  Id INTEGER PRIMARY KEY,\n  Maker TEXT,\n  FullName TEXT,\n  Country TEXT,\n  FOREIGN KEY (Country) REFERENCES countries(CountryId)\n);\n\nCREATE TABLE model_list (\n  ModelId INTEGER PRIMARY KEY,\n  Maker INTEGER,\n  Model TEXT UNIQUE,\n  FOREIGN KEY (Maker) REFERENCES car_makers (Id)\n);\n\nCREATE TABLE car_names (\n  MakeId INTEGER PRIMARY KEY,\n  Model TEXT,\n  Make TEXT,\n  FOREIGN KEY (Model) REFERENCES model_list (Model)\n);\nCREATE TABLE cars_data (\n  Id INTEGER PRIMARY KEY,\n  MPG TEXT,\n  Cylinders INTEGER,\n  Edispl REAL,\n  Horsepower TEXT,\n  Weight INTEGER,\n  Accelerate REAL,\n  Year INTEGER,\n  FOREIGN KEY (Id) REFERENCES car_names (MakeId)\n);\n\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980;","prompt":"What are the different models for the cards produced after 1980?"}
{"context":"CREATE TABLE continents (\n  ContId INTEGER PRIMARY KEY,\n  Continent TEXT\n);\nCREATE TABLE countries (\n  CountryId INTEGER PRIMARY KEY,\n  CountryName TEXT,\n  Continent INTEGER,\n  FOREIGN KEY (Continent) REFERENCES continents(ContId)\n);\n\nCREATE TABLE car_makers (\n  Id INTEGER PRIMARY KEY,\n  Maker TEXT,\n  FullName TEXT,\n  Country TEXT,\n  FOREIGN KEY (Country) REFERENCES countries(CountryId)\n);\n\nCREATE TABLE model_list (\n  ModelId INTEGER PRIMARY KEY,\n  Maker INTEGER,\n  Model TEXT UNIQUE,\n  FOREIGN KEY (Maker) REFERENCES car_makers (Id)\n);\n\nCREATE TABLE car_names (\n  MakeId INTEGER PRIMARY KEY,\n  Model TEXT,\n  Make TEXT,\n  FOREIGN KEY (Model) REFERENCES model_list (Model)\n);\nCREATE TABLE cars_data (\n  Id INTEGER PRIMARY KEY,\n  MPG TEXT,\n  Cylinders INTEGER,\n  Edispl REAL,\n  Horsepower TEXT,\n  Weight INTEGER,\n  Accelerate REAL,\n  Year INTEGER,\n  FOREIGN KEY (Id) REFERENCES car_names (MakeId)\n);\n\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;","prompt":"How many car makers are there in each continents? List the continent name and the count."}
{"context":"CREATE TABLE continents (\n  ContId INTEGER PRIMARY KEY,\n  Continent TEXT\n);\nCREATE TABLE countries (\n  CountryId INTEGER PRIMARY KEY,\n  CountryName TEXT,\n  Continent INTEGER,\n  FOREIGN KEY (Continent) REFERENCES continents(ContId)\n);\n\nCREATE TABLE car_makers (\n  Id INTEGER PRIMARY KEY,\n  Maker TEXT,\n  FullName TEXT,\n  Country TEXT,\n  FOREIGN KEY (Country) REFERENCES countries(CountryId)\n);\n\nCREATE TABLE model_list (\n  ModelId INTEGER PRIMARY KEY,\n  Maker INTEGER,\n  Model TEXT UNIQUE,\n  FOREIGN KEY (Maker) REFERENCES car_makers (Id)\n);\n\nCREATE TABLE car_names (\n  MakeId INTEGER PRIMARY KEY,\n  Model TEXT,\n  Make TEXT,\n  FOREIGN KEY (Model) REFERENCES model_list (Model)\n);\nCREATE TABLE cars_data (\n  Id INTEGER PRIMARY KEY,\n  MPG TEXT,\n  Cylinders INTEGER,\n  Edispl REAL,\n  Horsepower TEXT,\n  Weight INTEGER,\n  Accelerate REAL,\n  Year INTEGER,\n  FOREIGN KEY (Id) REFERENCES car_names (MakeId)\n);\n\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;","prompt":"What is the name of each continent and how many car makers are there in each one?"}
{"context":"CREATE TABLE continents (\n  ContId INTEGER PRIMARY KEY,\n  Continent TEXT\n);\nCREATE TABLE countries (\n  CountryId INTEGER PRIMARY KEY,\n  CountryName TEXT,\n  Continent INTEGER,\n  FOREIGN KEY (Continent) REFERENCES continents(ContId)\n);\n\nCREATE TABLE car_makers (\n  Id INTEGER PRIMARY KEY,\n  Maker TEXT,\n  FullName TEXT,\n  Country TEXT,\n  FOREIGN KEY (Country) REFERENCES countries(CountryId)\n);\n\nCREATE TABLE model_list (\n  ModelId INTEGER PRIMARY KEY,\n  Maker INTEGER,\n  Model TEXT UNIQUE,\n  FOREIGN KEY (Maker) REFERENCES car_makers (Id)\n);\n\nCREATE TABLE car_names (\n  MakeId INTEGER PRIMARY KEY,\n  Model TEXT,\n  Make TEXT,\n  FOREIGN KEY (Model) REFERENCES model_list (Model)\n);\nCREATE TABLE cars_data (\n  Id INTEGER PRIMARY KEY,\n  MPG TEXT,\n  Cylinders INTEGER,\n  Edispl REAL,\n  Horsepower TEXT,\n  Weight INTEGER,\n  Accelerate REAL,\n  Year INTEGER,\n  FOREIGN KEY (Id) REFERENCES car_names (MakeId)\n);\n\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1;","prompt":"Which of the countries has the most car makers? List the country name."}
{"context":"CREATE TABLE continents (\n  ContId INTEGER PRIMARY KEY,\n  Continent TEXT\n);\nCREATE TABLE countries (\n  CountryId INTEGER PRIMARY KEY,\n  CountryName TEXT,\n  Continent INTEGER,\n  FOREIGN KEY (Continent) REFERENCES continents(ContId)\n);\n\nCREATE TABLE car_makers (\n  Id INTEGER PRIMARY KEY,\n  Maker TEXT,\n  FullName TEXT,\n  Country TEXT,\n  FOREIGN KEY (Country) REFERENCES countries(CountryId)\n);\n\nCREATE TABLE model_list (\n  ModelId INTEGER PRIMARY KEY,\n  Maker INTEGER,\n  Model TEXT UNIQUE,\n  FOREIGN KEY (Maker) REFERENCES car_makers (Id)\n);\n\nCREATE TABLE car_names (\n  MakeId INTEGER PRIMARY KEY,\n  Model TEXT,\n  Make TEXT,\n  FOREIGN KEY (Model) REFERENCES model_list (Model)\n);\nCREATE TABLE cars_data (\n  Id INTEGER PRIMARY KEY,\n  MPG TEXT,\n  Cylinders INTEGER,\n  Edispl REAL,\n  Horsepower TEXT,\n  Weight INTEGER,\n  Accelerate REAL,\n  Year INTEGER,\n  FOREIGN KEY (Id) REFERENCES car_names (MakeId)\n);\n\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1;","prompt":"What is the name of the country with the most car makers?"}
{"context":"CREATE TABLE continents (\n  ContId INTEGER PRIMARY KEY,\n  Continent TEXT\n);\nCREATE TABLE countries (\n  CountryId INTEGER PRIMARY KEY,\n  CountryName TEXT,\n  Continent INTEGER,\n  FOREIGN KEY (Continent) REFERENCES continents(ContId)\n);\n\nCREATE TABLE car_makers (\n  Id INTEGER PRIMARY KEY,\n  Maker TEXT,\n  FullName TEXT,\n  Country TEXT,\n  FOREIGN KEY (Country) REFERENCES countries(CountryId)\n);\n\nCREATE TABLE model_list (\n  ModelId INTEGER PRIMARY KEY,\n  Maker INTEGER,\n  Model TEXT UNIQUE,\n  FOREIGN KEY (Maker) REFERENCES car_makers (Id)\n);\n\nCREATE TABLE car_names (\n  MakeId INTEGER PRIMARY KEY,\n  Model TEXT,\n  Make TEXT,\n  FOREIGN KEY (Model) REFERENCES model_list (Model)\n);\nCREATE TABLE cars_data (\n  Id INTEGER PRIMARY KEY,\n  MPG TEXT,\n  Cylinders INTEGER,\n  Edispl REAL,\n  Horsepower TEXT,\n  Weight INTEGER,\n  Accelerate REAL,\n  Year INTEGER,\n  FOREIGN KEY (Id) REFERENCES car_names (MakeId)\n);\n\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"select count(*) ,  t2.fullname from model_list as t1 join car_makers as t2 on t1.maker  =  t2.id group by t2.id;","prompt":"How many car models are produced by each maker ? Only list the count and the maker full name ."}
{"context":"CREATE TABLE continents (\n  ContId INTEGER PRIMARY KEY,\n  Continent TEXT\n);\nCREATE TABLE countries (\n  CountryId INTEGER PRIMARY KEY,\n  CountryName TEXT,\n  Continent INTEGER,\n  FOREIGN KEY (Continent) REFERENCES continents(ContId)\n);\n\nCREATE TABLE car_makers (\n  Id INTEGER PRIMARY KEY,\n  Maker TEXT,\n  FullName TEXT,\n  Country TEXT,\n  FOREIGN KEY (Country) REFERENCES countries(CountryId)\n);\n\nCREATE TABLE model_list (\n  ModelId INTEGER PRIMARY KEY,\n  Maker INTEGER,\n  Model TEXT UNIQUE,\n  FOREIGN KEY (Maker) REFERENCES car_makers (Id)\n);\n\nCREATE TABLE car_names (\n  MakeId INTEGER PRIMARY KEY,\n  Model TEXT,\n  Make TEXT,\n  FOREIGN KEY (Model) REFERENCES model_list (Model)\n);\nCREATE TABLE cars_data (\n  Id INTEGER PRIMARY KEY,\n  MPG TEXT,\n  Cylinders INTEGER,\n  Edispl REAL,\n  Horsepower TEXT,\n  Weight INTEGER,\n  Accelerate REAL,\n  Year INTEGER,\n  FOREIGN KEY (Id) REFERENCES car_names (MakeId)\n);\n\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT Count(*) ,  T2.FullName ,  T2.id FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id GROUP BY T2.id;","prompt":"What is the number of car models that are produced by each maker and what is the id and full name of each maker?"}
{"context":"CREATE TABLE continents (\n  ContId INTEGER PRIMARY KEY,\n  Continent TEXT\n);\nCREATE TABLE countries (\n  CountryId INTEGER PRIMARY KEY,\n  CountryName TEXT,\n  Continent INTEGER,\n  FOREIGN KEY (Continent) REFERENCES continents(ContId)\n);\n\nCREATE TABLE car_makers (\n  Id INTEGER PRIMARY KEY,\n  Maker TEXT,\n  FullName TEXT,\n  Country TEXT,\n  FOREIGN KEY (Country) REFERENCES countries(CountryId)\n);\n\nCREATE TABLE model_list (\n  ModelId INTEGER PRIMARY KEY,\n  Maker INTEGER,\n  Model TEXT UNIQUE,\n  FOREIGN KEY (Maker) REFERENCES car_makers (Id)\n);\n\nCREATE TABLE car_names (\n  MakeId INTEGER PRIMARY KEY,\n  Model TEXT,\n  Make TEXT,\n  FOREIGN KEY (Model) REFERENCES model_list (Model)\n);\nCREATE TABLE cars_data (\n  Id INTEGER PRIMARY KEY,\n  MPG TEXT,\n  Cylinders INTEGER,\n  Edispl REAL,\n  Horsepower TEXT,\n  Weight INTEGER,\n  Accelerate REAL,\n  Year INTEGER,\n  FOREIGN KEY (Id) REFERENCES car_names (MakeId)\n);\n\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';","prompt":"What is the accelerate of the car make amc hornet sportabout (sw)?"}
{"context":"CREATE TABLE continents (\n  ContId INTEGER PRIMARY KEY,\n  Continent TEXT\n);\nCREATE TABLE countries (\n  CountryId INTEGER PRIMARY KEY,\n  CountryName TEXT,\n  Continent INTEGER,\n  FOREIGN KEY (Continent) REFERENCES continents(ContId)\n);\n\nCREATE TABLE car_makers (\n  Id INTEGER PRIMARY KEY,\n  Maker TEXT,\n  FullName TEXT,\n  Country TEXT,\n  FOREIGN KEY (Country) REFERENCES countries(CountryId)\n);\n\nCREATE TABLE model_list (\n  ModelId INTEGER PRIMARY KEY,\n  Maker INTEGER,\n  Model TEXT UNIQUE,\n  FOREIGN KEY (Maker) REFERENCES car_makers (Id)\n);\n\nCREATE TABLE car_names (\n  MakeId INTEGER PRIMARY KEY,\n  Model TEXT,\n  Make TEXT,\n  FOREIGN KEY (Model) REFERENCES model_list (Model)\n);\nCREATE TABLE cars_data (\n  Id INTEGER PRIMARY KEY,\n  MPG TEXT,\n  Cylinders INTEGER,\n  Edispl REAL,\n  Horsepower TEXT,\n  Weight INTEGER,\n  Accelerate REAL,\n  Year INTEGER,\n  FOREIGN KEY (Id) REFERENCES car_names (MakeId)\n);\n\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';","prompt":"How much does the car accelerate that makes amc hornet sportabout (sw)?"}
{"context":"CREATE TABLE continents (\n  ContId INTEGER PRIMARY KEY,\n  Continent TEXT\n);\nCREATE TABLE countries (\n  CountryId INTEGER PRIMARY KEY,\n  CountryName TEXT,\n  Continent INTEGER,\n  FOREIGN KEY (Continent) REFERENCES continents(ContId)\n);\n\nCREATE TABLE car_makers (\n  Id INTEGER PRIMARY KEY,\n  Maker TEXT,\n  FullName TEXT,\n  Country TEXT,\n  FOREIGN KEY (Country) REFERENCES countries(CountryId)\n);\n\nCREATE TABLE model_list (\n  ModelId INTEGER PRIMARY KEY,\n  Maker INTEGER,\n  Model TEXT UNIQUE,\n  FOREIGN KEY (Maker) REFERENCES car_makers (Id)\n);\n\nCREATE TABLE car_names (\n  MakeId INTEGER PRIMARY KEY,\n  Model TEXT,\n  Make TEXT,\n  FOREIGN KEY (Model) REFERENCES model_list (Model)\n);\nCREATE TABLE cars_data (\n  Id INTEGER PRIMARY KEY,\n  MPG TEXT,\n  Cylinders INTEGER,\n  Edispl REAL,\n  Horsepower TEXT,\n  Weight INTEGER,\n  Accelerate REAL,\n  Year INTEGER,\n  FOREIGN KEY (Id) REFERENCES car_names (MakeId)\n);\n\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france';","prompt":"How many car makers are there in france?"}
{"context":"CREATE TABLE continents (\n  ContId INTEGER PRIMARY KEY,\n  Continent TEXT\n);\nCREATE TABLE countries (\n  CountryId INTEGER PRIMARY KEY,\n  CountryName TEXT,\n  Continent INTEGER,\n  FOREIGN KEY (Continent) REFERENCES continents(ContId)\n);\n\nCREATE TABLE car_makers (\n  Id INTEGER PRIMARY KEY,\n  Maker TEXT,\n  FullName TEXT,\n  Country TEXT,\n  FOREIGN KEY (Country) REFERENCES countries(CountryId)\n);\n\nCREATE TABLE model_list (\n  ModelId INTEGER PRIMARY KEY,\n  Maker INTEGER,\n  Model TEXT UNIQUE,\n  FOREIGN KEY (Maker) REFERENCES car_makers (Id)\n);\n\nCREATE TABLE car_names (\n  MakeId INTEGER PRIMARY KEY,\n  Model TEXT,\n  Make TEXT,\n  FOREIGN KEY (Model) REFERENCES model_list (Model)\n);\nCREATE TABLE cars_data (\n  Id INTEGER PRIMARY KEY,\n  MPG TEXT,\n  Cylinders INTEGER,\n  Edispl REAL,\n  Horsepower TEXT,\n  Weight INTEGER,\n  Accelerate REAL,\n  Year INTEGER,\n  FOREIGN KEY (Id) REFERENCES car_names (MakeId)\n);\n\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france';","prompt":"What is the number of makers of care in France?"}
{"context":"CREATE TABLE continents (\n  ContId INTEGER PRIMARY KEY,\n  Continent TEXT\n);\nCREATE TABLE countries (\n  CountryId INTEGER PRIMARY KEY,\n  CountryName TEXT,\n  Continent INTEGER,\n  FOREIGN KEY (Continent) REFERENCES continents(ContId)\n);\n\nCREATE TABLE car_makers (\n  Id INTEGER PRIMARY KEY,\n  Maker TEXT,\n  FullName TEXT,\n  Country TEXT,\n  FOREIGN KEY (Country) REFERENCES countries(CountryId)\n);\n\nCREATE TABLE model_list (\n  ModelId INTEGER PRIMARY KEY,\n  Maker INTEGER,\n  Model TEXT UNIQUE,\n  FOREIGN KEY (Maker) REFERENCES car_makers (Id)\n);\n\nCREATE TABLE car_names (\n  MakeId INTEGER PRIMARY KEY,\n  Model TEXT,\n  Make TEXT,\n  FOREIGN KEY (Model) REFERENCES model_list (Model)\n);\nCREATE TABLE cars_data (\n  Id INTEGER PRIMARY KEY,\n  MPG TEXT,\n  Cylinders INTEGER,\n  Edispl REAL,\n  Horsepower TEXT,\n  Weight INTEGER,\n  Accelerate REAL,\n  Year INTEGER,\n  FOREIGN KEY (Id) REFERENCES car_names (MakeId)\n);\n\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';","prompt":"How many car models are produced in the usa?"}
{"context":"CREATE TABLE continents (\n  ContId INTEGER PRIMARY KEY,\n  Continent TEXT\n);\nCREATE TABLE countries (\n  CountryId INTEGER PRIMARY KEY,\n  CountryName TEXT,\n  Continent INTEGER,\n  FOREIGN KEY (Continent) REFERENCES continents(ContId)\n);\n\nCREATE TABLE car_makers (\n  Id INTEGER PRIMARY KEY,\n  Maker TEXT,\n  FullName TEXT,\n  Country TEXT,\n  FOREIGN KEY (Country) REFERENCES countries(CountryId)\n);\n\nCREATE TABLE model_list (\n  ModelId INTEGER PRIMARY KEY,\n  Maker INTEGER,\n  Model TEXT UNIQUE,\n  FOREIGN KEY (Maker) REFERENCES car_makers (Id)\n);\n\nCREATE TABLE car_names (\n  MakeId INTEGER PRIMARY KEY,\n  Model TEXT,\n  Make TEXT,\n  FOREIGN KEY (Model) REFERENCES model_list (Model)\n);\nCREATE TABLE cars_data (\n  Id INTEGER PRIMARY KEY,\n  MPG TEXT,\n  Cylinders INTEGER,\n  Edispl REAL,\n  Horsepower TEXT,\n  Weight INTEGER,\n  Accelerate REAL,\n  Year INTEGER,\n  FOREIGN KEY (Id) REFERENCES car_names (MakeId)\n);\n\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';","prompt":"What is the count of the car models produced in the United States?"}
{"context":"CREATE TABLE continents (\n  ContId INTEGER PRIMARY KEY,\n  Continent TEXT\n);\nCREATE TABLE countries (\n  CountryId INTEGER PRIMARY KEY,\n  CountryName TEXT,\n  Continent INTEGER,\n  FOREIGN KEY (Continent) REFERENCES continents(ContId)\n);\n\nCREATE TABLE car_makers (\n  Id INTEGER PRIMARY KEY,\n  Maker TEXT,\n  FullName TEXT,\n  Country TEXT,\n  FOREIGN KEY (Country) REFERENCES countries(CountryId)\n);\n\nCREATE TABLE model_list (\n  ModelId INTEGER PRIMARY KEY,\n  Maker INTEGER,\n  Model TEXT UNIQUE,\n  FOREIGN KEY (Maker) REFERENCES car_makers (Id)\n);\n\nCREATE TABLE car_names (\n  MakeId INTEGER PRIMARY KEY,\n  Model TEXT,\n  Make TEXT,\n  FOREIGN KEY (Model) REFERENCES model_list (Model)\n);\nCREATE TABLE cars_data (\n  Id INTEGER PRIMARY KEY,\n  MPG TEXT,\n  Cylinders INTEGER,\n  Edispl REAL,\n  Horsepower TEXT,\n  Weight INTEGER,\n  Accelerate REAL,\n  Year INTEGER,\n  FOREIGN KEY (Id) REFERENCES car_names (MakeId)\n);\n\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4;","prompt":"What is the average miles per gallon(mpg) of the cars with 4 cylinders?"}
{"context":"CREATE TABLE continents (\n  ContId INTEGER PRIMARY KEY,\n  Continent TEXT\n);\nCREATE TABLE countries (\n  CountryId INTEGER PRIMARY KEY,\n  CountryName TEXT,\n  Continent INTEGER,\n  FOREIGN KEY (Continent) REFERENCES continents(ContId)\n);\n\nCREATE TABLE car_makers (\n  Id INTEGER PRIMARY KEY,\n  Maker TEXT,\n  FullName TEXT,\n  Country TEXT,\n  FOREIGN KEY (Country) REFERENCES countries(CountryId)\n);\n\nCREATE TABLE model_list (\n  ModelId INTEGER PRIMARY KEY,\n  Maker INTEGER,\n  Model TEXT UNIQUE,\n  FOREIGN KEY (Maker) REFERENCES car_makers (Id)\n);\n\nCREATE TABLE car_names (\n  MakeId INTEGER PRIMARY KEY,\n  Model TEXT,\n  Make TEXT,\n  FOREIGN KEY (Model) REFERENCES model_list (Model)\n);\nCREATE TABLE cars_data (\n  Id INTEGER PRIMARY KEY,\n  MPG TEXT,\n  Cylinders INTEGER,\n  Edispl REAL,\n  Horsepower TEXT,\n  Weight INTEGER,\n  Accelerate REAL,\n  Year INTEGER,\n  FOREIGN KEY (Id) REFERENCES car_names (MakeId)\n);\n\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4;","prompt":"What is the average miles per gallon of all the cards with 4 cylinders?"}
{"context":"CREATE TABLE continents (\n  ContId INTEGER PRIMARY KEY,\n  Continent TEXT\n);\nCREATE TABLE countries (\n  CountryId INTEGER PRIMARY KEY,\n  CountryName TEXT,\n  Continent INTEGER,\n  FOREIGN KEY (Continent) REFERENCES continents(ContId)\n);\n\nCREATE TABLE car_makers (\n  Id INTEGER PRIMARY KEY,\n  Maker TEXT,\n  FullName TEXT,\n  Country TEXT,\n  FOREIGN KEY (Country) REFERENCES countries(CountryId)\n);\n\nCREATE TABLE model_list (\n  ModelId INTEGER PRIMARY KEY,\n  Maker INTEGER,\n  Model TEXT UNIQUE,\n  FOREIGN KEY (Maker) REFERENCES car_makers (Id)\n);\n\nCREATE TABLE car_names (\n  MakeId INTEGER PRIMARY KEY,\n  Model TEXT,\n  Make TEXT,\n  FOREIGN KEY (Model) REFERENCES model_list (Model)\n);\nCREATE TABLE cars_data (\n  Id INTEGER PRIMARY KEY,\n  MPG TEXT,\n  Cylinders INTEGER,\n  Edispl REAL,\n  Horsepower TEXT,\n  Weight INTEGER,\n  Accelerate REAL,\n  Year INTEGER,\n  FOREIGN KEY (Id) REFERENCES car_names (MakeId)\n);\n\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"select min(weight) from cars_data where cylinders  =  8 and year  =  1974","prompt":"What is the smallest weight of the car produced with 8 cylinders on 1974 ?"}
{"context":"CREATE TABLE continents (\n  ContId INTEGER PRIMARY KEY,\n  Continent TEXT\n);\nCREATE TABLE countries (\n  CountryId INTEGER PRIMARY KEY,\n  CountryName TEXT,\n  Continent INTEGER,\n  FOREIGN KEY (Continent) REFERENCES continents(ContId)\n);\n\nCREATE TABLE car_makers (\n  Id INTEGER PRIMARY KEY,\n  Maker TEXT,\n  FullName TEXT,\n  Country TEXT,\n  FOREIGN KEY (Country) REFERENCES countries(CountryId)\n);\n\nCREATE TABLE model_list (\n  ModelId INTEGER PRIMARY KEY,\n  Maker INTEGER,\n  Model TEXT UNIQUE,\n  FOREIGN KEY (Maker) REFERENCES car_makers (Id)\n);\n\nCREATE TABLE car_names (\n  MakeId INTEGER PRIMARY KEY,\n  Model TEXT,\n  Make TEXT,\n  FOREIGN KEY (Model) REFERENCES model_list (Model)\n);\nCREATE TABLE cars_data (\n  Id INTEGER PRIMARY KEY,\n  MPG TEXT,\n  Cylinders INTEGER,\n  Edispl REAL,\n  Horsepower TEXT,\n  Weight INTEGER,\n  Accelerate REAL,\n  Year INTEGER,\n  FOREIGN KEY (Id) REFERENCES car_names (MakeId)\n);\n\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"select min(weight) from cars_data where cylinders  =  8 and year  =  1974","prompt":"What is the minimum weight of the car with 8 cylinders produced in 1974 ?"}
{"context":"CREATE TABLE continents (\n  ContId INTEGER PRIMARY KEY,\n  Continent TEXT\n);\nCREATE TABLE countries (\n  CountryId INTEGER PRIMARY KEY,\n  CountryName TEXT,\n  Continent INTEGER,\n  FOREIGN KEY (Continent) REFERENCES continents(ContId)\n);\n\nCREATE TABLE car_makers (\n  Id INTEGER PRIMARY KEY,\n  Maker TEXT,\n  FullName TEXT,\n  Country TEXT,\n  FOREIGN KEY (Country) REFERENCES countries(CountryId)\n);\n\nCREATE TABLE model_list (\n  ModelId INTEGER PRIMARY KEY,\n  Maker INTEGER,\n  Model TEXT UNIQUE,\n  FOREIGN KEY (Maker) REFERENCES car_makers (Id)\n);\n\nCREATE TABLE car_names (\n  MakeId INTEGER PRIMARY KEY,\n  Model TEXT,\n  Make TEXT,\n  FOREIGN KEY (Model) REFERENCES model_list (Model)\n);\nCREATE TABLE cars_data (\n  Id INTEGER PRIMARY KEY,\n  MPG TEXT,\n  Cylinders INTEGER,\n  Edispl REAL,\n  Horsepower TEXT,\n  Weight INTEGER,\n  Accelerate REAL,\n  Year INTEGER,\n  FOREIGN KEY (Id) REFERENCES car_names (MakeId)\n);\n\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT Maker ,  Model FROM MODEL_LIST;","prompt":"What are all the makers and models?"}
{"context":"CREATE TABLE continents (\n  ContId INTEGER PRIMARY KEY,\n  Continent TEXT\n);\nCREATE TABLE countries (\n  CountryId INTEGER PRIMARY KEY,\n  CountryName TEXT,\n  Continent INTEGER,\n  FOREIGN KEY (Continent) REFERENCES continents(ContId)\n);\n\nCREATE TABLE car_makers (\n  Id INTEGER PRIMARY KEY,\n  Maker TEXT,\n  FullName TEXT,\n  Country TEXT,\n  FOREIGN KEY (Country) REFERENCES countries(CountryId)\n);\n\nCREATE TABLE model_list (\n  ModelId INTEGER PRIMARY KEY,\n  Maker INTEGER,\n  Model TEXT UNIQUE,\n  FOREIGN KEY (Maker) REFERENCES car_makers (Id)\n);\n\nCREATE TABLE car_names (\n  MakeId INTEGER PRIMARY KEY,\n  Model TEXT,\n  Make TEXT,\n  FOREIGN KEY (Model) REFERENCES model_list (Model)\n);\nCREATE TABLE cars_data (\n  Id INTEGER PRIMARY KEY,\n  MPG TEXT,\n  Cylinders INTEGER,\n  Edispl REAL,\n  Horsepower TEXT,\n  Weight INTEGER,\n  Accelerate REAL,\n  Year INTEGER,\n  FOREIGN KEY (Id) REFERENCES car_names (MakeId)\n);\n\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT Maker ,  Model FROM MODEL_LIST;","prompt":"What are the makers and models?"}
{"context":"CREATE TABLE continents (\n  ContId INTEGER PRIMARY KEY,\n  Continent TEXT\n);\nCREATE TABLE countries (\n  CountryId INTEGER PRIMARY KEY,\n  CountryName TEXT,\n  Continent INTEGER,\n  FOREIGN KEY (Continent) REFERENCES continents(ContId)\n);\n\nCREATE TABLE car_makers (\n  Id INTEGER PRIMARY KEY,\n  Maker TEXT,\n  FullName TEXT,\n  Country TEXT,\n  FOREIGN KEY (Country) REFERENCES countries(CountryId)\n);\n\nCREATE TABLE model_list (\n  ModelId INTEGER PRIMARY KEY,\n  Maker INTEGER,\n  Model TEXT UNIQUE,\n  FOREIGN KEY (Maker) REFERENCES car_makers (Id)\n);\n\nCREATE TABLE car_names (\n  MakeId INTEGER PRIMARY KEY,\n  Model TEXT,\n  Make TEXT,\n  FOREIGN KEY (Model) REFERENCES model_list (Model)\n);\nCREATE TABLE cars_data (\n  Id INTEGER PRIMARY KEY,\n  MPG TEXT,\n  Cylinders INTEGER,\n  Edispl REAL,\n  Horsepower TEXT,\n  Weight INTEGER,\n  Accelerate REAL,\n  Year INTEGER,\n  FOREIGN KEY (Id) REFERENCES car_names (MakeId)\n);\n\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;","prompt":"What are the countries having at least one car maker? List name and id."}
{"context":"CREATE TABLE continents (\n  ContId INTEGER PRIMARY KEY,\n  Continent TEXT\n);\nCREATE TABLE countries (\n  CountryId INTEGER PRIMARY KEY,\n  CountryName TEXT,\n  Continent INTEGER,\n  FOREIGN KEY (Continent) REFERENCES continents(ContId)\n);\n\nCREATE TABLE car_makers (\n  Id INTEGER PRIMARY KEY,\n  Maker TEXT,\n  FullName TEXT,\n  Country TEXT,\n  FOREIGN KEY (Country) REFERENCES countries(CountryId)\n);\n\nCREATE TABLE model_list (\n  ModelId INTEGER PRIMARY KEY,\n  Maker INTEGER,\n  Model TEXT UNIQUE,\n  FOREIGN KEY (Maker) REFERENCES car_makers (Id)\n);\n\nCREATE TABLE car_names (\n  MakeId INTEGER PRIMARY KEY,\n  Model TEXT,\n  Make TEXT,\n  FOREIGN KEY (Model) REFERENCES model_list (Model)\n);\nCREATE TABLE cars_data (\n  Id INTEGER PRIMARY KEY,\n  MPG TEXT,\n  Cylinders INTEGER,\n  Edispl REAL,\n  Horsepower TEXT,\n  Weight INTEGER,\n  Accelerate REAL,\n  Year INTEGER,\n  FOREIGN KEY (Id) REFERENCES car_names (MakeId)\n);\n\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;","prompt":"What are the names and ids of all countries with at least one car maker?"}
{"context":"CREATE TABLE continents (\n  ContId INTEGER PRIMARY KEY,\n  Continent TEXT\n);\nCREATE TABLE countries (\n  CountryId INTEGER PRIMARY KEY,\n  CountryName TEXT,\n  Continent INTEGER,\n  FOREIGN KEY (Continent) REFERENCES continents(ContId)\n);\n\nCREATE TABLE car_makers (\n  Id INTEGER PRIMARY KEY,\n  Maker TEXT,\n  FullName TEXT,\n  Country TEXT,\n  FOREIGN KEY (Country) REFERENCES countries(CountryId)\n);\n\nCREATE TABLE model_list (\n  ModelId INTEGER PRIMARY KEY,\n  Maker INTEGER,\n  Model TEXT UNIQUE,\n  FOREIGN KEY (Maker) REFERENCES car_makers (Id)\n);\n\nCREATE TABLE car_names (\n  MakeId INTEGER PRIMARY KEY,\n  Model TEXT,\n  Make TEXT,\n  FOREIGN KEY (Model) REFERENCES model_list (Model)\n);\nCREATE TABLE cars_data (\n  Id INTEGER PRIMARY KEY,\n  MPG TEXT,\n  Cylinders INTEGER,\n  Edispl REAL,\n  Horsepower TEXT,\n  Weight INTEGER,\n  Accelerate REAL,\n  Year INTEGER,\n  FOREIGN KEY (Id) REFERENCES car_names (MakeId)\n);\n\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150;","prompt":"What is the number of the cars with horsepower more than 150?"}
{"context":"CREATE TABLE continents (\n  ContId INTEGER PRIMARY KEY,\n  Continent TEXT\n);\nCREATE TABLE countries (\n  CountryId INTEGER PRIMARY KEY,\n  CountryName TEXT,\n  Continent INTEGER,\n  FOREIGN KEY (Continent) REFERENCES continents(ContId)\n);\n\nCREATE TABLE car_makers (\n  Id INTEGER PRIMARY KEY,\n  Maker TEXT,\n  FullName TEXT,\n  Country TEXT,\n  FOREIGN KEY (Country) REFERENCES countries(CountryId)\n);\n\nCREATE TABLE model_list (\n  ModelId INTEGER PRIMARY KEY,\n  Maker INTEGER,\n  Model TEXT UNIQUE,\n  FOREIGN KEY (Maker) REFERENCES car_makers (Id)\n);\n\nCREATE TABLE car_names (\n  MakeId INTEGER PRIMARY KEY,\n  Model TEXT,\n  Make TEXT,\n  FOREIGN KEY (Model) REFERENCES model_list (Model)\n);\nCREATE TABLE cars_data (\n  Id INTEGER PRIMARY KEY,\n  MPG TEXT,\n  Cylinders INTEGER,\n  Edispl REAL,\n  Horsepower TEXT,\n  Weight INTEGER,\n  Accelerate REAL,\n  Year INTEGER,\n  FOREIGN KEY (Id) REFERENCES car_names (MakeId)\n);\n\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150;","prompt":"What is the number of cars with a horsepower greater than 150?"}
{"context":"CREATE TABLE continents (\n  ContId INTEGER PRIMARY KEY,\n  Continent TEXT\n);\nCREATE TABLE countries (\n  CountryId INTEGER PRIMARY KEY,\n  CountryName TEXT,\n  Continent INTEGER,\n  FOREIGN KEY (Continent) REFERENCES continents(ContId)\n);\n\nCREATE TABLE car_makers (\n  Id INTEGER PRIMARY KEY,\n  Maker TEXT,\n  FullName TEXT,\n  Country TEXT,\n  FOREIGN KEY (Country) REFERENCES countries(CountryId)\n);\n\nCREATE TABLE model_list (\n  ModelId INTEGER PRIMARY KEY,\n  Maker INTEGER,\n  Model TEXT UNIQUE,\n  FOREIGN KEY (Maker) REFERENCES car_makers (Id)\n);\n\nCREATE TABLE car_names (\n  MakeId INTEGER PRIMARY KEY,\n  Model TEXT,\n  Make TEXT,\n  FOREIGN KEY (Model) REFERENCES model_list (Model)\n);\nCREATE TABLE cars_data (\n  Id INTEGER PRIMARY KEY,\n  MPG TEXT,\n  Cylinders INTEGER,\n  Edispl REAL,\n  Horsepower TEXT,\n  Weight INTEGER,\n  Accelerate REAL,\n  Year INTEGER,\n  FOREIGN KEY (Id) REFERENCES car_names (MakeId)\n);\n\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR;","prompt":"What is the average weight of cars each year?"}
{"context":"CREATE TABLE continents (\n  ContId INTEGER PRIMARY KEY,\n  Continent TEXT\n);\nCREATE TABLE countries (\n  CountryId INTEGER PRIMARY KEY,\n  CountryName TEXT,\n  Continent INTEGER,\n  FOREIGN KEY (Continent) REFERENCES continents(ContId)\n);\n\nCREATE TABLE car_makers (\n  Id INTEGER PRIMARY KEY,\n  Maker TEXT,\n  FullName TEXT,\n  Country TEXT,\n  FOREIGN KEY (Country) REFERENCES countries(CountryId)\n);\n\nCREATE TABLE model_list (\n  ModelId INTEGER PRIMARY KEY,\n  Maker INTEGER,\n  Model TEXT UNIQUE,\n  FOREIGN KEY (Maker) REFERENCES car_makers (Id)\n);\n\nCREATE TABLE car_names (\n  MakeId INTEGER PRIMARY KEY,\n  Model TEXT,\n  Make TEXT,\n  FOREIGN KEY (Model) REFERENCES model_list (Model)\n);\nCREATE TABLE cars_data (\n  Id INTEGER PRIMARY KEY,\n  MPG TEXT,\n  Cylinders INTEGER,\n  Edispl REAL,\n  Horsepower TEXT,\n  Weight INTEGER,\n  Accelerate REAL,\n  Year INTEGER,\n  FOREIGN KEY (Id) REFERENCES car_names (MakeId)\n);\n\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR;","prompt":"What is the average weight and year for each year?"}
{"context":"CREATE TABLE continents (\n  ContId INTEGER PRIMARY KEY,\n  Continent TEXT\n);\nCREATE TABLE countries (\n  CountryId INTEGER PRIMARY KEY,\n  CountryName TEXT,\n  Continent INTEGER,\n  FOREIGN KEY (Continent) REFERENCES continents(ContId)\n);\n\nCREATE TABLE car_makers (\n  Id INTEGER PRIMARY KEY,\n  Maker TEXT,\n  FullName TEXT,\n  Country TEXT,\n  FOREIGN KEY (Country) REFERENCES countries(CountryId)\n);\n\nCREATE TABLE model_list (\n  ModelId INTEGER PRIMARY KEY,\n  Maker INTEGER,\n  Model TEXT UNIQUE,\n  FOREIGN KEY (Maker) REFERENCES car_makers (Id)\n);\n\nCREATE TABLE car_names (\n  MakeId INTEGER PRIMARY KEY,\n  Model TEXT,\n  Make TEXT,\n  FOREIGN KEY (Model) REFERENCES model_list (Model)\n);\nCREATE TABLE cars_data (\n  Id INTEGER PRIMARY KEY,\n  MPG TEXT,\n  Cylinders INTEGER,\n  Edispl REAL,\n  Horsepower TEXT,\n  Weight INTEGER,\n  Accelerate REAL,\n  Year INTEGER,\n  FOREIGN KEY (Id) REFERENCES car_names (MakeId)\n);\n\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;","prompt":"Which countries in europe have at least 3 car manufacturers?"}
{"context":"CREATE TABLE continents (\n  ContId INTEGER PRIMARY KEY,\n  Continent TEXT\n);\nCREATE TABLE countries (\n  CountryId INTEGER PRIMARY KEY,\n  CountryName TEXT,\n  Continent INTEGER,\n  FOREIGN KEY (Continent) REFERENCES continents(ContId)\n);\n\nCREATE TABLE car_makers (\n  Id INTEGER PRIMARY KEY,\n  Maker TEXT,\n  FullName TEXT,\n  Country TEXT,\n  FOREIGN KEY (Country) REFERENCES countries(CountryId)\n);\n\nCREATE TABLE model_list (\n  ModelId INTEGER PRIMARY KEY,\n  Maker INTEGER,\n  Model TEXT UNIQUE,\n  FOREIGN KEY (Maker) REFERENCES car_makers (Id)\n);\n\nCREATE TABLE car_names (\n  MakeId INTEGER PRIMARY KEY,\n  Model TEXT,\n  Make TEXT,\n  FOREIGN KEY (Model) REFERENCES model_list (Model)\n);\nCREATE TABLE cars_data (\n  Id INTEGER PRIMARY KEY,\n  MPG TEXT,\n  Cylinders INTEGER,\n  Edispl REAL,\n  Horsepower TEXT,\n  Weight INTEGER,\n  Accelerate REAL,\n  Year INTEGER,\n  FOREIGN KEY (Id) REFERENCES car_names (MakeId)\n);\n\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;","prompt":"What are the names of all European countries with at least 3 manufacturers?"}
{"context":"CREATE TABLE continents (\n  ContId INTEGER PRIMARY KEY,\n  Continent TEXT\n);\nCREATE TABLE countries (\n  CountryId INTEGER PRIMARY KEY,\n  CountryName TEXT,\n  Continent INTEGER,\n  FOREIGN KEY (Continent) REFERENCES continents(ContId)\n);\n\nCREATE TABLE car_makers (\n  Id INTEGER PRIMARY KEY,\n  Maker TEXT,\n  FullName TEXT,\n  Country TEXT,\n  FOREIGN KEY (Country) REFERENCES countries(CountryId)\n);\n\nCREATE TABLE model_list (\n  ModelId INTEGER PRIMARY KEY,\n  Maker INTEGER,\n  Model TEXT UNIQUE,\n  FOREIGN KEY (Maker) REFERENCES car_makers (Id)\n);\n\nCREATE TABLE car_names (\n  MakeId INTEGER PRIMARY KEY,\n  Model TEXT,\n  Make TEXT,\n  FOREIGN KEY (Model) REFERENCES model_list (Model)\n);\nCREATE TABLE cars_data (\n  Id INTEGER PRIMARY KEY,\n  MPG TEXT,\n  Cylinders INTEGER,\n  Edispl REAL,\n  Horsepower TEXT,\n  Weight INTEGER,\n  Accelerate REAL,\n  Year INTEGER,\n  FOREIGN KEY (Id) REFERENCES car_names (MakeId)\n);\n\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;","prompt":"What is the maximum horsepower and the make of the car models with 3 cylinders?"}
{"context":"CREATE TABLE continents (\n  ContId INTEGER PRIMARY KEY,\n  Continent TEXT\n);\nCREATE TABLE countries (\n  CountryId INTEGER PRIMARY KEY,\n  CountryName TEXT,\n  Continent INTEGER,\n  FOREIGN KEY (Continent) REFERENCES continents(ContId)\n);\n\nCREATE TABLE car_makers (\n  Id INTEGER PRIMARY KEY,\n  Maker TEXT,\n  FullName TEXT,\n  Country TEXT,\n  FOREIGN KEY (Country) REFERENCES countries(CountryId)\n);\n\nCREATE TABLE model_list (\n  ModelId INTEGER PRIMARY KEY,\n  Maker INTEGER,\n  Model TEXT UNIQUE,\n  FOREIGN KEY (Maker) REFERENCES car_makers (Id)\n);\n\nCREATE TABLE car_names (\n  MakeId INTEGER PRIMARY KEY,\n  Model TEXT,\n  Make TEXT,\n  FOREIGN KEY (Model) REFERENCES model_list (Model)\n);\nCREATE TABLE cars_data (\n  Id INTEGER PRIMARY KEY,\n  MPG TEXT,\n  Cylinders INTEGER,\n  Edispl REAL,\n  Horsepower TEXT,\n  Weight INTEGER,\n  Accelerate REAL,\n  Year INTEGER,\n  FOREIGN KEY (Id) REFERENCES car_names (MakeId)\n);\n\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;","prompt":"What is the largest amount of horsepower for the models with 3 cylinders and what make is it?"}
{"context":"CREATE TABLE continents (\n  ContId INTEGER PRIMARY KEY,\n  Continent TEXT\n);\nCREATE TABLE countries (\n  CountryId INTEGER PRIMARY KEY,\n  CountryName TEXT,\n  Continent INTEGER,\n  FOREIGN KEY (Continent) REFERENCES continents(ContId)\n);\n\nCREATE TABLE car_makers (\n  Id INTEGER PRIMARY KEY,\n  Maker TEXT,\n  FullName TEXT,\n  Country TEXT,\n  FOREIGN KEY (Country) REFERENCES countries(CountryId)\n);\n\nCREATE TABLE model_list (\n  ModelId INTEGER PRIMARY KEY,\n  Maker INTEGER,\n  Model TEXT UNIQUE,\n  FOREIGN KEY (Maker) REFERENCES car_makers (Id)\n);\n\nCREATE TABLE car_names (\n  MakeId INTEGER PRIMARY KEY,\n  Model TEXT,\n  Make TEXT,\n  FOREIGN KEY (Model) REFERENCES model_list (Model)\n);\nCREATE TABLE cars_data (\n  Id INTEGER PRIMARY KEY,\n  MPG TEXT,\n  Cylinders INTEGER,\n  Edispl REAL,\n  Horsepower TEXT,\n  Weight INTEGER,\n  Accelerate REAL,\n  Year INTEGER,\n  FOREIGN KEY (Id) REFERENCES car_names (MakeId)\n);\n\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.mpg DESC LIMIT 1;","prompt":"Which model saves the most gasoline? That is to say, have the maximum miles per gallon."}
{"context":"CREATE TABLE continents (\n  ContId INTEGER PRIMARY KEY,\n  Continent TEXT\n);\nCREATE TABLE countries (\n  CountryId INTEGER PRIMARY KEY,\n  CountryName TEXT,\n  Continent INTEGER,\n  FOREIGN KEY (Continent) REFERENCES continents(ContId)\n);\n\nCREATE TABLE car_makers (\n  Id INTEGER PRIMARY KEY,\n  Maker TEXT,\n  FullName TEXT,\n  Country TEXT,\n  FOREIGN KEY (Country) REFERENCES countries(CountryId)\n);\n\nCREATE TABLE model_list (\n  ModelId INTEGER PRIMARY KEY,\n  Maker INTEGER,\n  Model TEXT UNIQUE,\n  FOREIGN KEY (Maker) REFERENCES car_makers (Id)\n);\n\nCREATE TABLE car_names (\n  MakeId INTEGER PRIMARY KEY,\n  Model TEXT,\n  Make TEXT,\n  FOREIGN KEY (Model) REFERENCES model_list (Model)\n);\nCREATE TABLE cars_data (\n  Id INTEGER PRIMARY KEY,\n  MPG TEXT,\n  Cylinders INTEGER,\n  Edispl REAL,\n  Horsepower TEXT,\n  Weight INTEGER,\n  Accelerate REAL,\n  Year INTEGER,\n  FOREIGN KEY (Id) REFERENCES car_names (MakeId)\n);\n\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"select t1.model from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id order by t2.mpg desc limit 1;","prompt":"What is the car model with the highest mpg ?"}
{"context":"CREATE TABLE continents (\n  ContId INTEGER PRIMARY KEY,\n  Continent TEXT\n);\nCREATE TABLE countries (\n  CountryId INTEGER PRIMARY KEY,\n  CountryName TEXT,\n  Continent INTEGER,\n  FOREIGN KEY (Continent) REFERENCES continents(ContId)\n);\n\nCREATE TABLE car_makers (\n  Id INTEGER PRIMARY KEY,\n  Maker TEXT,\n  FullName TEXT,\n  Country TEXT,\n  FOREIGN KEY (Country) REFERENCES countries(CountryId)\n);\n\nCREATE TABLE model_list (\n  ModelId INTEGER PRIMARY KEY,\n  Maker INTEGER,\n  Model TEXT UNIQUE,\n  FOREIGN KEY (Maker) REFERENCES car_makers (Id)\n);\n\nCREATE TABLE car_names (\n  MakeId INTEGER PRIMARY KEY,\n  Model TEXT,\n  Make TEXT,\n  FOREIGN KEY (Model) REFERENCES model_list (Model)\n);\nCREATE TABLE cars_data (\n  Id INTEGER PRIMARY KEY,\n  MPG TEXT,\n  Cylinders INTEGER,\n  Edispl REAL,\n  Horsepower TEXT,\n  Weight INTEGER,\n  Accelerate REAL,\n  Year INTEGER,\n  FOREIGN KEY (Id) REFERENCES car_names (MakeId)\n);\n\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT avg(horsepower) FROM CARS_DATA WHERE YEAR  <  1980;","prompt":"What is the average horsepower of the cars before 1980?"}
{"context":"CREATE TABLE continents (\n  ContId INTEGER PRIMARY KEY,\n  Continent TEXT\n);\nCREATE TABLE countries (\n  CountryId INTEGER PRIMARY KEY,\n  CountryName TEXT,\n  Continent INTEGER,\n  FOREIGN KEY (Continent) REFERENCES continents(ContId)\n);\n\nCREATE TABLE car_makers (\n  Id INTEGER PRIMARY KEY,\n  Maker TEXT,\n  FullName TEXT,\n  Country TEXT,\n  FOREIGN KEY (Country) REFERENCES countries(CountryId)\n);\n\nCREATE TABLE model_list (\n  ModelId INTEGER PRIMARY KEY,\n  Maker INTEGER,\n  Model TEXT UNIQUE,\n  FOREIGN KEY (Maker) REFERENCES car_makers (Id)\n);\n\nCREATE TABLE car_names (\n  MakeId INTEGER PRIMARY KEY,\n  Model TEXT,\n  Make TEXT,\n  FOREIGN KEY (Model) REFERENCES model_list (Model)\n);\nCREATE TABLE cars_data (\n  Id INTEGER PRIMARY KEY,\n  MPG TEXT,\n  Cylinders INTEGER,\n  Edispl REAL,\n  Horsepower TEXT,\n  Weight INTEGER,\n  Accelerate REAL,\n  Year INTEGER,\n  FOREIGN KEY (Id) REFERENCES car_names (MakeId)\n);\n\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"select avg(horsepower) from cars_data where year  <  1980;","prompt":"What is the average horsepower for all cars produced before 1980 ?"}
{"context":"CREATE TABLE continents (\n  ContId INTEGER PRIMARY KEY,\n  Continent TEXT\n);\nCREATE TABLE countries (\n  CountryId INTEGER PRIMARY KEY,\n  CountryName TEXT,\n  Continent INTEGER,\n  FOREIGN KEY (Continent) REFERENCES continents(ContId)\n);\n\nCREATE TABLE car_makers (\n  Id INTEGER PRIMARY KEY,\n  Maker TEXT,\n  FullName TEXT,\n  Country TEXT,\n  FOREIGN KEY (Country) REFERENCES countries(CountryId)\n);\n\nCREATE TABLE model_list (\n  ModelId INTEGER PRIMARY KEY,\n  Maker INTEGER,\n  Model TEXT UNIQUE,\n  FOREIGN KEY (Maker) REFERENCES car_makers (Id)\n);\n\nCREATE TABLE car_names (\n  MakeId INTEGER PRIMARY KEY,\n  Model TEXT,\n  Make TEXT,\n  FOREIGN KEY (Model) REFERENCES model_list (Model)\n);\nCREATE TABLE cars_data (\n  Id INTEGER PRIMARY KEY,\n  MPG TEXT,\n  Cylinders INTEGER,\n  Edispl REAL,\n  Horsepower TEXT,\n  Weight INTEGER,\n  Accelerate REAL,\n  Year INTEGER,\n  FOREIGN KEY (Id) REFERENCES car_names (MakeId)\n);\n\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo';","prompt":"What is the average edispl of the cars of model volvo?"}
{"context":"CREATE TABLE continents (\n  ContId INTEGER PRIMARY KEY,\n  Continent TEXT\n);\nCREATE TABLE countries (\n  CountryId INTEGER PRIMARY KEY,\n  CountryName TEXT,\n  Continent INTEGER,\n  FOREIGN KEY (Continent) REFERENCES continents(ContId)\n);\n\nCREATE TABLE car_makers (\n  Id INTEGER PRIMARY KEY,\n  Maker TEXT,\n  FullName TEXT,\n  Country TEXT,\n  FOREIGN KEY (Country) REFERENCES countries(CountryId)\n);\n\nCREATE TABLE model_list (\n  ModelId INTEGER PRIMARY KEY,\n  Maker INTEGER,\n  Model TEXT UNIQUE,\n  FOREIGN KEY (Maker) REFERENCES car_makers (Id)\n);\n\nCREATE TABLE car_names (\n  MakeId INTEGER PRIMARY KEY,\n  Model TEXT,\n  Make TEXT,\n  FOREIGN KEY (Model) REFERENCES model_list (Model)\n);\nCREATE TABLE cars_data (\n  Id INTEGER PRIMARY KEY,\n  MPG TEXT,\n  Cylinders INTEGER,\n  Edispl REAL,\n  Horsepower TEXT,\n  Weight INTEGER,\n  Accelerate REAL,\n  Year INTEGER,\n  FOREIGN KEY (Id) REFERENCES car_names (MakeId)\n);\n\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo';","prompt":"What is the average edispl for all volvos?"}
{"context":"CREATE TABLE continents (\n  ContId INTEGER PRIMARY KEY,\n  Continent TEXT\n);\nCREATE TABLE countries (\n  CountryId INTEGER PRIMARY KEY,\n  CountryName TEXT,\n  Continent INTEGER,\n  FOREIGN KEY (Continent) REFERENCES continents(ContId)\n);\n\nCREATE TABLE car_makers (\n  Id INTEGER PRIMARY KEY,\n  Maker TEXT,\n  FullName TEXT,\n  Country TEXT,\n  FOREIGN KEY (Country) REFERENCES countries(CountryId)\n);\n\nCREATE TABLE model_list (\n  ModelId INTEGER PRIMARY KEY,\n  Maker INTEGER,\n  Model TEXT UNIQUE,\n  FOREIGN KEY (Maker) REFERENCES car_makers (Id)\n);\n\nCREATE TABLE car_names (\n  MakeId INTEGER PRIMARY KEY,\n  Model TEXT,\n  Make TEXT,\n  FOREIGN KEY (Model) REFERENCES model_list (Model)\n);\nCREATE TABLE cars_data (\n  Id INTEGER PRIMARY KEY,\n  MPG TEXT,\n  Cylinders INTEGER,\n  Edispl REAL,\n  Horsepower TEXT,\n  Weight INTEGER,\n  Accelerate REAL,\n  Year INTEGER,\n  FOREIGN KEY (Id) REFERENCES car_names (MakeId)\n);\n\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders;","prompt":"What is the maximum accelerate for different number of cylinders?"}
{"context":"CREATE TABLE continents (\n  ContId INTEGER PRIMARY KEY,\n  Continent TEXT\n);\nCREATE TABLE countries (\n  CountryId INTEGER PRIMARY KEY,\n  CountryName TEXT,\n  Continent INTEGER,\n  FOREIGN KEY (Continent) REFERENCES continents(ContId)\n);\n\nCREATE TABLE car_makers (\n  Id INTEGER PRIMARY KEY,\n  Maker TEXT,\n  FullName TEXT,\n  Country TEXT,\n  FOREIGN KEY (Country) REFERENCES countries(CountryId)\n);\n\nCREATE TABLE model_list (\n  ModelId INTEGER PRIMARY KEY,\n  Maker INTEGER,\n  Model TEXT UNIQUE,\n  FOREIGN KEY (Maker) REFERENCES car_makers (Id)\n);\n\nCREATE TABLE car_names (\n  MakeId INTEGER PRIMARY KEY,\n  Model TEXT,\n  Make TEXT,\n  FOREIGN KEY (Model) REFERENCES model_list (Model)\n);\nCREATE TABLE cars_data (\n  Id INTEGER PRIMARY KEY,\n  MPG TEXT,\n  Cylinders INTEGER,\n  Edispl REAL,\n  Horsepower TEXT,\n  Weight INTEGER,\n  Accelerate REAL,\n  Year INTEGER,\n  FOREIGN KEY (Id) REFERENCES car_names (MakeId)\n);\n\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders;","prompt":"What is the maximum accelerate for all the different cylinders?"}
{"context":"CREATE TABLE continents (\n  ContId INTEGER PRIMARY KEY,\n  Continent TEXT\n);\nCREATE TABLE countries (\n  CountryId INTEGER PRIMARY KEY,\n  CountryName TEXT,\n  Continent INTEGER,\n  FOREIGN KEY (Continent) REFERENCES continents(ContId)\n);\n\nCREATE TABLE car_makers (\n  Id INTEGER PRIMARY KEY,\n  Maker TEXT,\n  FullName TEXT,\n  Country TEXT,\n  FOREIGN KEY (Country) REFERENCES countries(CountryId)\n);\n\nCREATE TABLE model_list (\n  ModelId INTEGER PRIMARY KEY,\n  Maker INTEGER,\n  Model TEXT UNIQUE,\n  FOREIGN KEY (Maker) REFERENCES car_makers (Id)\n);\n\nCREATE TABLE car_names (\n  MakeId INTEGER PRIMARY KEY,\n  Model TEXT,\n  Make TEXT,\n  FOREIGN KEY (Model) REFERENCES model_list (Model)\n);\nCREATE TABLE cars_data (\n  Id INTEGER PRIMARY KEY,\n  MPG TEXT,\n  Cylinders INTEGER,\n  Edispl REAL,\n  Horsepower TEXT,\n  Weight INTEGER,\n  Accelerate REAL,\n  Year INTEGER,\n  FOREIGN KEY (Id) REFERENCES car_names (MakeId)\n);\n\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;","prompt":"Which model has the most version(make) of cars?"}
{"context":"CREATE TABLE continents (\n  ContId INTEGER PRIMARY KEY,\n  Continent TEXT\n);\nCREATE TABLE countries (\n  CountryId INTEGER PRIMARY KEY,\n  CountryName TEXT,\n  Continent INTEGER,\n  FOREIGN KEY (Continent) REFERENCES continents(ContId)\n);\n\nCREATE TABLE car_makers (\n  Id INTEGER PRIMARY KEY,\n  Maker TEXT,\n  FullName TEXT,\n  Country TEXT,\n  FOREIGN KEY (Country) REFERENCES countries(CountryId)\n);\n\nCREATE TABLE model_list (\n  ModelId INTEGER PRIMARY KEY,\n  Maker INTEGER,\n  Model TEXT UNIQUE,\n  FOREIGN KEY (Maker) REFERENCES car_makers (Id)\n);\n\nCREATE TABLE car_names (\n  MakeId INTEGER PRIMARY KEY,\n  Model TEXT,\n  Make TEXT,\n  FOREIGN KEY (Model) REFERENCES model_list (Model)\n);\nCREATE TABLE cars_data (\n  Id INTEGER PRIMARY KEY,\n  MPG TEXT,\n  Cylinders INTEGER,\n  Edispl REAL,\n  Horsepower TEXT,\n  Weight INTEGER,\n  Accelerate REAL,\n  Year INTEGER,\n  FOREIGN KEY (Id) REFERENCES car_names (MakeId)\n);\n\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;","prompt":"What model has the most different versions?"}
{"context":"CREATE TABLE continents (\n  ContId INTEGER PRIMARY KEY,\n  Continent TEXT\n);\nCREATE TABLE countries (\n  CountryId INTEGER PRIMARY KEY,\n  CountryName TEXT,\n  Continent INTEGER,\n  FOREIGN KEY (Continent) REFERENCES continents(ContId)\n);\n\nCREATE TABLE car_makers (\n  Id INTEGER PRIMARY KEY,\n  Maker TEXT,\n  FullName TEXT,\n  Country TEXT,\n  FOREIGN KEY (Country) REFERENCES countries(CountryId)\n);\n\nCREATE TABLE model_list (\n  ModelId INTEGER PRIMARY KEY,\n  Maker INTEGER,\n  Model TEXT UNIQUE,\n  FOREIGN KEY (Maker) REFERENCES car_makers (Id)\n);\n\nCREATE TABLE car_names (\n  MakeId INTEGER PRIMARY KEY,\n  Model TEXT,\n  Make TEXT,\n  FOREIGN KEY (Model) REFERENCES model_list (Model)\n);\nCREATE TABLE cars_data (\n  Id INTEGER PRIMARY KEY,\n  MPG TEXT,\n  Cylinders INTEGER,\n  Edispl REAL,\n  Horsepower TEXT,\n  Weight INTEGER,\n  Accelerate REAL,\n  Year INTEGER,\n  FOREIGN KEY (Id) REFERENCES car_names (MakeId)\n);\n\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4;","prompt":"How many cars have more than 4 cylinders?"}
{"context":"CREATE TABLE continents (\n  ContId INTEGER PRIMARY KEY,\n  Continent TEXT\n);\nCREATE TABLE countries (\n  CountryId INTEGER PRIMARY KEY,\n  CountryName TEXT,\n  Continent INTEGER,\n  FOREIGN KEY (Continent) REFERENCES continents(ContId)\n);\n\nCREATE TABLE car_makers (\n  Id INTEGER PRIMARY KEY,\n  Maker TEXT,\n  FullName TEXT,\n  Country TEXT,\n  FOREIGN KEY (Country) REFERENCES countries(CountryId)\n);\n\nCREATE TABLE model_list (\n  ModelId INTEGER PRIMARY KEY,\n  Maker INTEGER,\n  Model TEXT UNIQUE,\n  FOREIGN KEY (Maker) REFERENCES car_makers (Id)\n);\n\nCREATE TABLE car_names (\n  MakeId INTEGER PRIMARY KEY,\n  Model TEXT,\n  Make TEXT,\n  FOREIGN KEY (Model) REFERENCES model_list (Model)\n);\nCREATE TABLE cars_data (\n  Id INTEGER PRIMARY KEY,\n  MPG TEXT,\n  Cylinders INTEGER,\n  Edispl REAL,\n  Horsepower TEXT,\n  Weight INTEGER,\n  Accelerate REAL,\n  Year INTEGER,\n  FOREIGN KEY (Id) REFERENCES car_names (MakeId)\n);\n\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4;","prompt":"What is the number of cars with more than 4 cylinders?"}
{"context":"CREATE TABLE continents (\n  ContId INTEGER PRIMARY KEY,\n  Continent TEXT\n);\nCREATE TABLE countries (\n  CountryId INTEGER PRIMARY KEY,\n  CountryName TEXT,\n  Continent INTEGER,\n  FOREIGN KEY (Continent) REFERENCES continents(ContId)\n);\n\nCREATE TABLE car_makers (\n  Id INTEGER PRIMARY KEY,\n  Maker TEXT,\n  FullName TEXT,\n  Country TEXT,\n  FOREIGN KEY (Country) REFERENCES countries(CountryId)\n);\n\nCREATE TABLE model_list (\n  ModelId INTEGER PRIMARY KEY,\n  Maker INTEGER,\n  Model TEXT UNIQUE,\n  FOREIGN KEY (Maker) REFERENCES car_makers (Id)\n);\n\nCREATE TABLE car_names (\n  MakeId INTEGER PRIMARY KEY,\n  Model TEXT,\n  Make TEXT,\n  FOREIGN KEY (Model) REFERENCES model_list (Model)\n);\nCREATE TABLE cars_data (\n  Id INTEGER PRIMARY KEY,\n  MPG TEXT,\n  Cylinders INTEGER,\n  Edispl REAL,\n  Horsepower TEXT,\n  Weight INTEGER,\n  Accelerate REAL,\n  Year INTEGER,\n  FOREIGN KEY (Id) REFERENCES car_names (MakeId)\n);\n\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980;","prompt":"how many cars were produced in 1980?"}
{"context":"CREATE TABLE continents (\n  ContId INTEGER PRIMARY KEY,\n  Continent TEXT\n);\nCREATE TABLE countries (\n  CountryId INTEGER PRIMARY KEY,\n  CountryName TEXT,\n  Continent INTEGER,\n  FOREIGN KEY (Continent) REFERENCES continents(ContId)\n);\n\nCREATE TABLE car_makers (\n  Id INTEGER PRIMARY KEY,\n  Maker TEXT,\n  FullName TEXT,\n  Country TEXT,\n  FOREIGN KEY (Country) REFERENCES countries(CountryId)\n);\n\nCREATE TABLE model_list (\n  ModelId INTEGER PRIMARY KEY,\n  Maker INTEGER,\n  Model TEXT UNIQUE,\n  FOREIGN KEY (Maker) REFERENCES car_makers (Id)\n);\n\nCREATE TABLE car_names (\n  MakeId INTEGER PRIMARY KEY,\n  Model TEXT,\n  Make TEXT,\n  FOREIGN KEY (Model) REFERENCES model_list (Model)\n);\nCREATE TABLE cars_data (\n  Id INTEGER PRIMARY KEY,\n  MPG TEXT,\n  Cylinders INTEGER,\n  Edispl REAL,\n  Horsepower TEXT,\n  Weight INTEGER,\n  Accelerate REAL,\n  Year INTEGER,\n  FOREIGN KEY (Id) REFERENCES car_names (MakeId)\n);\n\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980;","prompt":"In 1980, how many cars were made?"}
{"context":"CREATE TABLE continents (\n  ContId INTEGER PRIMARY KEY,\n  Continent TEXT\n);\nCREATE TABLE countries (\n  CountryId INTEGER PRIMARY KEY,\n  CountryName TEXT,\n  Continent INTEGER,\n  FOREIGN KEY (Continent) REFERENCES continents(ContId)\n);\n\nCREATE TABLE car_makers (\n  Id INTEGER PRIMARY KEY,\n  Maker TEXT,\n  FullName TEXT,\n  Country TEXT,\n  FOREIGN KEY (Country) REFERENCES countries(CountryId)\n);\n\nCREATE TABLE model_list (\n  ModelId INTEGER PRIMARY KEY,\n  Maker INTEGER,\n  Model TEXT UNIQUE,\n  FOREIGN KEY (Maker) REFERENCES car_makers (Id)\n);\n\nCREATE TABLE car_names (\n  MakeId INTEGER PRIMARY KEY,\n  Model TEXT,\n  Make TEXT,\n  FOREIGN KEY (Model) REFERENCES model_list (Model)\n);\nCREATE TABLE cars_data (\n  Id INTEGER PRIMARY KEY,\n  MPG TEXT,\n  Cylinders INTEGER,\n  Edispl REAL,\n  Horsepower TEXT,\n  Weight INTEGER,\n  Accelerate REAL,\n  Year INTEGER,\n  FOREIGN KEY (Id) REFERENCES car_names (MakeId)\n);\n\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company';","prompt":"How many car models were produced by the maker with full name American Motor Company?"}
{"context":"CREATE TABLE continents (\n  ContId INTEGER PRIMARY KEY,\n  Continent TEXT\n);\nCREATE TABLE countries (\n  CountryId INTEGER PRIMARY KEY,\n  CountryName TEXT,\n  Continent INTEGER,\n  FOREIGN KEY (Continent) REFERENCES continents(ContId)\n);\n\nCREATE TABLE car_makers (\n  Id INTEGER PRIMARY KEY,\n  Maker TEXT,\n  FullName TEXT,\n  Country TEXT,\n  FOREIGN KEY (Country) REFERENCES countries(CountryId)\n);\n\nCREATE TABLE model_list (\n  ModelId INTEGER PRIMARY KEY,\n  Maker INTEGER,\n  Model TEXT UNIQUE,\n  FOREIGN KEY (Maker) REFERENCES car_makers (Id)\n);\n\nCREATE TABLE car_names (\n  MakeId INTEGER PRIMARY KEY,\n  Model TEXT,\n  Make TEXT,\n  FOREIGN KEY (Model) REFERENCES model_list (Model)\n);\nCREATE TABLE cars_data (\n  Id INTEGER PRIMARY KEY,\n  MPG TEXT,\n  Cylinders INTEGER,\n  Edispl REAL,\n  Horsepower TEXT,\n  Weight INTEGER,\n  Accelerate REAL,\n  Year INTEGER,\n  FOREIGN KEY (Id) REFERENCES car_names (MakeId)\n);\n\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company';","prompt":"What is the number of car models created by the car maker American Motor Company?"}
{"context":"CREATE TABLE continents (\n  ContId INTEGER PRIMARY KEY,\n  Continent TEXT\n);\nCREATE TABLE countries (\n  CountryId INTEGER PRIMARY KEY,\n  CountryName TEXT,\n  Continent INTEGER,\n  FOREIGN KEY (Continent) REFERENCES continents(ContId)\n);\n\nCREATE TABLE car_makers (\n  Id INTEGER PRIMARY KEY,\n  Maker TEXT,\n  FullName TEXT,\n  Country TEXT,\n  FOREIGN KEY (Country) REFERENCES countries(CountryId)\n);\n\nCREATE TABLE model_list (\n  ModelId INTEGER PRIMARY KEY,\n  Maker INTEGER,\n  Model TEXT UNIQUE,\n  FOREIGN KEY (Maker) REFERENCES car_makers (Id)\n);\n\nCREATE TABLE car_names (\n  MakeId INTEGER PRIMARY KEY,\n  Model TEXT,\n  Make TEXT,\n  FOREIGN KEY (Model) REFERENCES model_list (Model)\n);\nCREATE TABLE cars_data (\n  Id INTEGER PRIMARY KEY,\n  MPG TEXT,\n  Cylinders INTEGER,\n  Edispl REAL,\n  Horsepower TEXT,\n  Weight INTEGER,\n  Accelerate REAL,\n  Year INTEGER,\n  FOREIGN KEY (Id) REFERENCES car_names (MakeId)\n);\n\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3;","prompt":"Which makers designed more than 3 car models? List full name and the id."}
{"context":"CREATE TABLE continents (\n  ContId INTEGER PRIMARY KEY,\n  Continent TEXT\n);\nCREATE TABLE countries (\n  CountryId INTEGER PRIMARY KEY,\n  CountryName TEXT,\n  Continent INTEGER,\n  FOREIGN KEY (Continent) REFERENCES continents(ContId)\n);\n\nCREATE TABLE car_makers (\n  Id INTEGER PRIMARY KEY,\n  Maker TEXT,\n  FullName TEXT,\n  Country TEXT,\n  FOREIGN KEY (Country) REFERENCES countries(CountryId)\n);\n\nCREATE TABLE model_list (\n  ModelId INTEGER PRIMARY KEY,\n  Maker INTEGER,\n  Model TEXT UNIQUE,\n  FOREIGN KEY (Maker) REFERENCES car_makers (Id)\n);\n\nCREATE TABLE car_names (\n  MakeId INTEGER PRIMARY KEY,\n  Model TEXT,\n  Make TEXT,\n  FOREIGN KEY (Model) REFERENCES model_list (Model)\n);\nCREATE TABLE cars_data (\n  Id INTEGER PRIMARY KEY,\n  MPG TEXT,\n  Cylinders INTEGER,\n  Edispl REAL,\n  Horsepower TEXT,\n  Weight INTEGER,\n  Accelerate REAL,\n  Year INTEGER,\n  FOREIGN KEY (Id) REFERENCES car_names (MakeId)\n);\n\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3;","prompt":"What are the names and ids of all makers with more than 3 models?"}
{"context":"CREATE TABLE continents (\n  ContId INTEGER PRIMARY KEY,\n  Continent TEXT\n);\nCREATE TABLE countries (\n  CountryId INTEGER PRIMARY KEY,\n  CountryName TEXT,\n  Continent INTEGER,\n  FOREIGN KEY (Continent) REFERENCES continents(ContId)\n);\n\nCREATE TABLE car_makers (\n  Id INTEGER PRIMARY KEY,\n  Maker TEXT,\n  FullName TEXT,\n  Country TEXT,\n  FOREIGN KEY (Country) REFERENCES countries(CountryId)\n);\n\nCREATE TABLE model_list (\n  ModelId INTEGER PRIMARY KEY,\n  Maker INTEGER,\n  Model TEXT UNIQUE,\n  FOREIGN KEY (Maker) REFERENCES car_makers (Id)\n);\n\nCREATE TABLE car_names (\n  MakeId INTEGER PRIMARY KEY,\n  Model TEXT,\n  Make TEXT,\n  FOREIGN KEY (Model) REFERENCES model_list (Model)\n);\nCREATE TABLE cars_data (\n  Id INTEGER PRIMARY KEY,\n  MPG TEXT,\n  Cylinders INTEGER,\n  Edispl REAL,\n  Horsepower TEXT,\n  Weight INTEGER,\n  Accelerate REAL,\n  Year INTEGER,\n  FOREIGN KEY (Id) REFERENCES car_names (MakeId)\n);\n\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;","prompt":"Which distinctive models are produced by maker with the full name General Motors or weighing more than 3500?"}
{"context":"CREATE TABLE continents (\n  ContId INTEGER PRIMARY KEY,\n  Continent TEXT\n);\nCREATE TABLE countries (\n  CountryId INTEGER PRIMARY KEY,\n  CountryName TEXT,\n  Continent INTEGER,\n  FOREIGN KEY (Continent) REFERENCES continents(ContId)\n);\n\nCREATE TABLE car_makers (\n  Id INTEGER PRIMARY KEY,\n  Maker TEXT,\n  FullName TEXT,\n  Country TEXT,\n  FOREIGN KEY (Country) REFERENCES countries(CountryId)\n);\n\nCREATE TABLE model_list (\n  ModelId INTEGER PRIMARY KEY,\n  Maker INTEGER,\n  Model TEXT UNIQUE,\n  FOREIGN KEY (Maker) REFERENCES car_makers (Id)\n);\n\nCREATE TABLE car_names (\n  MakeId INTEGER PRIMARY KEY,\n  Model TEXT,\n  Make TEXT,\n  FOREIGN KEY (Model) REFERENCES model_list (Model)\n);\nCREATE TABLE cars_data (\n  Id INTEGER PRIMARY KEY,\n  MPG TEXT,\n  Cylinders INTEGER,\n  Edispl REAL,\n  Horsepower TEXT,\n  Weight INTEGER,\n  Accelerate REAL,\n  Year INTEGER,\n  FOREIGN KEY (Id) REFERENCES car_names (MakeId)\n);\n\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;","prompt":"What are the different models created by either the car maker General Motors or weighed more than 3500?"}
{"context":"CREATE TABLE continents (\n  ContId INTEGER PRIMARY KEY,\n  Continent TEXT\n);\nCREATE TABLE countries (\n  CountryId INTEGER PRIMARY KEY,\n  CountryName TEXT,\n  Continent INTEGER,\n  FOREIGN KEY (Continent) REFERENCES continents(ContId)\n);\n\nCREATE TABLE car_makers (\n  Id INTEGER PRIMARY KEY,\n  Maker TEXT,\n  FullName TEXT,\n  Country TEXT,\n  FOREIGN KEY (Country) REFERENCES countries(CountryId)\n);\n\nCREATE TABLE model_list (\n  ModelId INTEGER PRIMARY KEY,\n  Maker INTEGER,\n  Model TEXT UNIQUE,\n  FOREIGN KEY (Maker) REFERENCES car_makers (Id)\n);\n\nCREATE TABLE car_names (\n  MakeId INTEGER PRIMARY KEY,\n  Model TEXT,\n  Make TEXT,\n  FOREIGN KEY (Model) REFERENCES model_list (Model)\n);\nCREATE TABLE cars_data (\n  Id INTEGER PRIMARY KEY,\n  MPG TEXT,\n  Cylinders INTEGER,\n  Edispl REAL,\n  Horsepower TEXT,\n  Weight INTEGER,\n  Accelerate REAL,\n  Year INTEGER,\n  FOREIGN KEY (Id) REFERENCES car_names (MakeId)\n);\n\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"select distinct year from cars_data where weight between 3000 and 4000;","prompt":"In which years cars were produced weighing no less than 3000 and no more than 4000 ?"}
{"context":"CREATE TABLE continents (\n  ContId INTEGER PRIMARY KEY,\n  Continent TEXT\n);\nCREATE TABLE countries (\n  CountryId INTEGER PRIMARY KEY,\n  CountryName TEXT,\n  Continent INTEGER,\n  FOREIGN KEY (Continent) REFERENCES continents(ContId)\n);\n\nCREATE TABLE car_makers (\n  Id INTEGER PRIMARY KEY,\n  Maker TEXT,\n  FullName TEXT,\n  Country TEXT,\n  FOREIGN KEY (Country) REFERENCES countries(CountryId)\n);\n\nCREATE TABLE model_list (\n  ModelId INTEGER PRIMARY KEY,\n  Maker INTEGER,\n  Model TEXT UNIQUE,\n  FOREIGN KEY (Maker) REFERENCES car_makers (Id)\n);\n\nCREATE TABLE car_names (\n  MakeId INTEGER PRIMARY KEY,\n  Model TEXT,\n  Make TEXT,\n  FOREIGN KEY (Model) REFERENCES model_list (Model)\n);\nCREATE TABLE cars_data (\n  Id INTEGER PRIMARY KEY,\n  MPG TEXT,\n  Cylinders INTEGER,\n  Edispl REAL,\n  Horsepower TEXT,\n  Weight INTEGER,\n  Accelerate REAL,\n  Year INTEGER,\n  FOREIGN KEY (Id) REFERENCES car_names (MakeId)\n);\n\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"select distinct year from cars_data where weight between 3000 and 4000;","prompt":"What are the different years in which there were cars produced that weighed less than 4000 and also cars that weighted more than 3000 ?"}
{"context":"CREATE TABLE continents (\n  ContId INTEGER PRIMARY KEY,\n  Continent TEXT\n);\nCREATE TABLE countries (\n  CountryId INTEGER PRIMARY KEY,\n  CountryName TEXT,\n  Continent INTEGER,\n  FOREIGN KEY (Continent) REFERENCES continents(ContId)\n);\n\nCREATE TABLE car_makers (\n  Id INTEGER PRIMARY KEY,\n  Maker TEXT,\n  FullName TEXT,\n  Country TEXT,\n  FOREIGN KEY (Country) REFERENCES countries(CountryId)\n);\n\nCREATE TABLE model_list (\n  ModelId INTEGER PRIMARY KEY,\n  Maker INTEGER,\n  Model TEXT UNIQUE,\n  FOREIGN KEY (Maker) REFERENCES car_makers (Id)\n);\n\nCREATE TABLE car_names (\n  MakeId INTEGER PRIMARY KEY,\n  Model TEXT,\n  Make TEXT,\n  FOREIGN KEY (Model) REFERENCES model_list (Model)\n);\nCREATE TABLE cars_data (\n  Id INTEGER PRIMARY KEY,\n  MPG TEXT,\n  Cylinders INTEGER,\n  Edispl REAL,\n  Horsepower TEXT,\n  Weight INTEGER,\n  Accelerate REAL,\n  Year INTEGER,\n  FOREIGN KEY (Id) REFERENCES car_names (MakeId)\n);\n\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1;","prompt":"What is the horsepower of the car with the largest accelerate?"}
{"context":"CREATE TABLE continents (\n  ContId INTEGER PRIMARY KEY,\n  Continent TEXT\n);\nCREATE TABLE countries (\n  CountryId INTEGER PRIMARY KEY,\n  CountryName TEXT,\n  Continent INTEGER,\n  FOREIGN KEY (Continent) REFERENCES continents(ContId)\n);\n\nCREATE TABLE car_makers (\n  Id INTEGER PRIMARY KEY,\n  Maker TEXT,\n  FullName TEXT,\n  Country TEXT,\n  FOREIGN KEY (Country) REFERENCES countries(CountryId)\n);\n\nCREATE TABLE model_list (\n  ModelId INTEGER PRIMARY KEY,\n  Maker INTEGER,\n  Model TEXT UNIQUE,\n  FOREIGN KEY (Maker) REFERENCES car_makers (Id)\n);\n\nCREATE TABLE car_names (\n  MakeId INTEGER PRIMARY KEY,\n  Model TEXT,\n  Make TEXT,\n  FOREIGN KEY (Model) REFERENCES model_list (Model)\n);\nCREATE TABLE cars_data (\n  Id INTEGER PRIMARY KEY,\n  MPG TEXT,\n  Cylinders INTEGER,\n  Edispl REAL,\n  Horsepower TEXT,\n  Weight INTEGER,\n  Accelerate REAL,\n  Year INTEGER,\n  FOREIGN KEY (Id) REFERENCES car_names (MakeId)\n);\n\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1;","prompt":"What is the horsepower of the car with the greatest accelerate?"}
{"context":"CREATE TABLE continents (\n  ContId INTEGER PRIMARY KEY,\n  Continent TEXT\n);\nCREATE TABLE countries (\n  CountryId INTEGER PRIMARY KEY,\n  CountryName TEXT,\n  Continent INTEGER,\n  FOREIGN KEY (Continent) REFERENCES continents(ContId)\n);\n\nCREATE TABLE car_makers (\n  Id INTEGER PRIMARY KEY,\n  Maker TEXT,\n  FullName TEXT,\n  Country TEXT,\n  FOREIGN KEY (Country) REFERENCES countries(CountryId)\n);\n\nCREATE TABLE model_list (\n  ModelId INTEGER PRIMARY KEY,\n  Maker INTEGER,\n  Model TEXT UNIQUE,\n  FOREIGN KEY (Maker) REFERENCES car_makers (Id)\n);\n\nCREATE TABLE car_names (\n  MakeId INTEGER PRIMARY KEY,\n  Model TEXT,\n  Make TEXT,\n  FOREIGN KEY (Model) REFERENCES model_list (Model)\n);\nCREATE TABLE cars_data (\n  Id INTEGER PRIMARY KEY,\n  MPG TEXT,\n  Cylinders INTEGER,\n  Edispl REAL,\n  Horsepower TEXT,\n  Weight INTEGER,\n  Accelerate REAL,\n  Year INTEGER,\n  FOREIGN KEY (Id) REFERENCES car_names (MakeId)\n);\n\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;","prompt":"For model volvo, how many cylinders does the car with the least accelerate have?"}
{"context":"CREATE TABLE continents (\n  ContId INTEGER PRIMARY KEY,\n  Continent TEXT\n);\nCREATE TABLE countries (\n  CountryId INTEGER PRIMARY KEY,\n  CountryName TEXT,\n  Continent INTEGER,\n  FOREIGN KEY (Continent) REFERENCES continents(ContId)\n);\n\nCREATE TABLE car_makers (\n  Id INTEGER PRIMARY KEY,\n  Maker TEXT,\n  FullName TEXT,\n  Country TEXT,\n  FOREIGN KEY (Country) REFERENCES countries(CountryId)\n);\n\nCREATE TABLE model_list (\n  ModelId INTEGER PRIMARY KEY,\n  Maker INTEGER,\n  Model TEXT UNIQUE,\n  FOREIGN KEY (Maker) REFERENCES car_makers (Id)\n);\n\nCREATE TABLE car_names (\n  MakeId INTEGER PRIMARY KEY,\n  Model TEXT,\n  Make TEXT,\n  FOREIGN KEY (Model) REFERENCES model_list (Model)\n);\nCREATE TABLE cars_data (\n  Id INTEGER PRIMARY KEY,\n  MPG TEXT,\n  Cylinders INTEGER,\n  Edispl REAL,\n  Horsepower TEXT,\n  Weight INTEGER,\n  Accelerate REAL,\n  Year INTEGER,\n  FOREIGN KEY (Id) REFERENCES car_names (MakeId)\n);\n\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;","prompt":"For a volvo model, how many cylinders does the version with least accelerate have?"}
{"context":"CREATE TABLE continents (\n  ContId INTEGER PRIMARY KEY,\n  Continent TEXT\n);\nCREATE TABLE countries (\n  CountryId INTEGER PRIMARY KEY,\n  CountryName TEXT,\n  Continent INTEGER,\n  FOREIGN KEY (Continent) REFERENCES continents(ContId)\n);\n\nCREATE TABLE car_makers (\n  Id INTEGER PRIMARY KEY,\n  Maker TEXT,\n  FullName TEXT,\n  Country TEXT,\n  FOREIGN KEY (Country) REFERENCES countries(CountryId)\n);\n\nCREATE TABLE model_list (\n  ModelId INTEGER PRIMARY KEY,\n  Maker INTEGER,\n  Model TEXT UNIQUE,\n  FOREIGN KEY (Maker) REFERENCES car_makers (Id)\n);\n\nCREATE TABLE car_names (\n  MakeId INTEGER PRIMARY KEY,\n  Model TEXT,\n  Make TEXT,\n  FOREIGN KEY (Model) REFERENCES model_list (Model)\n);\nCREATE TABLE cars_data (\n  Id INTEGER PRIMARY KEY,\n  MPG TEXT,\n  Cylinders INTEGER,\n  Edispl REAL,\n  Horsepower TEXT,\n  Weight INTEGER,\n  Accelerate REAL,\n  Year INTEGER,\n  FOREIGN KEY (Id) REFERENCES car_names (MakeId)\n);\n\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );","prompt":"How many cars have a larger accelerate than the car with the largest horsepower?"}
{"context":"CREATE TABLE continents (\n  ContId INTEGER PRIMARY KEY,\n  Continent TEXT\n);\nCREATE TABLE countries (\n  CountryId INTEGER PRIMARY KEY,\n  CountryName TEXT,\n  Continent INTEGER,\n  FOREIGN KEY (Continent) REFERENCES continents(ContId)\n);\n\nCREATE TABLE car_makers (\n  Id INTEGER PRIMARY KEY,\n  Maker TEXT,\n  FullName TEXT,\n  Country TEXT,\n  FOREIGN KEY (Country) REFERENCES countries(CountryId)\n);\n\nCREATE TABLE model_list (\n  ModelId INTEGER PRIMARY KEY,\n  Maker INTEGER,\n  Model TEXT UNIQUE,\n  FOREIGN KEY (Maker) REFERENCES car_makers (Id)\n);\n\nCREATE TABLE car_names (\n  MakeId INTEGER PRIMARY KEY,\n  Model TEXT,\n  Make TEXT,\n  FOREIGN KEY (Model) REFERENCES model_list (Model)\n);\nCREATE TABLE cars_data (\n  Id INTEGER PRIMARY KEY,\n  MPG TEXT,\n  Cylinders INTEGER,\n  Edispl REAL,\n  Horsepower TEXT,\n  Weight INTEGER,\n  Accelerate REAL,\n  Year INTEGER,\n  FOREIGN KEY (Id) REFERENCES car_names (MakeId)\n);\n\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );","prompt":"What is the number of cars with a greater accelerate than the one with the most horsepower?"}
{"context":"CREATE TABLE continents (\n  ContId INTEGER PRIMARY KEY,\n  Continent TEXT\n);\nCREATE TABLE countries (\n  CountryId INTEGER PRIMARY KEY,\n  CountryName TEXT,\n  Continent INTEGER,\n  FOREIGN KEY (Continent) REFERENCES continents(ContId)\n);\n\nCREATE TABLE car_makers (\n  Id INTEGER PRIMARY KEY,\n  Maker TEXT,\n  FullName TEXT,\n  Country TEXT,\n  FOREIGN KEY (Country) REFERENCES countries(CountryId)\n);\n\nCREATE TABLE model_list (\n  ModelId INTEGER PRIMARY KEY,\n  Maker INTEGER,\n  Model TEXT UNIQUE,\n  FOREIGN KEY (Maker) REFERENCES car_makers (Id)\n);\n\nCREATE TABLE car_names (\n  MakeId INTEGER PRIMARY KEY,\n  Model TEXT,\n  Make TEXT,\n  FOREIGN KEY (Model) REFERENCES model_list (Model)\n);\nCREATE TABLE cars_data (\n  Id INTEGER PRIMARY KEY,\n  MPG TEXT,\n  Cylinders INTEGER,\n  Edispl REAL,\n  Horsepower TEXT,\n  Weight INTEGER,\n  Accelerate REAL,\n  Year INTEGER,\n  FOREIGN KEY (Id) REFERENCES car_names (MakeId)\n);\n\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2","prompt":"How many countries has more than 2 car makers ?"}
{"context":"CREATE TABLE continents (\n  ContId INTEGER PRIMARY KEY,\n  Continent TEXT\n);\nCREATE TABLE countries (\n  CountryId INTEGER PRIMARY KEY,\n  CountryName TEXT,\n  Continent INTEGER,\n  FOREIGN KEY (Continent) REFERENCES continents(ContId)\n);\n\nCREATE TABLE car_makers (\n  Id INTEGER PRIMARY KEY,\n  Maker TEXT,\n  FullName TEXT,\n  Country TEXT,\n  FOREIGN KEY (Country) REFERENCES countries(CountryId)\n);\n\nCREATE TABLE model_list (\n  ModelId INTEGER PRIMARY KEY,\n  Maker INTEGER,\n  Model TEXT UNIQUE,\n  FOREIGN KEY (Maker) REFERENCES car_makers (Id)\n);\n\nCREATE TABLE car_names (\n  MakeId INTEGER PRIMARY KEY,\n  Model TEXT,\n  Make TEXT,\n  FOREIGN KEY (Model) REFERENCES model_list (Model)\n);\nCREATE TABLE cars_data (\n  Id INTEGER PRIMARY KEY,\n  MPG TEXT,\n  Cylinders INTEGER,\n  Edispl REAL,\n  Horsepower TEXT,\n  Weight INTEGER,\n  Accelerate REAL,\n  Year INTEGER,\n  FOREIGN KEY (Id) REFERENCES car_names (MakeId)\n);\n\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2","prompt":"What is the number of countries with more than 2 car makers ?"}
{"context":"CREATE TABLE continents (\n  ContId INTEGER PRIMARY KEY,\n  Continent TEXT\n);\nCREATE TABLE countries (\n  CountryId INTEGER PRIMARY KEY,\n  CountryName TEXT,\n  Continent INTEGER,\n  FOREIGN KEY (Continent) REFERENCES continents(ContId)\n);\n\nCREATE TABLE car_makers (\n  Id INTEGER PRIMARY KEY,\n  Maker TEXT,\n  FullName TEXT,\n  Country TEXT,\n  FOREIGN KEY (Country) REFERENCES countries(CountryId)\n);\n\nCREATE TABLE model_list (\n  ModelId INTEGER PRIMARY KEY,\n  Maker INTEGER,\n  Model TEXT UNIQUE,\n  FOREIGN KEY (Maker) REFERENCES car_makers (Id)\n);\n\nCREATE TABLE car_names (\n  MakeId INTEGER PRIMARY KEY,\n  Model TEXT,\n  Make TEXT,\n  FOREIGN KEY (Model) REFERENCES model_list (Model)\n);\nCREATE TABLE cars_data (\n  Id INTEGER PRIMARY KEY,\n  MPG TEXT,\n  Cylinders INTEGER,\n  Edispl REAL,\n  Horsepower TEXT,\n  Weight INTEGER,\n  Accelerate REAL,\n  Year INTEGER,\n  FOREIGN KEY (Id) REFERENCES car_names (MakeId)\n);\n\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6;","prompt":"How many cars has over 6 cylinders?"}
{"context":"CREATE TABLE continents (\n  ContId INTEGER PRIMARY KEY,\n  Continent TEXT\n);\nCREATE TABLE countries (\n  CountryId INTEGER PRIMARY KEY,\n  CountryName TEXT,\n  Continent INTEGER,\n  FOREIGN KEY (Continent) REFERENCES continents(ContId)\n);\n\nCREATE TABLE car_makers (\n  Id INTEGER PRIMARY KEY,\n  Maker TEXT,\n  FullName TEXT,\n  Country TEXT,\n  FOREIGN KEY (Country) REFERENCES countries(CountryId)\n);\n\nCREATE TABLE model_list (\n  ModelId INTEGER PRIMARY KEY,\n  Maker INTEGER,\n  Model TEXT UNIQUE,\n  FOREIGN KEY (Maker) REFERENCES car_makers (Id)\n);\n\nCREATE TABLE car_names (\n  MakeId INTEGER PRIMARY KEY,\n  Model TEXT,\n  Make TEXT,\n  FOREIGN KEY (Model) REFERENCES model_list (Model)\n);\nCREATE TABLE cars_data (\n  Id INTEGER PRIMARY KEY,\n  MPG TEXT,\n  Cylinders INTEGER,\n  Edispl REAL,\n  Horsepower TEXT,\n  Weight INTEGER,\n  Accelerate REAL,\n  Year INTEGER,\n  FOREIGN KEY (Id) REFERENCES car_names (MakeId)\n);\n\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6;","prompt":"What is the number of carsw ith over 6 cylinders?"}
{"context":"CREATE TABLE continents (\n  ContId INTEGER PRIMARY KEY,\n  Continent TEXT\n);\nCREATE TABLE countries (\n  CountryId INTEGER PRIMARY KEY,\n  CountryName TEXT,\n  Continent INTEGER,\n  FOREIGN KEY (Continent) REFERENCES continents(ContId)\n);\n\nCREATE TABLE car_makers (\n  Id INTEGER PRIMARY KEY,\n  Maker TEXT,\n  FullName TEXT,\n  Country TEXT,\n  FOREIGN KEY (Country) REFERENCES countries(CountryId)\n);\n\nCREATE TABLE model_list (\n  ModelId INTEGER PRIMARY KEY,\n  Maker INTEGER,\n  Model TEXT UNIQUE,\n  FOREIGN KEY (Maker) REFERENCES car_makers (Id)\n);\n\nCREATE TABLE car_names (\n  MakeId INTEGER PRIMARY KEY,\n  Model TEXT,\n  Make TEXT,\n  FOREIGN KEY (Model) REFERENCES model_list (Model)\n);\nCREATE TABLE cars_data (\n  Id INTEGER PRIMARY KEY,\n  MPG TEXT,\n  Cylinders INTEGER,\n  Edispl REAL,\n  Horsepower TEXT,\n  Weight INTEGER,\n  Accelerate REAL,\n  Year INTEGER,\n  FOREIGN KEY (Id) REFERENCES car_names (MakeId)\n);\n\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;","prompt":"For the cars with 4 cylinders, which model has the largest horsepower?"}
{"context":"CREATE TABLE continents (\n  ContId INTEGER PRIMARY KEY,\n  Continent TEXT\n);\nCREATE TABLE countries (\n  CountryId INTEGER PRIMARY KEY,\n  CountryName TEXT,\n  Continent INTEGER,\n  FOREIGN KEY (Continent) REFERENCES continents(ContId)\n);\n\nCREATE TABLE car_makers (\n  Id INTEGER PRIMARY KEY,\n  Maker TEXT,\n  FullName TEXT,\n  Country TEXT,\n  FOREIGN KEY (Country) REFERENCES countries(CountryId)\n);\n\nCREATE TABLE model_list (\n  ModelId INTEGER PRIMARY KEY,\n  Maker INTEGER,\n  Model TEXT UNIQUE,\n  FOREIGN KEY (Maker) REFERENCES car_makers (Id)\n);\n\nCREATE TABLE car_names (\n  MakeId INTEGER PRIMARY KEY,\n  Model TEXT,\n  Make TEXT,\n  FOREIGN KEY (Model) REFERENCES model_list (Model)\n);\nCREATE TABLE cars_data (\n  Id INTEGER PRIMARY KEY,\n  MPG TEXT,\n  Cylinders INTEGER,\n  Edispl REAL,\n  Horsepower TEXT,\n  Weight INTEGER,\n  Accelerate REAL,\n  Year INTEGER,\n  FOREIGN KEY (Id) REFERENCES car_names (MakeId)\n);\n\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;","prompt":"For all of the 4 cylinder cars, which model has the most horsepower?"}
{"context":"CREATE TABLE continents (\n  ContId INTEGER PRIMARY KEY,\n  Continent TEXT\n);\nCREATE TABLE countries (\n  CountryId INTEGER PRIMARY KEY,\n  CountryName TEXT,\n  Continent INTEGER,\n  FOREIGN KEY (Continent) REFERENCES continents(ContId)\n);\n\nCREATE TABLE car_makers (\n  Id INTEGER PRIMARY KEY,\n  Maker TEXT,\n  FullName TEXT,\n  Country TEXT,\n  FOREIGN KEY (Country) REFERENCES countries(CountryId)\n);\n\nCREATE TABLE model_list (\n  ModelId INTEGER PRIMARY KEY,\n  Maker INTEGER,\n  Model TEXT UNIQUE,\n  FOREIGN KEY (Maker) REFERENCES car_makers (Id)\n);\n\nCREATE TABLE car_names (\n  MakeId INTEGER PRIMARY KEY,\n  Model TEXT,\n  Make TEXT,\n  FOREIGN KEY (Model) REFERENCES model_list (Model)\n);\nCREATE TABLE cars_data (\n  Id INTEGER PRIMARY KEY,\n  MPG TEXT,\n  Cylinders INTEGER,\n  Edispl REAL,\n  Horsepower TEXT,\n  Weight INTEGER,\n  Accelerate REAL,\n  Year INTEGER,\n  FOREIGN KEY (Id) REFERENCES car_names (MakeId)\n);\n\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT T2.MakeId ,  T2.Make FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Horsepower  >  (SELECT min(Horsepower) FROM CARS_DATA) AND T1.Cylinders  <=  3;","prompt":"Among the cars with more than lowest horsepower, which ones do not have more than 3 cylinders? List the car makeid and make name."}
{"context":"CREATE TABLE continents (\n  ContId INTEGER PRIMARY KEY,\n  Continent TEXT\n);\nCREATE TABLE countries (\n  CountryId INTEGER PRIMARY KEY,\n  CountryName TEXT,\n  Continent INTEGER,\n  FOREIGN KEY (Continent) REFERENCES continents(ContId)\n);\n\nCREATE TABLE car_makers (\n  Id INTEGER PRIMARY KEY,\n  Maker TEXT,\n  FullName TEXT,\n  Country TEXT,\n  FOREIGN KEY (Country) REFERENCES countries(CountryId)\n);\n\nCREATE TABLE model_list (\n  ModelId INTEGER PRIMARY KEY,\n  Maker INTEGER,\n  Model TEXT UNIQUE,\n  FOREIGN KEY (Maker) REFERENCES car_makers (Id)\n);\n\nCREATE TABLE car_names (\n  MakeId INTEGER PRIMARY KEY,\n  Model TEXT,\n  Make TEXT,\n  FOREIGN KEY (Model) REFERENCES model_list (Model)\n);\nCREATE TABLE cars_data (\n  Id INTEGER PRIMARY KEY,\n  MPG TEXT,\n  Cylinders INTEGER,\n  Edispl REAL,\n  Horsepower TEXT,\n  Weight INTEGER,\n  Accelerate REAL,\n  Year INTEGER,\n  FOREIGN KEY (Id) REFERENCES car_names (MakeId)\n);\n\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"select t2.makeid ,  t2.make from cars_data as t1 join car_names as t2 on t1.id  =  t2.makeid where t1.horsepower  >  (select min(horsepower) from cars_data) and t1.cylinders  <  4;","prompt":"Among the cars that do not have the minimum horsepower , what are the make ids and names of all those with less than 4 cylinders ?"}
{"context":"CREATE TABLE continents (\n  ContId INTEGER PRIMARY KEY,\n  Continent TEXT\n);\nCREATE TABLE countries (\n  CountryId INTEGER PRIMARY KEY,\n  CountryName TEXT,\n  Continent INTEGER,\n  FOREIGN KEY (Continent) REFERENCES continents(ContId)\n);\n\nCREATE TABLE car_makers (\n  Id INTEGER PRIMARY KEY,\n  Maker TEXT,\n  FullName TEXT,\n  Country TEXT,\n  FOREIGN KEY (Country) REFERENCES countries(CountryId)\n);\n\nCREATE TABLE model_list (\n  ModelId INTEGER PRIMARY KEY,\n  Maker INTEGER,\n  Model TEXT UNIQUE,\n  FOREIGN KEY (Maker) REFERENCES car_makers (Id)\n);\n\nCREATE TABLE car_names (\n  MakeId INTEGER PRIMARY KEY,\n  Model TEXT,\n  Make TEXT,\n  FOREIGN KEY (Model) REFERENCES model_list (Model)\n);\nCREATE TABLE cars_data (\n  Id INTEGER PRIMARY KEY,\n  MPG TEXT,\n  Cylinders INTEGER,\n  Edispl REAL,\n  Horsepower TEXT,\n  Weight INTEGER,\n  Accelerate REAL,\n  Year INTEGER,\n  FOREIGN KEY (Id) REFERENCES car_names (MakeId)\n);\n\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"select max(mpg) from cars_data where cylinders  =  8 or year  <  1980","prompt":"What is the maximum miles per gallon of the car with 8 cylinders or produced before 1980 ?"}
{"context":"CREATE TABLE continents (\n  ContId INTEGER PRIMARY KEY,\n  Continent TEXT\n);\nCREATE TABLE countries (\n  CountryId INTEGER PRIMARY KEY,\n  CountryName TEXT,\n  Continent INTEGER,\n  FOREIGN KEY (Continent) REFERENCES continents(ContId)\n);\n\nCREATE TABLE car_makers (\n  Id INTEGER PRIMARY KEY,\n  Maker TEXT,\n  FullName TEXT,\n  Country TEXT,\n  FOREIGN KEY (Country) REFERENCES countries(CountryId)\n);\n\nCREATE TABLE model_list (\n  ModelId INTEGER PRIMARY KEY,\n  Maker INTEGER,\n  Model TEXT UNIQUE,\n  FOREIGN KEY (Maker) REFERENCES car_makers (Id)\n);\n\nCREATE TABLE car_names (\n  MakeId INTEGER PRIMARY KEY,\n  Model TEXT,\n  Make TEXT,\n  FOREIGN KEY (Model) REFERENCES model_list (Model)\n);\nCREATE TABLE cars_data (\n  Id INTEGER PRIMARY KEY,\n  MPG TEXT,\n  Cylinders INTEGER,\n  Edispl REAL,\n  Horsepower TEXT,\n  Weight INTEGER,\n  Accelerate REAL,\n  Year INTEGER,\n  FOREIGN KEY (Id) REFERENCES car_names (MakeId)\n);\n\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"select max(mpg) from cars_data where cylinders  =  8 or year  <  1980","prompt":"What is the maximum mpg of the cars that had 8 cylinders or that were produced before 1980 ?"}
{"context":"CREATE TABLE continents (\n  ContId INTEGER PRIMARY KEY,\n  Continent TEXT\n);\nCREATE TABLE countries (\n  CountryId INTEGER PRIMARY KEY,\n  CountryName TEXT,\n  Continent INTEGER,\n  FOREIGN KEY (Continent) REFERENCES continents(ContId)\n);\n\nCREATE TABLE car_makers (\n  Id INTEGER PRIMARY KEY,\n  Maker TEXT,\n  FullName TEXT,\n  Country TEXT,\n  FOREIGN KEY (Country) REFERENCES countries(CountryId)\n);\n\nCREATE TABLE model_list (\n  ModelId INTEGER PRIMARY KEY,\n  Maker INTEGER,\n  Model TEXT UNIQUE,\n  FOREIGN KEY (Maker) REFERENCES car_makers (Id)\n);\n\nCREATE TABLE car_names (\n  MakeId INTEGER PRIMARY KEY,\n  Model TEXT,\n  Make TEXT,\n  FOREIGN KEY (Model) REFERENCES model_list (Model)\n);\nCREATE TABLE cars_data (\n  Id INTEGER PRIMARY KEY,\n  MPG TEXT,\n  Cylinders INTEGER,\n  Edispl REAL,\n  Horsepower TEXT,\n  Weight INTEGER,\n  Accelerate REAL,\n  Year INTEGER,\n  FOREIGN KEY (Id) REFERENCES car_names (MakeId)\n);\n\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';","prompt":"Which models are lighter than 3500 but not built by the 'Ford Motor Company'?"}
{"context":"CREATE TABLE continents (\n  ContId INTEGER PRIMARY KEY,\n  Continent TEXT\n);\nCREATE TABLE countries (\n  CountryId INTEGER PRIMARY KEY,\n  CountryName TEXT,\n  Continent INTEGER,\n  FOREIGN KEY (Continent) REFERENCES continents(ContId)\n);\n\nCREATE TABLE car_makers (\n  Id INTEGER PRIMARY KEY,\n  Maker TEXT,\n  FullName TEXT,\n  Country TEXT,\n  FOREIGN KEY (Country) REFERENCES countries(CountryId)\n);\n\nCREATE TABLE model_list (\n  ModelId INTEGER PRIMARY KEY,\n  Maker INTEGER,\n  Model TEXT UNIQUE,\n  FOREIGN KEY (Maker) REFERENCES car_makers (Id)\n);\n\nCREATE TABLE car_names (\n  MakeId INTEGER PRIMARY KEY,\n  Model TEXT,\n  Make TEXT,\n  FOREIGN KEY (Model) REFERENCES model_list (Model)\n);\nCREATE TABLE cars_data (\n  Id INTEGER PRIMARY KEY,\n  MPG TEXT,\n  Cylinders INTEGER,\n  Edispl REAL,\n  Horsepower TEXT,\n  Weight INTEGER,\n  Accelerate REAL,\n  Year INTEGER,\n  FOREIGN KEY (Id) REFERENCES car_names (MakeId)\n);\n\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';","prompt":"What are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company?"}
{"context":"CREATE TABLE continents (\n  ContId INTEGER PRIMARY KEY,\n  Continent TEXT\n);\nCREATE TABLE countries (\n  CountryId INTEGER PRIMARY KEY,\n  CountryName TEXT,\n  Continent INTEGER,\n  FOREIGN KEY (Continent) REFERENCES continents(ContId)\n);\n\nCREATE TABLE car_makers (\n  Id INTEGER PRIMARY KEY,\n  Maker TEXT,\n  FullName TEXT,\n  Country TEXT,\n  FOREIGN KEY (Country) REFERENCES countries(CountryId)\n);\n\nCREATE TABLE model_list (\n  ModelId INTEGER PRIMARY KEY,\n  Maker INTEGER,\n  Model TEXT UNIQUE,\n  FOREIGN KEY (Maker) REFERENCES car_makers (Id)\n);\n\nCREATE TABLE car_names (\n  MakeId INTEGER PRIMARY KEY,\n  Model TEXT,\n  Make TEXT,\n  FOREIGN KEY (Model) REFERENCES model_list (Model)\n);\nCREATE TABLE cars_data (\n  Id INTEGER PRIMARY KEY,\n  MPG TEXT,\n  Cylinders INTEGER,\n  Edispl REAL,\n  Horsepower TEXT,\n  Weight INTEGER,\n  Accelerate REAL,\n  Year INTEGER,\n  FOREIGN KEY (Id) REFERENCES car_names (MakeId)\n);\n\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country;","prompt":"What are the name of the countries where there is not a single car maker?"}
{"context":"CREATE TABLE continents (\n  ContId INTEGER PRIMARY KEY,\n  Continent TEXT\n);\nCREATE TABLE countries (\n  CountryId INTEGER PRIMARY KEY,\n  CountryName TEXT,\n  Continent INTEGER,\n  FOREIGN KEY (Continent) REFERENCES continents(ContId)\n);\n\nCREATE TABLE car_makers (\n  Id INTEGER PRIMARY KEY,\n  Maker TEXT,\n  FullName TEXT,\n  Country TEXT,\n  FOREIGN KEY (Country) REFERENCES countries(CountryId)\n);\n\nCREATE TABLE model_list (\n  ModelId INTEGER PRIMARY KEY,\n  Maker INTEGER,\n  Model TEXT UNIQUE,\n  FOREIGN KEY (Maker) REFERENCES car_makers (Id)\n);\n\nCREATE TABLE car_names (\n  MakeId INTEGER PRIMARY KEY,\n  Model TEXT,\n  Make TEXT,\n  FOREIGN KEY (Model) REFERENCES model_list (Model)\n);\nCREATE TABLE cars_data (\n  Id INTEGER PRIMARY KEY,\n  MPG TEXT,\n  Cylinders INTEGER,\n  Edispl REAL,\n  Horsepower TEXT,\n  Weight INTEGER,\n  Accelerate REAL,\n  Year INTEGER,\n  FOREIGN KEY (Id) REFERENCES car_names (MakeId)\n);\n\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country;","prompt":"What are the names of the countries with no car makers?"}
{"context":"CREATE TABLE continents (\n  ContId INTEGER PRIMARY KEY,\n  Continent TEXT\n);\nCREATE TABLE countries (\n  CountryId INTEGER PRIMARY KEY,\n  CountryName TEXT,\n  Continent INTEGER,\n  FOREIGN KEY (Continent) REFERENCES continents(ContId)\n);\n\nCREATE TABLE car_makers (\n  Id INTEGER PRIMARY KEY,\n  Maker TEXT,\n  FullName TEXT,\n  Country TEXT,\n  FOREIGN KEY (Country) REFERENCES countries(CountryId)\n);\n\nCREATE TABLE model_list (\n  ModelId INTEGER PRIMARY KEY,\n  Maker INTEGER,\n  Model TEXT UNIQUE,\n  FOREIGN KEY (Maker) REFERENCES car_makers (Id)\n);\n\nCREATE TABLE car_names (\n  MakeId INTEGER PRIMARY KEY,\n  Model TEXT,\n  Make TEXT,\n  FOREIGN KEY (Model) REFERENCES model_list (Model)\n);\nCREATE TABLE cars_data (\n  Id INTEGER PRIMARY KEY,\n  MPG TEXT,\n  Cylinders INTEGER,\n  Edispl REAL,\n  Horsepower TEXT,\n  Weight INTEGER,\n  Accelerate REAL,\n  Year INTEGER,\n  FOREIGN KEY (Id) REFERENCES car_names (MakeId)\n);\n\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"select t1.id ,  t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker group by t1.id having count(*)  >=  2 intersect select t1.id ,  t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker join car_names as t3 on t2.model  =  t3.model group by t1.id having count(*)  >  3;","prompt":"Which are the car makers which produce at least 2 models and more than 3 car makers ? List the id and the maker ."}
{"context":"CREATE TABLE continents (\n  ContId INTEGER PRIMARY KEY,\n  Continent TEXT\n);\nCREATE TABLE countries (\n  CountryId INTEGER PRIMARY KEY,\n  CountryName TEXT,\n  Continent INTEGER,\n  FOREIGN KEY (Continent) REFERENCES continents(ContId)\n);\n\nCREATE TABLE car_makers (\n  Id INTEGER PRIMARY KEY,\n  Maker TEXT,\n  FullName TEXT,\n  Country TEXT,\n  FOREIGN KEY (Country) REFERENCES countries(CountryId)\n);\n\nCREATE TABLE model_list (\n  ModelId INTEGER PRIMARY KEY,\n  Maker INTEGER,\n  Model TEXT UNIQUE,\n  FOREIGN KEY (Maker) REFERENCES car_makers (Id)\n);\n\nCREATE TABLE car_names (\n  MakeId INTEGER PRIMARY KEY,\n  Model TEXT,\n  Make TEXT,\n  FOREIGN KEY (Model) REFERENCES model_list (Model)\n);\nCREATE TABLE cars_data (\n  Id INTEGER PRIMARY KEY,\n  MPG TEXT,\n  Cylinders INTEGER,\n  Edispl REAL,\n  Horsepower TEXT,\n  Weight INTEGER,\n  Accelerate REAL,\n  Year INTEGER,\n  FOREIGN KEY (Id) REFERENCES car_names (MakeId)\n);\n\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >=  2 INTERSECT SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model GROUP BY T1.Id HAVING count(*)  >  3;","prompt":"What are the ids and makers of all car makers that produce at least 2 models and make more than 3 cars?"}
{"context":"CREATE TABLE continents (\n  ContId INTEGER PRIMARY KEY,\n  Continent TEXT\n);\nCREATE TABLE countries (\n  CountryId INTEGER PRIMARY KEY,\n  CountryName TEXT,\n  Continent INTEGER,\n  FOREIGN KEY (Continent) REFERENCES continents(ContId)\n);\n\nCREATE TABLE car_makers (\n  Id INTEGER PRIMARY KEY,\n  Maker TEXT,\n  FullName TEXT,\n  Country TEXT,\n  FOREIGN KEY (Country) REFERENCES countries(CountryId)\n);\n\nCREATE TABLE model_list (\n  ModelId INTEGER PRIMARY KEY,\n  Maker INTEGER,\n  Model TEXT UNIQUE,\n  FOREIGN KEY (Maker) REFERENCES car_makers (Id)\n);\n\nCREATE TABLE car_names (\n  MakeId INTEGER PRIMARY KEY,\n  Model TEXT,\n  Make TEXT,\n  FOREIGN KEY (Model) REFERENCES model_list (Model)\n);\nCREATE TABLE cars_data (\n  Id INTEGER PRIMARY KEY,\n  MPG TEXT,\n  Cylinders INTEGER,\n  Edispl REAL,\n  Horsepower TEXT,\n  Weight INTEGER,\n  Accelerate REAL,\n  Year INTEGER,\n  FOREIGN KEY (Id) REFERENCES car_names (MakeId)\n);\n\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.countryId HAVING count(*)  >  3 UNION SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country JOIN MODEL_LIST AS T3 ON T2.Id  =  T3.Maker WHERE T3.Model  =  'fiat';","prompt":"What are the id and names of the countries which have more than 3 car makers or produce the 'fiat' model?"}
{"context":"CREATE TABLE continents (\n  ContId INTEGER PRIMARY KEY,\n  Continent TEXT\n);\nCREATE TABLE countries (\n  CountryId INTEGER PRIMARY KEY,\n  CountryName TEXT,\n  Continent INTEGER,\n  FOREIGN KEY (Continent) REFERENCES continents(ContId)\n);\n\nCREATE TABLE car_makers (\n  Id INTEGER PRIMARY KEY,\n  Maker TEXT,\n  FullName TEXT,\n  Country TEXT,\n  FOREIGN KEY (Country) REFERENCES countries(CountryId)\n);\n\nCREATE TABLE model_list (\n  ModelId INTEGER PRIMARY KEY,\n  Maker INTEGER,\n  Model TEXT UNIQUE,\n  FOREIGN KEY (Maker) REFERENCES car_makers (Id)\n);\n\nCREATE TABLE car_names (\n  MakeId INTEGER PRIMARY KEY,\n  Model TEXT,\n  Make TEXT,\n  FOREIGN KEY (Model) REFERENCES model_list (Model)\n);\nCREATE TABLE cars_data (\n  Id INTEGER PRIMARY KEY,\n  MPG TEXT,\n  Cylinders INTEGER,\n  Edispl REAL,\n  Horsepower TEXT,\n  Weight INTEGER,\n  Accelerate REAL,\n  Year INTEGER,\n  FOREIGN KEY (Id) REFERENCES car_names (MakeId)\n);\n\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  3 union select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country join model_list as t3 on t2.id  =  t3.maker where t3.model  =  'fiat';","prompt":"What are the ids and names of all countries that either have more than 3 car makers or produce fiat model ?"}
{"context":"CREATE TABLE 'airlines' (\n  uid INTEGER PRIMARY KEY,\n  Airline TEXT,\n  Abbreviation TEXT,\n  Country TEXT\n);\nCREATE TABLE 'airports' (\n  City TEXT,\n  AirportCode TEXT PRIMARY KEY,\n  AirportName TEXT,\n  Country TEXT,\n  CountryAbbrev TEXT\n);\nCREATE TABLE 'flights' (\n  Airline INTEGER,\n  FlightNo INTEGER,\n  SourceAirport TEXT,\n  DestAirport TEXT,\n  PRIMARY KEY(Airline, FlightNo),\n  FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n  FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"","prompt":"Which country does Airline \"JetBlue Airways\" belong to?"}
{"context":"CREATE TABLE 'airlines' (\n  uid INTEGER PRIMARY KEY,\n  Airline TEXT,\n  Abbreviation TEXT,\n  Country TEXT\n);\nCREATE TABLE 'airports' (\n  City TEXT,\n  AirportCode TEXT PRIMARY KEY,\n  AirportName TEXT,\n  Country TEXT,\n  CountryAbbrev TEXT\n);\nCREATE TABLE 'flights' (\n  Airline INTEGER,\n  FlightNo INTEGER,\n  SourceAirport TEXT,\n  DestAirport TEXT,\n  PRIMARY KEY(Airline, FlightNo),\n  FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n  FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"","prompt":"What country is Jetblue Airways affiliated with?"}
{"context":"CREATE TABLE 'airlines' (\n  uid INTEGER PRIMARY KEY,\n  Airline TEXT,\n  Abbreviation TEXT,\n  Country TEXT\n);\nCREATE TABLE 'airports' (\n  City TEXT,\n  AirportCode TEXT PRIMARY KEY,\n  AirportName TEXT,\n  Country TEXT,\n  CountryAbbrev TEXT\n);\nCREATE TABLE 'flights' (\n  Airline INTEGER,\n  FlightNo INTEGER,\n  SourceAirport TEXT,\n  DestAirport TEXT,\n  PRIMARY KEY(Airline, FlightNo),\n  FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n  FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"","prompt":"What is the abbreviation of Airline \"JetBlue Airways\"?"}
{"context":"CREATE TABLE 'airlines' (\n  uid INTEGER PRIMARY KEY,\n  Airline TEXT,\n  Abbreviation TEXT,\n  Country TEXT\n);\nCREATE TABLE 'airports' (\n  City TEXT,\n  AirportCode TEXT PRIMARY KEY,\n  AirportName TEXT,\n  Country TEXT,\n  CountryAbbrev TEXT\n);\nCREATE TABLE 'flights' (\n  Airline INTEGER,\n  FlightNo INTEGER,\n  SourceAirport TEXT,\n  DestAirport TEXT,\n  PRIMARY KEY(Airline, FlightNo),\n  FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n  FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"","prompt":"Which abbreviation corresponds to Jetblue Airways?"}
{"context":"CREATE TABLE 'airlines' (\n  uid INTEGER PRIMARY KEY,\n  Airline TEXT,\n  Abbreviation TEXT,\n  Country TEXT\n);\nCREATE TABLE 'airports' (\n  City TEXT,\n  AirportCode TEXT PRIMARY KEY,\n  AirportName TEXT,\n  Country TEXT,\n  CountryAbbrev TEXT\n);\nCREATE TABLE 'flights' (\n  Airline INTEGER,\n  FlightNo INTEGER,\n  SourceAirport TEXT,\n  DestAirport TEXT,\n  PRIMARY KEY(Airline, FlightNo),\n  FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n  FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\"","prompt":"List all airline names and their abbreviations in \"USA\"."}
{"context":"CREATE TABLE 'airlines' (\n  uid INTEGER PRIMARY KEY,\n  Airline TEXT,\n  Abbreviation TEXT,\n  Country TEXT\n);\nCREATE TABLE 'airports' (\n  City TEXT,\n  AirportCode TEXT PRIMARY KEY,\n  AirportName TEXT,\n  Country TEXT,\n  CountryAbbrev TEXT\n);\nCREATE TABLE 'flights' (\n  Airline INTEGER,\n  FlightNo INTEGER,\n  SourceAirport TEXT,\n  DestAirport TEXT,\n  PRIMARY KEY(Airline, FlightNo),\n  FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n  FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\"","prompt":"What are the airline names and abbreviations for airlines in the USA?"}
{"context":"CREATE TABLE 'airlines' (\n  uid INTEGER PRIMARY KEY,\n  Airline TEXT,\n  Abbreviation TEXT,\n  Country TEXT\n);\nCREATE TABLE 'airports' (\n  City TEXT,\n  AirportCode TEXT PRIMARY KEY,\n  AirportName TEXT,\n  Country TEXT,\n  CountryAbbrev TEXT\n);\nCREATE TABLE 'flights' (\n  Airline INTEGER,\n  FlightNo INTEGER,\n  SourceAirport TEXT,\n  DestAirport TEXT,\n  PRIMARY KEY(Airline, FlightNo),\n  FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n  FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\"","prompt":"List the airport code and name in the city of Anthony."}
{"context":"CREATE TABLE 'airlines' (\n  uid INTEGER PRIMARY KEY,\n  Airline TEXT,\n  Abbreviation TEXT,\n  Country TEXT\n);\nCREATE TABLE 'airports' (\n  City TEXT,\n  AirportCode TEXT PRIMARY KEY,\n  AirportName TEXT,\n  Country TEXT,\n  CountryAbbrev TEXT\n);\nCREATE TABLE 'flights' (\n  Airline INTEGER,\n  FlightNo INTEGER,\n  SourceAirport TEXT,\n  DestAirport TEXT,\n  PRIMARY KEY(Airline, FlightNo),\n  FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n  FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\"","prompt":"Give the airport code and airport name corresonding to the city Anthony."}
{"context":"CREATE TABLE 'airlines' (\n  uid INTEGER PRIMARY KEY,\n  Airline TEXT,\n  Abbreviation TEXT,\n  Country TEXT\n);\nCREATE TABLE 'airports' (\n  City TEXT,\n  AirportCode TEXT PRIMARY KEY,\n  AirportName TEXT,\n  Country TEXT,\n  CountryAbbrev TEXT\n);\nCREATE TABLE 'flights' (\n  Airline INTEGER,\n  FlightNo INTEGER,\n  SourceAirport TEXT,\n  DestAirport TEXT,\n  PRIMARY KEY(Airline, FlightNo),\n  FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n  FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT count(*) FROM AIRLINES","prompt":"How many airlines do we have?"}
{"context":"CREATE TABLE 'airlines' (\n  uid INTEGER PRIMARY KEY,\n  Airline TEXT,\n  Abbreviation TEXT,\n  Country TEXT\n);\nCREATE TABLE 'airports' (\n  City TEXT,\n  AirportCode TEXT PRIMARY KEY,\n  AirportName TEXT,\n  Country TEXT,\n  CountryAbbrev TEXT\n);\nCREATE TABLE 'flights' (\n  Airline INTEGER,\n  FlightNo INTEGER,\n  SourceAirport TEXT,\n  DestAirport TEXT,\n  PRIMARY KEY(Airline, FlightNo),\n  FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n  FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT count(*) FROM AIRLINES","prompt":"What is the total number of airlines?"}
{"context":"CREATE TABLE 'airlines' (\n  uid INTEGER PRIMARY KEY,\n  Airline TEXT,\n  Abbreviation TEXT,\n  Country TEXT\n);\nCREATE TABLE 'airports' (\n  City TEXT,\n  AirportCode TEXT PRIMARY KEY,\n  AirportName TEXT,\n  Country TEXT,\n  CountryAbbrev TEXT\n);\nCREATE TABLE 'flights' (\n  Airline INTEGER,\n  FlightNo INTEGER,\n  SourceAirport TEXT,\n  DestAirport TEXT,\n  PRIMARY KEY(Airline, FlightNo),\n  FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n  FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT count(*) FROM AIRPORTS","prompt":"How many airports do we have?"}
{"context":"CREATE TABLE 'airlines' (\n  uid INTEGER PRIMARY KEY,\n  Airline TEXT,\n  Abbreviation TEXT,\n  Country TEXT\n);\nCREATE TABLE 'airports' (\n  City TEXT,\n  AirportCode TEXT PRIMARY KEY,\n  AirportName TEXT,\n  Country TEXT,\n  CountryAbbrev TEXT\n);\nCREATE TABLE 'flights' (\n  Airline INTEGER,\n  FlightNo INTEGER,\n  SourceAirport TEXT,\n  DestAirport TEXT,\n  PRIMARY KEY(Airline, FlightNo),\n  FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n  FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT count(*) FROM AIRPORTS","prompt":"Return the number of  airports."}
{"context":"CREATE TABLE 'airlines' (\n  uid INTEGER PRIMARY KEY,\n  Airline TEXT,\n  Abbreviation TEXT,\n  Country TEXT\n);\nCREATE TABLE 'airports' (\n  City TEXT,\n  AirportCode TEXT PRIMARY KEY,\n  AirportName TEXT,\n  Country TEXT,\n  CountryAbbrev TEXT\n);\nCREATE TABLE 'flights' (\n  Airline INTEGER,\n  FlightNo INTEGER,\n  SourceAirport TEXT,\n  DestAirport TEXT,\n  PRIMARY KEY(Airline, FlightNo),\n  FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n  FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT count(*) FROM FLIGHTS","prompt":"How many flights do we have?"}
{"context":"CREATE TABLE 'airlines' (\n  uid INTEGER PRIMARY KEY,\n  Airline TEXT,\n  Abbreviation TEXT,\n  Country TEXT\n);\nCREATE TABLE 'airports' (\n  City TEXT,\n  AirportCode TEXT PRIMARY KEY,\n  AirportName TEXT,\n  Country TEXT,\n  CountryAbbrev TEXT\n);\nCREATE TABLE 'flights' (\n  Airline INTEGER,\n  FlightNo INTEGER,\n  SourceAirport TEXT,\n  DestAirport TEXT,\n  PRIMARY KEY(Airline, FlightNo),\n  FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n  FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT count(*) FROM FLIGHTS","prompt":"Return the number of flights."}
{"context":"CREATE TABLE 'airlines' (\n  uid INTEGER PRIMARY KEY,\n  Airline TEXT,\n  Abbreviation TEXT,\n  Country TEXT\n);\nCREATE TABLE 'airports' (\n  City TEXT,\n  AirportCode TEXT PRIMARY KEY,\n  AirportName TEXT,\n  Country TEXT,\n  CountryAbbrev TEXT\n);\nCREATE TABLE 'flights' (\n  Airline INTEGER,\n  FlightNo INTEGER,\n  SourceAirport TEXT,\n  DestAirport TEXT,\n  PRIMARY KEY(Airline, FlightNo),\n  FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n  FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\"","prompt":"Which airline has abbreviation 'UAL'?"}
{"context":"CREATE TABLE 'airlines' (\n  uid INTEGER PRIMARY KEY,\n  Airline TEXT,\n  Abbreviation TEXT,\n  Country TEXT\n);\nCREATE TABLE 'airports' (\n  City TEXT,\n  AirportCode TEXT PRIMARY KEY,\n  AirportName TEXT,\n  Country TEXT,\n  CountryAbbrev TEXT\n);\nCREATE TABLE 'flights' (\n  Airline INTEGER,\n  FlightNo INTEGER,\n  SourceAirport TEXT,\n  DestAirport TEXT,\n  PRIMARY KEY(Airline, FlightNo),\n  FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n  FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\"","prompt":"Give the airline with abbreviation 'UAL'."}
{"context":"CREATE TABLE 'airlines' (\n  uid INTEGER PRIMARY KEY,\n  Airline TEXT,\n  Abbreviation TEXT,\n  Country TEXT\n);\nCREATE TABLE 'airports' (\n  City TEXT,\n  AirportCode TEXT PRIMARY KEY,\n  AirportName TEXT,\n  Country TEXT,\n  CountryAbbrev TEXT\n);\nCREATE TABLE 'flights' (\n  Airline INTEGER,\n  FlightNo INTEGER,\n  SourceAirport TEXT,\n  DestAirport TEXT,\n  PRIMARY KEY(Airline, FlightNo),\n  FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n  FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\"","prompt":"How many airlines are from USA?"}
{"context":"CREATE TABLE 'airlines' (\n  uid INTEGER PRIMARY KEY,\n  Airline TEXT,\n  Abbreviation TEXT,\n  Country TEXT\n);\nCREATE TABLE 'airports' (\n  City TEXT,\n  AirportCode TEXT PRIMARY KEY,\n  AirportName TEXT,\n  Country TEXT,\n  CountryAbbrev TEXT\n);\nCREATE TABLE 'flights' (\n  Airline INTEGER,\n  FlightNo INTEGER,\n  SourceAirport TEXT,\n  DestAirport TEXT,\n  PRIMARY KEY(Airline, FlightNo),\n  FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n  FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\"","prompt":"Return the number of airlines in the USA."}
{"context":"CREATE TABLE 'airlines' (\n  uid INTEGER PRIMARY KEY,\n  Airline TEXT,\n  Abbreviation TEXT,\n  Country TEXT\n);\nCREATE TABLE 'airports' (\n  City TEXT,\n  AirportCode TEXT PRIMARY KEY,\n  AirportName TEXT,\n  Country TEXT,\n  CountryAbbrev TEXT\n);\nCREATE TABLE 'flights' (\n  Airline INTEGER,\n  FlightNo INTEGER,\n  SourceAirport TEXT,\n  DestAirport TEXT,\n  PRIMARY KEY(Airline, FlightNo),\n  FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n  FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\"","prompt":"Which city and country is the Alton airport at?"}
{"context":"CREATE TABLE 'airlines' (\n  uid INTEGER PRIMARY KEY,\n  Airline TEXT,\n  Abbreviation TEXT,\n  Country TEXT\n);\nCREATE TABLE 'airports' (\n  City TEXT,\n  AirportCode TEXT PRIMARY KEY,\n  AirportName TEXT,\n  Country TEXT,\n  CountryAbbrev TEXT\n);\nCREATE TABLE 'flights' (\n  Airline INTEGER,\n  FlightNo INTEGER,\n  SourceAirport TEXT,\n  DestAirport TEXT,\n  PRIMARY KEY(Airline, FlightNo),\n  FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n  FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\"","prompt":"Give the city and country for the Alton airport."}
{"context":"CREATE TABLE 'airlines' (\n  uid INTEGER PRIMARY KEY,\n  Airline TEXT,\n  Abbreviation TEXT,\n  Country TEXT\n);\nCREATE TABLE 'airports' (\n  City TEXT,\n  AirportCode TEXT PRIMARY KEY,\n  AirportName TEXT,\n  Country TEXT,\n  CountryAbbrev TEXT\n);\nCREATE TABLE 'flights' (\n  Airline INTEGER,\n  FlightNo INTEGER,\n  SourceAirport TEXT,\n  DestAirport TEXT,\n  PRIMARY KEY(Airline, FlightNo),\n  FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n  FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\"","prompt":"What is the airport name for airport 'AKO'?"}
{"context":"CREATE TABLE 'airlines' (\n  uid INTEGER PRIMARY KEY,\n  Airline TEXT,\n  Abbreviation TEXT,\n  Country TEXT\n);\nCREATE TABLE 'airports' (\n  City TEXT,\n  AirportCode TEXT PRIMARY KEY,\n  AirportName TEXT,\n  Country TEXT,\n  CountryAbbrev TEXT\n);\nCREATE TABLE 'flights' (\n  Airline INTEGER,\n  FlightNo INTEGER,\n  SourceAirport TEXT,\n  DestAirport TEXT,\n  PRIMARY KEY(Airline, FlightNo),\n  FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n  FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\"","prompt":"Return the name of the airport with code 'AKO'."}
{"context":"CREATE TABLE 'airlines' (\n  uid INTEGER PRIMARY KEY,\n  Airline TEXT,\n  Abbreviation TEXT,\n  Country TEXT\n);\nCREATE TABLE 'airports' (\n  City TEXT,\n  AirportCode TEXT PRIMARY KEY,\n  AirportName TEXT,\n  Country TEXT,\n  CountryAbbrev TEXT\n);\nCREATE TABLE 'flights' (\n  Airline INTEGER,\n  FlightNo INTEGER,\n  SourceAirport TEXT,\n  DestAirport TEXT,\n  PRIMARY KEY(Airline, FlightNo),\n  FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n  FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\"","prompt":"What are airport names at City 'Aberdeen'?"}
{"context":"CREATE TABLE 'airlines' (\n  uid INTEGER PRIMARY KEY,\n  Airline TEXT,\n  Abbreviation TEXT,\n  Country TEXT\n);\nCREATE TABLE 'airports' (\n  City TEXT,\n  AirportCode TEXT PRIMARY KEY,\n  AirportName TEXT,\n  Country TEXT,\n  CountryAbbrev TEXT\n);\nCREATE TABLE 'flights' (\n  Airline INTEGER,\n  FlightNo INTEGER,\n  SourceAirport TEXT,\n  DestAirport TEXT,\n  PRIMARY KEY(Airline, FlightNo),\n  FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n  FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\"","prompt":"What are the names of airports in Aberdeen?"}
{"context":"CREATE TABLE 'airlines' (\n  uid INTEGER PRIMARY KEY,\n  Airline TEXT,\n  Abbreviation TEXT,\n  Country TEXT\n);\nCREATE TABLE 'airports' (\n  City TEXT,\n  AirportCode TEXT PRIMARY KEY,\n  AirportName TEXT,\n  Country TEXT,\n  CountryAbbrev TEXT\n);\nCREATE TABLE 'flights' (\n  Airline INTEGER,\n  FlightNo INTEGER,\n  SourceAirport TEXT,\n  DestAirport TEXT,\n  PRIMARY KEY(Airline, FlightNo),\n  FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n  FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\"","prompt":"How many flights depart from 'APG'?"}
{"context":"CREATE TABLE 'airlines' (\n  uid INTEGER PRIMARY KEY,\n  Airline TEXT,\n  Abbreviation TEXT,\n  Country TEXT\n);\nCREATE TABLE 'airports' (\n  City TEXT,\n  AirportCode TEXT PRIMARY KEY,\n  AirportName TEXT,\n  Country TEXT,\n  CountryAbbrev TEXT\n);\nCREATE TABLE 'flights' (\n  Airline INTEGER,\n  FlightNo INTEGER,\n  SourceAirport TEXT,\n  DestAirport TEXT,\n  PRIMARY KEY(Airline, FlightNo),\n  FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n  FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\"","prompt":"Count the number of flights departing from 'APG'."}
{"context":"CREATE TABLE 'airlines' (\n  uid INTEGER PRIMARY KEY,\n  Airline TEXT,\n  Abbreviation TEXT,\n  Country TEXT\n);\nCREATE TABLE 'airports' (\n  City TEXT,\n  AirportCode TEXT PRIMARY KEY,\n  AirportName TEXT,\n  Country TEXT,\n  CountryAbbrev TEXT\n);\nCREATE TABLE 'flights' (\n  Airline INTEGER,\n  FlightNo INTEGER,\n  SourceAirport TEXT,\n  DestAirport TEXT,\n  PRIMARY KEY(Airline, FlightNo),\n  FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n  FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\"","prompt":"How many flights have destination ATO?"}
{"context":"CREATE TABLE 'airlines' (\n  uid INTEGER PRIMARY KEY,\n  Airline TEXT,\n  Abbreviation TEXT,\n  Country TEXT\n);\nCREATE TABLE 'airports' (\n  City TEXT,\n  AirportCode TEXT PRIMARY KEY,\n  AirportName TEXT,\n  Country TEXT,\n  CountryAbbrev TEXT\n);\nCREATE TABLE 'flights' (\n  Airline INTEGER,\n  FlightNo INTEGER,\n  SourceAirport TEXT,\n  DestAirport TEXT,\n  PRIMARY KEY(Airline, FlightNo),\n  FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n  FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\"","prompt":"Count the number of flights into ATO."}
{"context":"CREATE TABLE 'airlines' (\n  uid INTEGER PRIMARY KEY,\n  Airline TEXT,\n  Abbreviation TEXT,\n  Country TEXT\n);\nCREATE TABLE 'airports' (\n  City TEXT,\n  AirportCode TEXT PRIMARY KEY,\n  AirportName TEXT,\n  Country TEXT,\n  CountryAbbrev TEXT\n);\nCREATE TABLE 'flights' (\n  Airline INTEGER,\n  FlightNo INTEGER,\n  SourceAirport TEXT,\n  DestAirport TEXT,\n  PRIMARY KEY(Airline, FlightNo),\n  FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n  FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"","prompt":"How many flights depart from City Aberdeen?"}
{"context":"CREATE TABLE 'airlines' (\n  uid INTEGER PRIMARY KEY,\n  Airline TEXT,\n  Abbreviation TEXT,\n  Country TEXT\n);\nCREATE TABLE 'airports' (\n  City TEXT,\n  AirportCode TEXT PRIMARY KEY,\n  AirportName TEXT,\n  Country TEXT,\n  CountryAbbrev TEXT\n);\nCREATE TABLE 'flights' (\n  Airline INTEGER,\n  FlightNo INTEGER,\n  SourceAirport TEXT,\n  DestAirport TEXT,\n  PRIMARY KEY(Airline, FlightNo),\n  FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n  FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"","prompt":"Return the number of flights departing from Aberdeen."}
{"context":"CREATE TABLE 'airlines' (\n  uid INTEGER PRIMARY KEY,\n  Airline TEXT,\n  Abbreviation TEXT,\n  Country TEXT\n);\nCREATE TABLE 'airports' (\n  City TEXT,\n  AirportCode TEXT PRIMARY KEY,\n  AirportName TEXT,\n  Country TEXT,\n  CountryAbbrev TEXT\n);\nCREATE TABLE 'flights' (\n  Airline INTEGER,\n  FlightNo INTEGER,\n  SourceAirport TEXT,\n  DestAirport TEXT,\n  PRIMARY KEY(Airline, FlightNo),\n  FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n  FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"","prompt":"How many flights arriving in Aberdeen city?"}
{"context":"CREATE TABLE 'airlines' (\n  uid INTEGER PRIMARY KEY,\n  Airline TEXT,\n  Abbreviation TEXT,\n  Country TEXT\n);\nCREATE TABLE 'airports' (\n  City TEXT,\n  AirportCode TEXT PRIMARY KEY,\n  AirportName TEXT,\n  Country TEXT,\n  CountryAbbrev TEXT\n);\nCREATE TABLE 'flights' (\n  Airline INTEGER,\n  FlightNo INTEGER,\n  SourceAirport TEXT,\n  DestAirport TEXT,\n  PRIMARY KEY(Airline, FlightNo),\n  FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n  FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"","prompt":"Return the number of flights arriving in Aberdeen."}
{"context":"CREATE TABLE 'airlines' (\n  uid INTEGER PRIMARY KEY,\n  Airline TEXT,\n  Abbreviation TEXT,\n  Country TEXT\n);\nCREATE TABLE 'airports' (\n  City TEXT,\n  AirportCode TEXT PRIMARY KEY,\n  AirportName TEXT,\n  Country TEXT,\n  CountryAbbrev TEXT\n);\nCREATE TABLE 'flights' (\n  Airline INTEGER,\n  FlightNo INTEGER,\n  SourceAirport TEXT,\n  DestAirport TEXT,\n  PRIMARY KEY(Airline, FlightNo),\n  FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n  FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  \"Ashley\" AND T3.City  =  \"Aberdeen\"","prompt":"How many flights depart from City 'Aberdeen' and have destination City 'Ashley'?"}
{"context":"CREATE TABLE 'airlines' (\n  uid INTEGER PRIMARY KEY,\n  Airline TEXT,\n  Abbreviation TEXT,\n  Country TEXT\n);\nCREATE TABLE 'airports' (\n  City TEXT,\n  AirportCode TEXT PRIMARY KEY,\n  AirportName TEXT,\n  Country TEXT,\n  CountryAbbrev TEXT\n);\nCREATE TABLE 'flights' (\n  Airline INTEGER,\n  FlightNo INTEGER,\n  SourceAirport TEXT,\n  DestAirport TEXT,\n  PRIMARY KEY(Airline, FlightNo),\n  FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n  FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  \"Ashley\" AND T3.City  =  \"Aberdeen\"","prompt":"How many flights fly from Aberdeen to Ashley?"}
{"context":"CREATE TABLE 'airlines' (\n  uid INTEGER PRIMARY KEY,\n  Airline TEXT,\n  Abbreviation TEXT,\n  Country TEXT\n);\nCREATE TABLE 'airports' (\n  City TEXT,\n  AirportCode TEXT PRIMARY KEY,\n  AirportName TEXT,\n  Country TEXT,\n  CountryAbbrev TEXT\n);\nCREATE TABLE 'flights' (\n  Airline INTEGER,\n  FlightNo INTEGER,\n  SourceAirport TEXT,\n  DestAirport TEXT,\n  PRIMARY KEY(Airline, FlightNo),\n  FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n  FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\"","prompt":"How many flights does airline 'JetBlue Airways' have?"}
{"context":"CREATE TABLE 'airlines' (\n  uid INTEGER PRIMARY KEY,\n  Airline TEXT,\n  Abbreviation TEXT,\n  Country TEXT\n);\nCREATE TABLE 'airports' (\n  City TEXT,\n  AirportCode TEXT PRIMARY KEY,\n  AirportName TEXT,\n  Country TEXT,\n  CountryAbbrev TEXT\n);\nCREATE TABLE 'flights' (\n  Airline INTEGER,\n  FlightNo INTEGER,\n  SourceAirport TEXT,\n  DestAirport TEXT,\n  PRIMARY KEY(Airline, FlightNo),\n  FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n  FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\"","prompt":"Give the number of Jetblue Airways flights."}
{"context":"CREATE TABLE 'airlines' (\n  uid INTEGER PRIMARY KEY,\n  Airline TEXT,\n  Abbreviation TEXT,\n  Country TEXT\n);\nCREATE TABLE 'airports' (\n  City TEXT,\n  AirportCode TEXT PRIMARY KEY,\n  AirportName TEXT,\n  Country TEXT,\n  CountryAbbrev TEXT\n);\nCREATE TABLE 'flights' (\n  Airline INTEGER,\n  FlightNo INTEGER,\n  SourceAirport TEXT,\n  DestAirport TEXT,\n  PRIMARY KEY(Airline, FlightNo),\n  FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n  FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\"","prompt":"How many 'United Airlines' flights go to Airport 'ASY'?"}
{"context":"CREATE TABLE 'airlines' (\n  uid INTEGER PRIMARY KEY,\n  Airline TEXT,\n  Abbreviation TEXT,\n  Country TEXT\n);\nCREATE TABLE 'airports' (\n  City TEXT,\n  AirportCode TEXT PRIMARY KEY,\n  AirportName TEXT,\n  Country TEXT,\n  CountryAbbrev TEXT\n);\nCREATE TABLE 'flights' (\n  Airline INTEGER,\n  FlightNo INTEGER,\n  SourceAirport TEXT,\n  DestAirport TEXT,\n  PRIMARY KEY(Airline, FlightNo),\n  FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n  FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\"","prompt":"Count the number of United Airlines flights arriving in ASY Airport."}
{"context":"CREATE TABLE 'airlines' (\n  uid INTEGER PRIMARY KEY,\n  Airline TEXT,\n  Abbreviation TEXT,\n  Country TEXT\n);\nCREATE TABLE 'airports' (\n  City TEXT,\n  AirportCode TEXT PRIMARY KEY,\n  AirportName TEXT,\n  Country TEXT,\n  CountryAbbrev TEXT\n);\nCREATE TABLE 'flights' (\n  Airline INTEGER,\n  FlightNo INTEGER,\n  SourceAirport TEXT,\n  DestAirport TEXT,\n  PRIMARY KEY(Airline, FlightNo),\n  FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n  FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\"","prompt":"How many 'United Airlines' flights depart from Airport 'AHD'?"}
{"context":"CREATE TABLE 'airlines' (\n  uid INTEGER PRIMARY KEY,\n  Airline TEXT,\n  Abbreviation TEXT,\n  Country TEXT\n);\nCREATE TABLE 'airports' (\n  City TEXT,\n  AirportCode TEXT PRIMARY KEY,\n  AirportName TEXT,\n  Country TEXT,\n  CountryAbbrev TEXT\n);\nCREATE TABLE 'flights' (\n  Airline INTEGER,\n  FlightNo INTEGER,\n  SourceAirport TEXT,\n  DestAirport TEXT,\n  PRIMARY KEY(Airline, FlightNo),\n  FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n  FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\"","prompt":"Return the number of United Airlines flights leaving from AHD Airport."}
{"context":"CREATE TABLE 'airlines' (\n  uid INTEGER PRIMARY KEY,\n  Airline TEXT,\n  Abbreviation TEXT,\n  Country TEXT\n);\nCREATE TABLE 'airports' (\n  City TEXT,\n  AirportCode TEXT PRIMARY KEY,\n  AirportName TEXT,\n  Country TEXT,\n  CountryAbbrev TEXT\n);\nCREATE TABLE 'flights' (\n  Airline INTEGER,\n  FlightNo INTEGER,\n  SourceAirport TEXT,\n  DestAirport TEXT,\n  PRIMARY KEY(Airline, FlightNo),\n  FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n  FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\"","prompt":"How many United Airlines flights go to City 'Aberdeen'?"}
{"context":"CREATE TABLE 'airlines' (\n  uid INTEGER PRIMARY KEY,\n  Airline TEXT,\n  Abbreviation TEXT,\n  Country TEXT\n);\nCREATE TABLE 'airports' (\n  City TEXT,\n  AirportCode TEXT PRIMARY KEY,\n  AirportName TEXT,\n  Country TEXT,\n  CountryAbbrev TEXT\n);\nCREATE TABLE 'flights' (\n  Airline INTEGER,\n  FlightNo INTEGER,\n  SourceAirport TEXT,\n  DestAirport TEXT,\n  PRIMARY KEY(Airline, FlightNo),\n  FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n  FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\"","prompt":"Count the number of United Airlines flights that arrive in Aberdeen."}
{"context":"CREATE TABLE 'airlines' (\n  uid INTEGER PRIMARY KEY,\n  Airline TEXT,\n  Abbreviation TEXT,\n  Country TEXT\n);\nCREATE TABLE 'airports' (\n  City TEXT,\n  AirportCode TEXT PRIMARY KEY,\n  AirportName TEXT,\n  Country TEXT,\n  CountryAbbrev TEXT\n);\nCREATE TABLE 'flights' (\n  Airline INTEGER,\n  FlightNo INTEGER,\n  SourceAirport TEXT,\n  DestAirport TEXT,\n  PRIMARY KEY(Airline, FlightNo),\n  FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n  FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1","prompt":"Which city has most number of arriving flights?"}
{"context":"CREATE TABLE 'airlines' (\n  uid INTEGER PRIMARY KEY,\n  Airline TEXT,\n  Abbreviation TEXT,\n  Country TEXT\n);\nCREATE TABLE 'airports' (\n  City TEXT,\n  AirportCode TEXT PRIMARY KEY,\n  AirportName TEXT,\n  Country TEXT,\n  CountryAbbrev TEXT\n);\nCREATE TABLE 'flights' (\n  Airline INTEGER,\n  FlightNo INTEGER,\n  SourceAirport TEXT,\n  DestAirport TEXT,\n  PRIMARY KEY(Airline, FlightNo),\n  FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n  FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1","prompt":"Which city has the most frequent destination airport?"}
{"context":"CREATE TABLE 'airlines' (\n  uid INTEGER PRIMARY KEY,\n  Airline TEXT,\n  Abbreviation TEXT,\n  Country TEXT\n);\nCREATE TABLE 'airports' (\n  City TEXT,\n  AirportCode TEXT PRIMARY KEY,\n  AirportName TEXT,\n  Country TEXT,\n  CountryAbbrev TEXT\n);\nCREATE TABLE 'flights' (\n  Airline INTEGER,\n  FlightNo INTEGER,\n  SourceAirport TEXT,\n  DestAirport TEXT,\n  PRIMARY KEY(Airline, FlightNo),\n  FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n  FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1","prompt":"Which city has most number of departing flights?"}
{"context":"CREATE TABLE 'airlines' (\n  uid INTEGER PRIMARY KEY,\n  Airline TEXT,\n  Abbreviation TEXT,\n  Country TEXT\n);\nCREATE TABLE 'airports' (\n  City TEXT,\n  AirportCode TEXT PRIMARY KEY,\n  AirportName TEXT,\n  Country TEXT,\n  CountryAbbrev TEXT\n);\nCREATE TABLE 'flights' (\n  Airline INTEGER,\n  FlightNo INTEGER,\n  SourceAirport TEXT,\n  DestAirport TEXT,\n  PRIMARY KEY(Airline, FlightNo),\n  FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n  FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1","prompt":"Which city is the most frequent source airport?"}
{"context":"CREATE TABLE 'airlines' (\n  uid INTEGER PRIMARY KEY,\n  Airline TEXT,\n  Abbreviation TEXT,\n  Country TEXT\n);\nCREATE TABLE 'airports' (\n  City TEXT,\n  AirportCode TEXT PRIMARY KEY,\n  AirportName TEXT,\n  Country TEXT,\n  CountryAbbrev TEXT\n);\nCREATE TABLE 'flights' (\n  Airline INTEGER,\n  FlightNo INTEGER,\n  SourceAirport TEXT,\n  DestAirport TEXT,\n  PRIMARY KEY(Airline, FlightNo),\n  FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n  FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1","prompt":"What is the code of airport that has the highest number of flights?"}
{"context":"CREATE TABLE 'airlines' (\n  uid INTEGER PRIMARY KEY,\n  Airline TEXT,\n  Abbreviation TEXT,\n  Country TEXT\n);\nCREATE TABLE 'airports' (\n  City TEXT,\n  AirportCode TEXT PRIMARY KEY,\n  AirportName TEXT,\n  Country TEXT,\n  CountryAbbrev TEXT\n);\nCREATE TABLE 'flights' (\n  Airline INTEGER,\n  FlightNo INTEGER,\n  SourceAirport TEXT,\n  DestAirport TEXT,\n  PRIMARY KEY(Airline, FlightNo),\n  FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n  FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1","prompt":"What is the airport code of the airport with the most flights?"}
{"context":"CREATE TABLE 'airlines' (\n  uid INTEGER PRIMARY KEY,\n  Airline TEXT,\n  Abbreviation TEXT,\n  Country TEXT\n);\nCREATE TABLE 'airports' (\n  City TEXT,\n  AirportCode TEXT PRIMARY KEY,\n  AirportName TEXT,\n  Country TEXT,\n  CountryAbbrev TEXT\n);\nCREATE TABLE 'flights' (\n  Airline INTEGER,\n  FlightNo INTEGER,\n  SourceAirport TEXT,\n  DestAirport TEXT,\n  PRIMARY KEY(Airline, FlightNo),\n  FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n  FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1","prompt":"What is the code of airport that has fewest number of flights?"}
{"context":"CREATE TABLE 'airlines' (\n  uid INTEGER PRIMARY KEY,\n  Airline TEXT,\n  Abbreviation TEXT,\n  Country TEXT\n);\nCREATE TABLE 'airports' (\n  City TEXT,\n  AirportCode TEXT PRIMARY KEY,\n  AirportName TEXT,\n  Country TEXT,\n  CountryAbbrev TEXT\n);\nCREATE TABLE 'flights' (\n  Airline INTEGER,\n  FlightNo INTEGER,\n  SourceAirport TEXT,\n  DestAirport TEXT,\n  PRIMARY KEY(Airline, FlightNo),\n  FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n  FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1","prompt":"Give the code of the airport with the least flights."}
{"context":"CREATE TABLE 'airlines' (\n  uid INTEGER PRIMARY KEY,\n  Airline TEXT,\n  Abbreviation TEXT,\n  Country TEXT\n);\nCREATE TABLE 'airports' (\n  City TEXT,\n  AirportCode TEXT PRIMARY KEY,\n  AirportName TEXT,\n  Country TEXT,\n  CountryAbbrev TEXT\n);\nCREATE TABLE 'flights' (\n  Airline INTEGER,\n  FlightNo INTEGER,\n  SourceAirport TEXT,\n  DestAirport TEXT,\n  PRIMARY KEY(Airline, FlightNo),\n  FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n  FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1","prompt":"Which airline has most number of flights?"}
{"context":"CREATE TABLE 'airlines' (\n  uid INTEGER PRIMARY KEY,\n  Airline TEXT,\n  Abbreviation TEXT,\n  Country TEXT\n);\nCREATE TABLE 'airports' (\n  City TEXT,\n  AirportCode TEXT PRIMARY KEY,\n  AirportName TEXT,\n  Country TEXT,\n  CountryAbbrev TEXT\n);\nCREATE TABLE 'flights' (\n  Airline INTEGER,\n  FlightNo INTEGER,\n  SourceAirport TEXT,\n  DestAirport TEXT,\n  PRIMARY KEY(Airline, FlightNo),\n  FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n  FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1","prompt":"What airline serves the most flights?"}
{"context":"CREATE TABLE 'airlines' (\n  uid INTEGER PRIMARY KEY,\n  Airline TEXT,\n  Abbreviation TEXT,\n  Country TEXT\n);\nCREATE TABLE 'airports' (\n  City TEXT,\n  AirportCode TEXT PRIMARY KEY,\n  AirportName TEXT,\n  Country TEXT,\n  CountryAbbrev TEXT\n);\nCREATE TABLE 'flights' (\n  Airline INTEGER,\n  FlightNo INTEGER,\n  SourceAirport TEXT,\n  DestAirport TEXT,\n  PRIMARY KEY(Airline, FlightNo),\n  FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n  FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1","prompt":"Find the abbreviation and country of the airline that has fewest number of flights?"}
{"context":"CREATE TABLE 'airlines' (\n  uid INTEGER PRIMARY KEY,\n  Airline TEXT,\n  Abbreviation TEXT,\n  Country TEXT\n);\nCREATE TABLE 'airports' (\n  City TEXT,\n  AirportCode TEXT PRIMARY KEY,\n  AirportName TEXT,\n  Country TEXT,\n  CountryAbbrev TEXT\n);\nCREATE TABLE 'flights' (\n  Airline INTEGER,\n  FlightNo INTEGER,\n  SourceAirport TEXT,\n  DestAirport TEXT,\n  PRIMARY KEY(Airline, FlightNo),\n  FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n  FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1","prompt":"What is the abbreviation of the airilne has the fewest flights and what country is it in?"}
{"context":"CREATE TABLE 'airlines' (\n  uid INTEGER PRIMARY KEY,\n  Airline TEXT,\n  Abbreviation TEXT,\n  Country TEXT\n);\nCREATE TABLE 'airports' (\n  City TEXT,\n  AirportCode TEXT PRIMARY KEY,\n  AirportName TEXT,\n  Country TEXT,\n  CountryAbbrev TEXT\n);\nCREATE TABLE 'flights' (\n  Airline INTEGER,\n  FlightNo INTEGER,\n  SourceAirport TEXT,\n  DestAirport TEXT,\n  PRIMARY KEY(Airline, FlightNo),\n  FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n  FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\"","prompt":"What are airlines that have some flight departing from airport 'AHD'?"}
{"context":"CREATE TABLE 'airlines' (\n  uid INTEGER PRIMARY KEY,\n  Airline TEXT,\n  Abbreviation TEXT,\n  Country TEXT\n);\nCREATE TABLE 'airports' (\n  City TEXT,\n  AirportCode TEXT PRIMARY KEY,\n  AirportName TEXT,\n  Country TEXT,\n  CountryAbbrev TEXT\n);\nCREATE TABLE 'flights' (\n  Airline INTEGER,\n  FlightNo INTEGER,\n  SourceAirport TEXT,\n  DestAirport TEXT,\n  PRIMARY KEY(Airline, FlightNo),\n  FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n  FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\"","prompt":"Which airlines have a flight with source airport AHD?"}
{"context":"CREATE TABLE 'airlines' (\n  uid INTEGER PRIMARY KEY,\n  Airline TEXT,\n  Abbreviation TEXT,\n  Country TEXT\n);\nCREATE TABLE 'airports' (\n  City TEXT,\n  AirportCode TEXT PRIMARY KEY,\n  AirportName TEXT,\n  Country TEXT,\n  CountryAbbrev TEXT\n);\nCREATE TABLE 'flights' (\n  Airline INTEGER,\n  FlightNo INTEGER,\n  SourceAirport TEXT,\n  DestAirport TEXT,\n  PRIMARY KEY(Airline, FlightNo),\n  FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n  FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\"","prompt":"What are airlines that have flights arriving at airport 'AHD'?"}
{"context":"CREATE TABLE 'airlines' (\n  uid INTEGER PRIMARY KEY,\n  Airline TEXT,\n  Abbreviation TEXT,\n  Country TEXT\n);\nCREATE TABLE 'airports' (\n  City TEXT,\n  AirportCode TEXT PRIMARY KEY,\n  AirportName TEXT,\n  Country TEXT,\n  CountryAbbrev TEXT\n);\nCREATE TABLE 'flights' (\n  Airline INTEGER,\n  FlightNo INTEGER,\n  SourceAirport TEXT,\n  DestAirport TEXT,\n  PRIMARY KEY(Airline, FlightNo),\n  FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n  FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\"","prompt":"Which airlines have a flight with destination airport AHD?"}
{"context":"CREATE TABLE 'airlines' (\n  uid INTEGER PRIMARY KEY,\n  Airline TEXT,\n  Abbreviation TEXT,\n  Country TEXT\n);\nCREATE TABLE 'airports' (\n  City TEXT,\n  AirportCode TEXT PRIMARY KEY,\n  AirportName TEXT,\n  Country TEXT,\n  CountryAbbrev TEXT\n);\nCREATE TABLE 'flights' (\n  Airline INTEGER,\n  FlightNo INTEGER,\n  SourceAirport TEXT,\n  DestAirport TEXT,\n  PRIMARY KEY(Airline, FlightNo),\n  FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n  FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\" INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\"","prompt":"Find all airlines that have flights from both airports 'APG' and 'CVO'."}
{"context":"CREATE TABLE 'airlines' (\n  uid INTEGER PRIMARY KEY,\n  Airline TEXT,\n  Abbreviation TEXT,\n  Country TEXT\n);\nCREATE TABLE 'airports' (\n  City TEXT,\n  AirportCode TEXT PRIMARY KEY,\n  AirportName TEXT,\n  Country TEXT,\n  CountryAbbrev TEXT\n);\nCREATE TABLE 'flights' (\n  Airline INTEGER,\n  FlightNo INTEGER,\n  SourceAirport TEXT,\n  DestAirport TEXT,\n  PRIMARY KEY(Airline, FlightNo),\n  FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n  FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\" INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\"","prompt":"Which airlines have departing flights from both APG and CVO airports?"}
{"context":"CREATE TABLE 'airlines' (\n  uid INTEGER PRIMARY KEY,\n  Airline TEXT,\n  Abbreviation TEXT,\n  Country TEXT\n);\nCREATE TABLE 'airports' (\n  City TEXT,\n  AirportCode TEXT PRIMARY KEY,\n  AirportName TEXT,\n  Country TEXT,\n  CountryAbbrev TEXT\n);\nCREATE TABLE 'flights' (\n  Airline INTEGER,\n  FlightNo INTEGER,\n  SourceAirport TEXT,\n  DestAirport TEXT,\n  PRIMARY KEY(Airline, FlightNo),\n  FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n  FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\"","prompt":"Find all airlines that have flights from airport 'CVO' but not from 'APG'."}
{"context":"CREATE TABLE 'airlines' (\n  uid INTEGER PRIMARY KEY,\n  Airline TEXT,\n  Abbreviation TEXT,\n  Country TEXT\n);\nCREATE TABLE 'airports' (\n  City TEXT,\n  AirportCode TEXT PRIMARY KEY,\n  AirportName TEXT,\n  Country TEXT,\n  CountryAbbrev TEXT\n);\nCREATE TABLE 'flights' (\n  Airline INTEGER,\n  FlightNo INTEGER,\n  SourceAirport TEXT,\n  DestAirport TEXT,\n  PRIMARY KEY(Airline, FlightNo),\n  FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n  FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\"","prompt":"Which airlines have departures from CVO but not from APG airports?"}
{"context":"CREATE TABLE 'airlines' (\n  uid INTEGER PRIMARY KEY,\n  Airline TEXT,\n  Abbreviation TEXT,\n  Country TEXT\n);\nCREATE TABLE 'airports' (\n  City TEXT,\n  AirportCode TEXT PRIMARY KEY,\n  AirportName TEXT,\n  Country TEXT,\n  CountryAbbrev TEXT\n);\nCREATE TABLE 'flights' (\n  Airline INTEGER,\n  FlightNo INTEGER,\n  SourceAirport TEXT,\n  DestAirport TEXT,\n  PRIMARY KEY(Airline, FlightNo),\n  FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n  FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10","prompt":"Find all airlines that have at least 10 flights."}
{"context":"CREATE TABLE 'airlines' (\n  uid INTEGER PRIMARY KEY,\n  Airline TEXT,\n  Abbreviation TEXT,\n  Country TEXT\n);\nCREATE TABLE 'airports' (\n  City TEXT,\n  AirportCode TEXT PRIMARY KEY,\n  AirportName TEXT,\n  Country TEXT,\n  CountryAbbrev TEXT\n);\nCREATE TABLE 'flights' (\n  Airline INTEGER,\n  FlightNo INTEGER,\n  SourceAirport TEXT,\n  DestAirport TEXT,\n  PRIMARY KEY(Airline, FlightNo),\n  FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n  FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10","prompt":"Which airlines have at least 10 flights?"}
{"context":"CREATE TABLE 'airlines' (\n  uid INTEGER PRIMARY KEY,\n  Airline TEXT,\n  Abbreviation TEXT,\n  Country TEXT\n);\nCREATE TABLE 'airports' (\n  City TEXT,\n  AirportCode TEXT PRIMARY KEY,\n  AirportName TEXT,\n  Country TEXT,\n  CountryAbbrev TEXT\n);\nCREATE TABLE 'flights' (\n  Airline INTEGER,\n  FlightNo INTEGER,\n  SourceAirport TEXT,\n  DestAirport TEXT,\n  PRIMARY KEY(Airline, FlightNo),\n  FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n  FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200","prompt":"Find all airlines that have fewer than 200 flights."}
{"context":"CREATE TABLE 'airlines' (\n  uid INTEGER PRIMARY KEY,\n  Airline TEXT,\n  Abbreviation TEXT,\n  Country TEXT\n);\nCREATE TABLE 'airports' (\n  City TEXT,\n  AirportCode TEXT PRIMARY KEY,\n  AirportName TEXT,\n  Country TEXT,\n  CountryAbbrev TEXT\n);\nCREATE TABLE 'flights' (\n  Airline INTEGER,\n  FlightNo INTEGER,\n  SourceAirport TEXT,\n  DestAirport TEXT,\n  PRIMARY KEY(Airline, FlightNo),\n  FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n  FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200","prompt":"Which airlines have less than 200 flights?"}
{"context":"CREATE TABLE 'airlines' (\n  uid INTEGER PRIMARY KEY,\n  Airline TEXT,\n  Abbreviation TEXT,\n  Country TEXT\n);\nCREATE TABLE 'airports' (\n  City TEXT,\n  AirportCode TEXT PRIMARY KEY,\n  AirportName TEXT,\n  Country TEXT,\n  CountryAbbrev TEXT\n);\nCREATE TABLE 'flights' (\n  Airline INTEGER,\n  FlightNo INTEGER,\n  SourceAirport TEXT,\n  DestAirport TEXT,\n  PRIMARY KEY(Airline, FlightNo),\n  FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n  FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\"","prompt":"What are flight numbers of Airline \"United Airlines\"?"}
{"context":"CREATE TABLE 'airlines' (\n  uid INTEGER PRIMARY KEY,\n  Airline TEXT,\n  Abbreviation TEXT,\n  Country TEXT\n);\nCREATE TABLE 'airports' (\n  City TEXT,\n  AirportCode TEXT PRIMARY KEY,\n  AirportName TEXT,\n  Country TEXT,\n  CountryAbbrev TEXT\n);\nCREATE TABLE 'flights' (\n  Airline INTEGER,\n  FlightNo INTEGER,\n  SourceAirport TEXT,\n  DestAirport TEXT,\n  PRIMARY KEY(Airline, FlightNo),\n  FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n  FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\"","prompt":"Which flight numbers correspond to United Airlines flights?"}
{"context":"CREATE TABLE 'airlines' (\n  uid INTEGER PRIMARY KEY,\n  Airline TEXT,\n  Abbreviation TEXT,\n  Country TEXT\n);\nCREATE TABLE 'airports' (\n  City TEXT,\n  AirportCode TEXT PRIMARY KEY,\n  AirportName TEXT,\n  Country TEXT,\n  CountryAbbrev TEXT\n);\nCREATE TABLE 'flights' (\n  Airline INTEGER,\n  FlightNo INTEGER,\n  SourceAirport TEXT,\n  DestAirport TEXT,\n  PRIMARY KEY(Airline, FlightNo),\n  FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n  FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\"","prompt":"What are flight numbers of flights departing from Airport \"APG\"?"}
{"context":"CREATE TABLE 'airlines' (\n  uid INTEGER PRIMARY KEY,\n  Airline TEXT,\n  Abbreviation TEXT,\n  Country TEXT\n);\nCREATE TABLE 'airports' (\n  City TEXT,\n  AirportCode TEXT PRIMARY KEY,\n  AirportName TEXT,\n  Country TEXT,\n  CountryAbbrev TEXT\n);\nCREATE TABLE 'flights' (\n  Airline INTEGER,\n  FlightNo INTEGER,\n  SourceAirport TEXT,\n  DestAirport TEXT,\n  PRIMARY KEY(Airline, FlightNo),\n  FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n  FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\"","prompt":"Give the flight numbers of flights leaving from APG."}
{"context":"CREATE TABLE 'airlines' (\n  uid INTEGER PRIMARY KEY,\n  Airline TEXT,\n  Abbreviation TEXT,\n  Country TEXT\n);\nCREATE TABLE 'airports' (\n  City TEXT,\n  AirportCode TEXT PRIMARY KEY,\n  AirportName TEXT,\n  Country TEXT,\n  CountryAbbrev TEXT\n);\nCREATE TABLE 'flights' (\n  Airline INTEGER,\n  FlightNo INTEGER,\n  SourceAirport TEXT,\n  DestAirport TEXT,\n  PRIMARY KEY(Airline, FlightNo),\n  FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n  FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\"","prompt":"What are flight numbers of flights arriving at Airport \"APG\"?"}
{"context":"CREATE TABLE 'airlines' (\n  uid INTEGER PRIMARY KEY,\n  Airline TEXT,\n  Abbreviation TEXT,\n  Country TEXT\n);\nCREATE TABLE 'airports' (\n  City TEXT,\n  AirportCode TEXT PRIMARY KEY,\n  AirportName TEXT,\n  Country TEXT,\n  CountryAbbrev TEXT\n);\nCREATE TABLE 'flights' (\n  Airline INTEGER,\n  FlightNo INTEGER,\n  SourceAirport TEXT,\n  DestAirport TEXT,\n  PRIMARY KEY(Airline, FlightNo),\n  FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n  FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\"","prompt":"Give the flight numbers of flights landing at APG."}
{"context":"CREATE TABLE 'airlines' (\n  uid INTEGER PRIMARY KEY,\n  Airline TEXT,\n  Abbreviation TEXT,\n  Country TEXT\n);\nCREATE TABLE 'airports' (\n  City TEXT,\n  AirportCode TEXT PRIMARY KEY,\n  AirportName TEXT,\n  Country TEXT,\n  CountryAbbrev TEXT\n);\nCREATE TABLE 'flights' (\n  Airline INTEGER,\n  FlightNo INTEGER,\n  SourceAirport TEXT,\n  DestAirport TEXT,\n  PRIMARY KEY(Airline, FlightNo),\n  FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n  FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"","prompt":"What are flight numbers of flights departing from City \"Aberdeen \"?"}
{"context":"CREATE TABLE 'airlines' (\n  uid INTEGER PRIMARY KEY,\n  Airline TEXT,\n  Abbreviation TEXT,\n  Country TEXT\n);\nCREATE TABLE 'airports' (\n  City TEXT,\n  AirportCode TEXT PRIMARY KEY,\n  AirportName TEXT,\n  Country TEXT,\n  CountryAbbrev TEXT\n);\nCREATE TABLE 'flights' (\n  Airline INTEGER,\n  FlightNo INTEGER,\n  SourceAirport TEXT,\n  DestAirport TEXT,\n  PRIMARY KEY(Airline, FlightNo),\n  FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n  FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"","prompt":"Give the flight numbers of flights leaving from Aberdeen."}
{"context":"CREATE TABLE 'airlines' (\n  uid INTEGER PRIMARY KEY,\n  Airline TEXT,\n  Abbreviation TEXT,\n  Country TEXT\n);\nCREATE TABLE 'airports' (\n  City TEXT,\n  AirportCode TEXT PRIMARY KEY,\n  AirportName TEXT,\n  Country TEXT,\n  CountryAbbrev TEXT\n);\nCREATE TABLE 'flights' (\n  Airline INTEGER,\n  FlightNo INTEGER,\n  SourceAirport TEXT,\n  DestAirport TEXT,\n  PRIMARY KEY(Airline, FlightNo),\n  FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n  FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"","prompt":"What are flight numbers of flights arriving at City \"Aberdeen\"?"}
{"context":"CREATE TABLE 'airlines' (\n  uid INTEGER PRIMARY KEY,\n  Airline TEXT,\n  Abbreviation TEXT,\n  Country TEXT\n);\nCREATE TABLE 'airports' (\n  City TEXT,\n  AirportCode TEXT PRIMARY KEY,\n  AirportName TEXT,\n  Country TEXT,\n  CountryAbbrev TEXT\n);\nCREATE TABLE 'flights' (\n  Airline INTEGER,\n  FlightNo INTEGER,\n  SourceAirport TEXT,\n  DestAirport TEXT,\n  PRIMARY KEY(Airline, FlightNo),\n  FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n  FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"","prompt":"Give the flight numbers of flights arriving in Aberdeen."}
{"context":"CREATE TABLE 'airlines' (\n  uid INTEGER PRIMARY KEY,\n  Airline TEXT,\n  Abbreviation TEXT,\n  Country TEXT\n);\nCREATE TABLE 'airports' (\n  City TEXT,\n  AirportCode TEXT PRIMARY KEY,\n  AirportName TEXT,\n  Country TEXT,\n  CountryAbbrev TEXT\n);\nCREATE TABLE 'flights' (\n  Airline INTEGER,\n  FlightNo INTEGER,\n  SourceAirport TEXT,\n  DestAirport TEXT,\n  PRIMARY KEY(Airline, FlightNo),\n  FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n  FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  \"Aberdeen\" OR T2.city  =  \"Abilene\"","prompt":"Find the number of flights landing in the city of Aberdeen or Abilene."}
{"context":"CREATE TABLE 'airlines' (\n  uid INTEGER PRIMARY KEY,\n  Airline TEXT,\n  Abbreviation TEXT,\n  Country TEXT\n);\nCREATE TABLE 'airports' (\n  City TEXT,\n  AirportCode TEXT PRIMARY KEY,\n  AirportName TEXT,\n  Country TEXT,\n  CountryAbbrev TEXT\n);\nCREATE TABLE 'flights' (\n  Airline INTEGER,\n  FlightNo INTEGER,\n  SourceAirport TEXT,\n  DestAirport TEXT,\n  PRIMARY KEY(Airline, FlightNo),\n  FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n  FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  \"Aberdeen\" OR T2.city  =  \"Abilene\"","prompt":"How many flights land in Aberdeen or Abilene?"}
{"context":"CREATE TABLE 'airlines' (\n  uid INTEGER PRIMARY KEY,\n  Airline TEXT,\n  Abbreviation TEXT,\n  Country TEXT\n);\nCREATE TABLE 'airports' (\n  City TEXT,\n  AirportCode TEXT PRIMARY KEY,\n  AirportName TEXT,\n  Country TEXT,\n  CountryAbbrev TEXT\n);\nCREATE TABLE 'flights' (\n  Airline INTEGER,\n  FlightNo INTEGER,\n  SourceAirport TEXT,\n  DestAirport TEXT,\n  PRIMARY KEY(Airline, FlightNo),\n  FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n  FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)","prompt":"Find the name of airports which do not have any flight in and out."}
{"context":"CREATE TABLE 'airlines' (\n  uid INTEGER PRIMARY KEY,\n  Airline TEXT,\n  Abbreviation TEXT,\n  Country TEXT\n);\nCREATE TABLE 'airports' (\n  City TEXT,\n  AirportCode TEXT PRIMARY KEY,\n  AirportName TEXT,\n  Country TEXT,\n  CountryAbbrev TEXT\n);\nCREATE TABLE 'flights' (\n  Airline INTEGER,\n  FlightNo INTEGER,\n  SourceAirport TEXT,\n  DestAirport TEXT,\n  PRIMARY KEY(Airline, FlightNo),\n  FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),\n  FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)\n);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)","prompt":"Which airports do not have departing or arriving flights?"}
{"context":"\nPRAGMA foreign_keys = ON;\nCREATE TABLE course (\nCourse_ID int,\nStaring_Date text,\nCourse text,\nPRIMARY KEY (Course_ID)\n);\nCREATE TABLE teacher (\nTeacher_ID int,\nName text,\nAge text,\nHometown text,\nPRIMARY KEY (Teacher_ID)\n);\nINSERT INTO  course VALUES (1,5 May,Language Arts);\nINSERT INTO  course VALUES (2,6 May,Math);\nINSERT INTO  course VALUES (3,7 May,Science);\nINSERT INTO  course VALUES (4,9 May,History);\nINSERT INTO  course VALUES (5,10 May,Bible);\nINSERT INTO  course VALUES (6,11 May,Geography);\nINSERT INTO  course VALUES (7,13 May,Sports);\nINSERT INTO  course VALUES (8,14 May,French);\nINSERT INTO  course VALUES (9,15 May,Health);\nINSERT INTO  course VALUES (10,17 May,Music);\nINSERT INTO  teacher VALUES (1,Joseph Huts,32,Blackrod Urban District);\nINSERT INTO  teacher VALUES (2,Gustaaf Deloor,29,Bolton County Borough);\nINSERT INTO  teacher VALUES (3,Vicente Carretero,26,Farnworth Municipal Borough);\nINSERT INTO  teacher VALUES (4,John Deloor,33,Horwich Urban District);\nINSERT INTO  teacher VALUES (5,Kearsley Brown,45,Kearsley Urban District);\nINSERT INTO  teacher VALUES (6,Anne Walker,41,Little Lever Urban District);\nINSERT INTO  teacher VALUES (7,Lucy Wong,39,Turton Urban District);\nCREATE TABLE course_arrange (\nCourse_ID int,\nTeacher_ID int,\nGrade int,\nPRIMARY KEY (Course_ID,Teacher_ID,Grade),\nFOREIGN KEY (Course_ID) REFERENCES course(Course_ID),\nFOREIGN KEY (Teacher_ID) REFERENCES teacher(Teacher_ID)\n);\nINSERT INTO  course_arrange VALUES (2,5,1);\nINSERT INTO  course_arrange VALUES (2,3,3);\nINSERT INTO  course_arrange VALUES (3,2,5);\nINSERT INTO  course_arrange VALUES (4,6,7);\nINSERT INTO  course_arrange VALUES (5,6,1);\nINSERT INTO  course_arrange VALUES (10,7,4);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT count(*) FROM teacher","prompt":"How many teachers are there?"}
{"context":"\nPRAGMA foreign_keys = ON;\nCREATE TABLE course (\nCourse_ID int,\nStaring_Date text,\nCourse text,\nPRIMARY KEY (Course_ID)\n);\nCREATE TABLE teacher (\nTeacher_ID int,\nName text,\nAge text,\nHometown text,\nPRIMARY KEY (Teacher_ID)\n);\nINSERT INTO  course VALUES (1,5 May,Language Arts);\nINSERT INTO  course VALUES (2,6 May,Math);\nINSERT INTO  course VALUES (3,7 May,Science);\nINSERT INTO  course VALUES (4,9 May,History);\nINSERT INTO  course VALUES (5,10 May,Bible);\nINSERT INTO  course VALUES (6,11 May,Geography);\nINSERT INTO  course VALUES (7,13 May,Sports);\nINSERT INTO  course VALUES (8,14 May,French);\nINSERT INTO  course VALUES (9,15 May,Health);\nINSERT INTO  course VALUES (10,17 May,Music);\nINSERT INTO  teacher VALUES (1,Joseph Huts,32,Blackrod Urban District);\nINSERT INTO  teacher VALUES (2,Gustaaf Deloor,29,Bolton County Borough);\nINSERT INTO  teacher VALUES (3,Vicente Carretero,26,Farnworth Municipal Borough);\nINSERT INTO  teacher VALUES (4,John Deloor,33,Horwich Urban District);\nINSERT INTO  teacher VALUES (5,Kearsley Brown,45,Kearsley Urban District);\nINSERT INTO  teacher VALUES (6,Anne Walker,41,Little Lever Urban District);\nINSERT INTO  teacher VALUES (7,Lucy Wong,39,Turton Urban District);\nCREATE TABLE course_arrange (\nCourse_ID int,\nTeacher_ID int,\nGrade int,\nPRIMARY KEY (Course_ID,Teacher_ID,Grade),\nFOREIGN KEY (Course_ID) REFERENCES course(Course_ID),\nFOREIGN KEY (Teacher_ID) REFERENCES teacher(Teacher_ID)\n);\nINSERT INTO  course_arrange VALUES (2,5,1);\nINSERT INTO  course_arrange VALUES (2,3,3);\nINSERT INTO  course_arrange VALUES (3,2,5);\nINSERT INTO  course_arrange VALUES (4,6,7);\nINSERT INTO  course_arrange VALUES (5,6,1);\nINSERT INTO  course_arrange VALUES (10,7,4);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT count(*) FROM teacher","prompt":"What is the total count of teachers?"}
{"context":"\nPRAGMA foreign_keys = ON;\nCREATE TABLE course (\nCourse_ID int,\nStaring_Date text,\nCourse text,\nPRIMARY KEY (Course_ID)\n);\nCREATE TABLE teacher (\nTeacher_ID int,\nName text,\nAge text,\nHometown text,\nPRIMARY KEY (Teacher_ID)\n);\nINSERT INTO  course VALUES (1,5 May,Language Arts);\nINSERT INTO  course VALUES (2,6 May,Math);\nINSERT INTO  course VALUES (3,7 May,Science);\nINSERT INTO  course VALUES (4,9 May,History);\nINSERT INTO  course VALUES (5,10 May,Bible);\nINSERT INTO  course VALUES (6,11 May,Geography);\nINSERT INTO  course VALUES (7,13 May,Sports);\nINSERT INTO  course VALUES (8,14 May,French);\nINSERT INTO  course VALUES (9,15 May,Health);\nINSERT INTO  course VALUES (10,17 May,Music);\nINSERT INTO  teacher VALUES (1,Joseph Huts,32,Blackrod Urban District);\nINSERT INTO  teacher VALUES (2,Gustaaf Deloor,29,Bolton County Borough);\nINSERT INTO  teacher VALUES (3,Vicente Carretero,26,Farnworth Municipal Borough);\nINSERT INTO  teacher VALUES (4,John Deloor,33,Horwich Urban District);\nINSERT INTO  teacher VALUES (5,Kearsley Brown,45,Kearsley Urban District);\nINSERT INTO  teacher VALUES (6,Anne Walker,41,Little Lever Urban District);\nINSERT INTO  teacher VALUES (7,Lucy Wong,39,Turton Urban District);\nCREATE TABLE course_arrange (\nCourse_ID int,\nTeacher_ID int,\nGrade int,\nPRIMARY KEY (Course_ID,Teacher_ID,Grade),\nFOREIGN KEY (Course_ID) REFERENCES course(Course_ID),\nFOREIGN KEY (Teacher_ID) REFERENCES teacher(Teacher_ID)\n);\nINSERT INTO  course_arrange VALUES (2,5,1);\nINSERT INTO  course_arrange VALUES (2,3,3);\nINSERT INTO  course_arrange VALUES (3,2,5);\nINSERT INTO  course_arrange VALUES (4,6,7);\nINSERT INTO  course_arrange VALUES (5,6,1);\nINSERT INTO  course_arrange VALUES (10,7,4);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT Name FROM teacher ORDER BY Age ASC","prompt":"List the names of teachers in ascending order of age."}
{"context":"\nPRAGMA foreign_keys = ON;\nCREATE TABLE course (\nCourse_ID int,\nStaring_Date text,\nCourse text,\nPRIMARY KEY (Course_ID)\n);\nCREATE TABLE teacher (\nTeacher_ID int,\nName text,\nAge text,\nHometown text,\nPRIMARY KEY (Teacher_ID)\n);\nINSERT INTO  course VALUES (1,5 May,Language Arts);\nINSERT INTO  course VALUES (2,6 May,Math);\nINSERT INTO  course VALUES (3,7 May,Science);\nINSERT INTO  course VALUES (4,9 May,History);\nINSERT INTO  course VALUES (5,10 May,Bible);\nINSERT INTO  course VALUES (6,11 May,Geography);\nINSERT INTO  course VALUES (7,13 May,Sports);\nINSERT INTO  course VALUES (8,14 May,French);\nINSERT INTO  course VALUES (9,15 May,Health);\nINSERT INTO  course VALUES (10,17 May,Music);\nINSERT INTO  teacher VALUES (1,Joseph Huts,32,Blackrod Urban District);\nINSERT INTO  teacher VALUES (2,Gustaaf Deloor,29,Bolton County Borough);\nINSERT INTO  teacher VALUES (3,Vicente Carretero,26,Farnworth Municipal Borough);\nINSERT INTO  teacher VALUES (4,John Deloor,33,Horwich Urban District);\nINSERT INTO  teacher VALUES (5,Kearsley Brown,45,Kearsley Urban District);\nINSERT INTO  teacher VALUES (6,Anne Walker,41,Little Lever Urban District);\nINSERT INTO  teacher VALUES (7,Lucy Wong,39,Turton Urban District);\nCREATE TABLE course_arrange (\nCourse_ID int,\nTeacher_ID int,\nGrade int,\nPRIMARY KEY (Course_ID,Teacher_ID,Grade),\nFOREIGN KEY (Course_ID) REFERENCES course(Course_ID),\nFOREIGN KEY (Teacher_ID) REFERENCES teacher(Teacher_ID)\n);\nINSERT INTO  course_arrange VALUES (2,5,1);\nINSERT INTO  course_arrange VALUES (2,3,3);\nINSERT INTO  course_arrange VALUES (3,2,5);\nINSERT INTO  course_arrange VALUES (4,6,7);\nINSERT INTO  course_arrange VALUES (5,6,1);\nINSERT INTO  course_arrange VALUES (10,7,4);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT Name FROM teacher ORDER BY Age ASC","prompt":"What are the names of the teachers ordered by ascending age?"}
{"context":"\nPRAGMA foreign_keys = ON;\nCREATE TABLE course (\nCourse_ID int,\nStaring_Date text,\nCourse text,\nPRIMARY KEY (Course_ID)\n);\nCREATE TABLE teacher (\nTeacher_ID int,\nName text,\nAge text,\nHometown text,\nPRIMARY KEY (Teacher_ID)\n);\nINSERT INTO  course VALUES (1,5 May,Language Arts);\nINSERT INTO  course VALUES (2,6 May,Math);\nINSERT INTO  course VALUES (3,7 May,Science);\nINSERT INTO  course VALUES (4,9 May,History);\nINSERT INTO  course VALUES (5,10 May,Bible);\nINSERT INTO  course VALUES (6,11 May,Geography);\nINSERT INTO  course VALUES (7,13 May,Sports);\nINSERT INTO  course VALUES (8,14 May,French);\nINSERT INTO  course VALUES (9,15 May,Health);\nINSERT INTO  course VALUES (10,17 May,Music);\nINSERT INTO  teacher VALUES (1,Joseph Huts,32,Blackrod Urban District);\nINSERT INTO  teacher VALUES (2,Gustaaf Deloor,29,Bolton County Borough);\nINSERT INTO  teacher VALUES (3,Vicente Carretero,26,Farnworth Municipal Borough);\nINSERT INTO  teacher VALUES (4,John Deloor,33,Horwich Urban District);\nINSERT INTO  teacher VALUES (5,Kearsley Brown,45,Kearsley Urban District);\nINSERT INTO  teacher VALUES (6,Anne Walker,41,Little Lever Urban District);\nINSERT INTO  teacher VALUES (7,Lucy Wong,39,Turton Urban District);\nCREATE TABLE course_arrange (\nCourse_ID int,\nTeacher_ID int,\nGrade int,\nPRIMARY KEY (Course_ID,Teacher_ID,Grade),\nFOREIGN KEY (Course_ID) REFERENCES course(Course_ID),\nFOREIGN KEY (Teacher_ID) REFERENCES teacher(Teacher_ID)\n);\nINSERT INTO  course_arrange VALUES (2,5,1);\nINSERT INTO  course_arrange VALUES (2,3,3);\nINSERT INTO  course_arrange VALUES (3,2,5);\nINSERT INTO  course_arrange VALUES (4,6,7);\nINSERT INTO  course_arrange VALUES (5,6,1);\nINSERT INTO  course_arrange VALUES (10,7,4);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT Age ,  Hometown FROM teacher","prompt":"What are the age and hometown of teachers?"}
{"context":"\nPRAGMA foreign_keys = ON;\nCREATE TABLE course (\nCourse_ID int,\nStaring_Date text,\nCourse text,\nPRIMARY KEY (Course_ID)\n);\nCREATE TABLE teacher (\nTeacher_ID int,\nName text,\nAge text,\nHometown text,\nPRIMARY KEY (Teacher_ID)\n);\nINSERT INTO  course VALUES (1,5 May,Language Arts);\nINSERT INTO  course VALUES (2,6 May,Math);\nINSERT INTO  course VALUES (3,7 May,Science);\nINSERT INTO  course VALUES (4,9 May,History);\nINSERT INTO  course VALUES (5,10 May,Bible);\nINSERT INTO  course VALUES (6,11 May,Geography);\nINSERT INTO  course VALUES (7,13 May,Sports);\nINSERT INTO  course VALUES (8,14 May,French);\nINSERT INTO  course VALUES (9,15 May,Health);\nINSERT INTO  course VALUES (10,17 May,Music);\nINSERT INTO  teacher VALUES (1,Joseph Huts,32,Blackrod Urban District);\nINSERT INTO  teacher VALUES (2,Gustaaf Deloor,29,Bolton County Borough);\nINSERT INTO  teacher VALUES (3,Vicente Carretero,26,Farnworth Municipal Borough);\nINSERT INTO  teacher VALUES (4,John Deloor,33,Horwich Urban District);\nINSERT INTO  teacher VALUES (5,Kearsley Brown,45,Kearsley Urban District);\nINSERT INTO  teacher VALUES (6,Anne Walker,41,Little Lever Urban District);\nINSERT INTO  teacher VALUES (7,Lucy Wong,39,Turton Urban District);\nCREATE TABLE course_arrange (\nCourse_ID int,\nTeacher_ID int,\nGrade int,\nPRIMARY KEY (Course_ID,Teacher_ID,Grade),\nFOREIGN KEY (Course_ID) REFERENCES course(Course_ID),\nFOREIGN KEY (Teacher_ID) REFERENCES teacher(Teacher_ID)\n);\nINSERT INTO  course_arrange VALUES (2,5,1);\nINSERT INTO  course_arrange VALUES (2,3,3);\nINSERT INTO  course_arrange VALUES (3,2,5);\nINSERT INTO  course_arrange VALUES (4,6,7);\nINSERT INTO  course_arrange VALUES (5,6,1);\nINSERT INTO  course_arrange VALUES (10,7,4);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT Age ,  Hometown FROM teacher","prompt":"What is the age and hometown of every teacher?"}
{"context":"\nPRAGMA foreign_keys = ON;\nCREATE TABLE course (\nCourse_ID int,\nStaring_Date text,\nCourse text,\nPRIMARY KEY (Course_ID)\n);\nCREATE TABLE teacher (\nTeacher_ID int,\nName text,\nAge text,\nHometown text,\nPRIMARY KEY (Teacher_ID)\n);\nINSERT INTO  course VALUES (1,5 May,Language Arts);\nINSERT INTO  course VALUES (2,6 May,Math);\nINSERT INTO  course VALUES (3,7 May,Science);\nINSERT INTO  course VALUES (4,9 May,History);\nINSERT INTO  course VALUES (5,10 May,Bible);\nINSERT INTO  course VALUES (6,11 May,Geography);\nINSERT INTO  course VALUES (7,13 May,Sports);\nINSERT INTO  course VALUES (8,14 May,French);\nINSERT INTO  course VALUES (9,15 May,Health);\nINSERT INTO  course VALUES (10,17 May,Music);\nINSERT INTO  teacher VALUES (1,Joseph Huts,32,Blackrod Urban District);\nINSERT INTO  teacher VALUES (2,Gustaaf Deloor,29,Bolton County Borough);\nINSERT INTO  teacher VALUES (3,Vicente Carretero,26,Farnworth Municipal Borough);\nINSERT INTO  teacher VALUES (4,John Deloor,33,Horwich Urban District);\nINSERT INTO  teacher VALUES (5,Kearsley Brown,45,Kearsley Urban District);\nINSERT INTO  teacher VALUES (6,Anne Walker,41,Little Lever Urban District);\nINSERT INTO  teacher VALUES (7,Lucy Wong,39,Turton Urban District);\nCREATE TABLE course_arrange (\nCourse_ID int,\nTeacher_ID int,\nGrade int,\nPRIMARY KEY (Course_ID,Teacher_ID,Grade),\nFOREIGN KEY (Course_ID) REFERENCES course(Course_ID),\nFOREIGN KEY (Teacher_ID) REFERENCES teacher(Teacher_ID)\n);\nINSERT INTO  course_arrange VALUES (2,5,1);\nINSERT INTO  course_arrange VALUES (2,3,3);\nINSERT INTO  course_arrange VALUES (3,2,5);\nINSERT INTO  course_arrange VALUES (4,6,7);\nINSERT INTO  course_arrange VALUES (5,6,1);\nINSERT INTO  course_arrange VALUES (10,7,4);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"select name from teacher where hometown != \"little lever urban district\"","prompt":"List the name of teachers whose hometown is not `` Little Lever Urban District '' ."}
{"context":"\nPRAGMA foreign_keys = ON;\nCREATE TABLE course (\nCourse_ID int,\nStaring_Date text,\nCourse text,\nPRIMARY KEY (Course_ID)\n);\nCREATE TABLE teacher (\nTeacher_ID int,\nName text,\nAge text,\nHometown text,\nPRIMARY KEY (Teacher_ID)\n);\nINSERT INTO  course VALUES (1,5 May,Language Arts);\nINSERT INTO  course VALUES (2,6 May,Math);\nINSERT INTO  course VALUES (3,7 May,Science);\nINSERT INTO  course VALUES (4,9 May,History);\nINSERT INTO  course VALUES (5,10 May,Bible);\nINSERT INTO  course VALUES (6,11 May,Geography);\nINSERT INTO  course VALUES (7,13 May,Sports);\nINSERT INTO  course VALUES (8,14 May,French);\nINSERT INTO  course VALUES (9,15 May,Health);\nINSERT INTO  course VALUES (10,17 May,Music);\nINSERT INTO  teacher VALUES (1,Joseph Huts,32,Blackrod Urban District);\nINSERT INTO  teacher VALUES (2,Gustaaf Deloor,29,Bolton County Borough);\nINSERT INTO  teacher VALUES (3,Vicente Carretero,26,Farnworth Municipal Borough);\nINSERT INTO  teacher VALUES (4,John Deloor,33,Horwich Urban District);\nINSERT INTO  teacher VALUES (5,Kearsley Brown,45,Kearsley Urban District);\nINSERT INTO  teacher VALUES (6,Anne Walker,41,Little Lever Urban District);\nINSERT INTO  teacher VALUES (7,Lucy Wong,39,Turton Urban District);\nCREATE TABLE course_arrange (\nCourse_ID int,\nTeacher_ID int,\nGrade int,\nPRIMARY KEY (Course_ID,Teacher_ID,Grade),\nFOREIGN KEY (Course_ID) REFERENCES course(Course_ID),\nFOREIGN KEY (Teacher_ID) REFERENCES teacher(Teacher_ID)\n);\nINSERT INTO  course_arrange VALUES (2,5,1);\nINSERT INTO  course_arrange VALUES (2,3,3);\nINSERT INTO  course_arrange VALUES (3,2,5);\nINSERT INTO  course_arrange VALUES (4,6,7);\nINSERT INTO  course_arrange VALUES (5,6,1);\nINSERT INTO  course_arrange VALUES (10,7,4);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"select name from teacher where hometown != \"little lever urban district\"","prompt":"What are the names of the teachers whose hometown is not `` Little Lever Urban District '' ?"}
{"context":"\nPRAGMA foreign_keys = ON;\nCREATE TABLE course (\nCourse_ID int,\nStaring_Date text,\nCourse text,\nPRIMARY KEY (Course_ID)\n);\nCREATE TABLE teacher (\nTeacher_ID int,\nName text,\nAge text,\nHometown text,\nPRIMARY KEY (Teacher_ID)\n);\nINSERT INTO  course VALUES (1,5 May,Language Arts);\nINSERT INTO  course VALUES (2,6 May,Math);\nINSERT INTO  course VALUES (3,7 May,Science);\nINSERT INTO  course VALUES (4,9 May,History);\nINSERT INTO  course VALUES (5,10 May,Bible);\nINSERT INTO  course VALUES (6,11 May,Geography);\nINSERT INTO  course VALUES (7,13 May,Sports);\nINSERT INTO  course VALUES (8,14 May,French);\nINSERT INTO  course VALUES (9,15 May,Health);\nINSERT INTO  course VALUES (10,17 May,Music);\nINSERT INTO  teacher VALUES (1,Joseph Huts,32,Blackrod Urban District);\nINSERT INTO  teacher VALUES (2,Gustaaf Deloor,29,Bolton County Borough);\nINSERT INTO  teacher VALUES (3,Vicente Carretero,26,Farnworth Municipal Borough);\nINSERT INTO  teacher VALUES (4,John Deloor,33,Horwich Urban District);\nINSERT INTO  teacher VALUES (5,Kearsley Brown,45,Kearsley Urban District);\nINSERT INTO  teacher VALUES (6,Anne Walker,41,Little Lever Urban District);\nINSERT INTO  teacher VALUES (7,Lucy Wong,39,Turton Urban District);\nCREATE TABLE course_arrange (\nCourse_ID int,\nTeacher_ID int,\nGrade int,\nPRIMARY KEY (Course_ID,Teacher_ID,Grade),\nFOREIGN KEY (Course_ID) REFERENCES course(Course_ID),\nFOREIGN KEY (Teacher_ID) REFERENCES teacher(Teacher_ID)\n);\nINSERT INTO  course_arrange VALUES (2,5,1);\nINSERT INTO  course_arrange VALUES (2,3,3);\nINSERT INTO  course_arrange VALUES (3,2,5);\nINSERT INTO  course_arrange VALUES (4,6,7);\nINSERT INTO  course_arrange VALUES (5,6,1);\nINSERT INTO  course_arrange VALUES (10,7,4);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  33","prompt":"Show the name of teachers aged either 32 or 33?"}
{"context":"\nPRAGMA foreign_keys = ON;\nCREATE TABLE course (\nCourse_ID int,\nStaring_Date text,\nCourse text,\nPRIMARY KEY (Course_ID)\n);\nCREATE TABLE teacher (\nTeacher_ID int,\nName text,\nAge text,\nHometown text,\nPRIMARY KEY (Teacher_ID)\n);\nINSERT INTO  course VALUES (1,5 May,Language Arts);\nINSERT INTO  course VALUES (2,6 May,Math);\nINSERT INTO  course VALUES (3,7 May,Science);\nINSERT INTO  course VALUES (4,9 May,History);\nINSERT INTO  course VALUES (5,10 May,Bible);\nINSERT INTO  course VALUES (6,11 May,Geography);\nINSERT INTO  course VALUES (7,13 May,Sports);\nINSERT INTO  course VALUES (8,14 May,French);\nINSERT INTO  course VALUES (9,15 May,Health);\nINSERT INTO  course VALUES (10,17 May,Music);\nINSERT INTO  teacher VALUES (1,Joseph Huts,32,Blackrod Urban District);\nINSERT INTO  teacher VALUES (2,Gustaaf Deloor,29,Bolton County Borough);\nINSERT INTO  teacher VALUES (3,Vicente Carretero,26,Farnworth Municipal Borough);\nINSERT INTO  teacher VALUES (4,John Deloor,33,Horwich Urban District);\nINSERT INTO  teacher VALUES (5,Kearsley Brown,45,Kearsley Urban District);\nINSERT INTO  teacher VALUES (6,Anne Walker,41,Little Lever Urban District);\nINSERT INTO  teacher VALUES (7,Lucy Wong,39,Turton Urban District);\nCREATE TABLE course_arrange (\nCourse_ID int,\nTeacher_ID int,\nGrade int,\nPRIMARY KEY (Course_ID,Teacher_ID,Grade),\nFOREIGN KEY (Course_ID) REFERENCES course(Course_ID),\nFOREIGN KEY (Teacher_ID) REFERENCES teacher(Teacher_ID)\n);\nINSERT INTO  course_arrange VALUES (2,5,1);\nINSERT INTO  course_arrange VALUES (2,3,3);\nINSERT INTO  course_arrange VALUES (3,2,5);\nINSERT INTO  course_arrange VALUES (4,6,7);\nINSERT INTO  course_arrange VALUES (5,6,1);\nINSERT INTO  course_arrange VALUES (10,7,4);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  33","prompt":"What are the names of the teachers who are aged either 32 or 33?"}
{"context":"\nPRAGMA foreign_keys = ON;\nCREATE TABLE course (\nCourse_ID int,\nStaring_Date text,\nCourse text,\nPRIMARY KEY (Course_ID)\n);\nCREATE TABLE teacher (\nTeacher_ID int,\nName text,\nAge text,\nHometown text,\nPRIMARY KEY (Teacher_ID)\n);\nINSERT INTO  course VALUES (1,5 May,Language Arts);\nINSERT INTO  course VALUES (2,6 May,Math);\nINSERT INTO  course VALUES (3,7 May,Science);\nINSERT INTO  course VALUES (4,9 May,History);\nINSERT INTO  course VALUES (5,10 May,Bible);\nINSERT INTO  course VALUES (6,11 May,Geography);\nINSERT INTO  course VALUES (7,13 May,Sports);\nINSERT INTO  course VALUES (8,14 May,French);\nINSERT INTO  course VALUES (9,15 May,Health);\nINSERT INTO  course VALUES (10,17 May,Music);\nINSERT INTO  teacher VALUES (1,Joseph Huts,32,Blackrod Urban District);\nINSERT INTO  teacher VALUES (2,Gustaaf Deloor,29,Bolton County Borough);\nINSERT INTO  teacher VALUES (3,Vicente Carretero,26,Farnworth Municipal Borough);\nINSERT INTO  teacher VALUES (4,John Deloor,33,Horwich Urban District);\nINSERT INTO  teacher VALUES (5,Kearsley Brown,45,Kearsley Urban District);\nINSERT INTO  teacher VALUES (6,Anne Walker,41,Little Lever Urban District);\nINSERT INTO  teacher VALUES (7,Lucy Wong,39,Turton Urban District);\nCREATE TABLE course_arrange (\nCourse_ID int,\nTeacher_ID int,\nGrade int,\nPRIMARY KEY (Course_ID,Teacher_ID,Grade),\nFOREIGN KEY (Course_ID) REFERENCES course(Course_ID),\nFOREIGN KEY (Teacher_ID) REFERENCES teacher(Teacher_ID)\n);\nINSERT INTO  course_arrange VALUES (2,5,1);\nINSERT INTO  course_arrange VALUES (2,3,3);\nINSERT INTO  course_arrange VALUES (3,2,5);\nINSERT INTO  course_arrange VALUES (4,6,7);\nINSERT INTO  course_arrange VALUES (5,6,1);\nINSERT INTO  course_arrange VALUES (10,7,4);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1","prompt":"What is the hometown of the youngest teacher?"}
{"context":"\nPRAGMA foreign_keys = ON;\nCREATE TABLE course (\nCourse_ID int,\nStaring_Date text,\nCourse text,\nPRIMARY KEY (Course_ID)\n);\nCREATE TABLE teacher (\nTeacher_ID int,\nName text,\nAge text,\nHometown text,\nPRIMARY KEY (Teacher_ID)\n);\nINSERT INTO  course VALUES (1,5 May,Language Arts);\nINSERT INTO  course VALUES (2,6 May,Math);\nINSERT INTO  course VALUES (3,7 May,Science);\nINSERT INTO  course VALUES (4,9 May,History);\nINSERT INTO  course VALUES (5,10 May,Bible);\nINSERT INTO  course VALUES (6,11 May,Geography);\nINSERT INTO  course VALUES (7,13 May,Sports);\nINSERT INTO  course VALUES (8,14 May,French);\nINSERT INTO  course VALUES (9,15 May,Health);\nINSERT INTO  course VALUES (10,17 May,Music);\nINSERT INTO  teacher VALUES (1,Joseph Huts,32,Blackrod Urban District);\nINSERT INTO  teacher VALUES (2,Gustaaf Deloor,29,Bolton County Borough);\nINSERT INTO  teacher VALUES (3,Vicente Carretero,26,Farnworth Municipal Borough);\nINSERT INTO  teacher VALUES (4,John Deloor,33,Horwich Urban District);\nINSERT INTO  teacher VALUES (5,Kearsley Brown,45,Kearsley Urban District);\nINSERT INTO  teacher VALUES (6,Anne Walker,41,Little Lever Urban District);\nINSERT INTO  teacher VALUES (7,Lucy Wong,39,Turton Urban District);\nCREATE TABLE course_arrange (\nCourse_ID int,\nTeacher_ID int,\nGrade int,\nPRIMARY KEY (Course_ID,Teacher_ID,Grade),\nFOREIGN KEY (Course_ID) REFERENCES course(Course_ID),\nFOREIGN KEY (Teacher_ID) REFERENCES teacher(Teacher_ID)\n);\nINSERT INTO  course_arrange VALUES (2,5,1);\nINSERT INTO  course_arrange VALUES (2,3,3);\nINSERT INTO  course_arrange VALUES (3,2,5);\nINSERT INTO  course_arrange VALUES (4,6,7);\nINSERT INTO  course_arrange VALUES (5,6,1);\nINSERT INTO  course_arrange VALUES (10,7,4);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1","prompt":"Where is the youngest teacher from?"}
{"context":"\nPRAGMA foreign_keys = ON;\nCREATE TABLE course (\nCourse_ID int,\nStaring_Date text,\nCourse text,\nPRIMARY KEY (Course_ID)\n);\nCREATE TABLE teacher (\nTeacher_ID int,\nName text,\nAge text,\nHometown text,\nPRIMARY KEY (Teacher_ID)\n);\nINSERT INTO  course VALUES (1,5 May,Language Arts);\nINSERT INTO  course VALUES (2,6 May,Math);\nINSERT INTO  course VALUES (3,7 May,Science);\nINSERT INTO  course VALUES (4,9 May,History);\nINSERT INTO  course VALUES (5,10 May,Bible);\nINSERT INTO  course VALUES (6,11 May,Geography);\nINSERT INTO  course VALUES (7,13 May,Sports);\nINSERT INTO  course VALUES (8,14 May,French);\nINSERT INTO  course VALUES (9,15 May,Health);\nINSERT INTO  course VALUES (10,17 May,Music);\nINSERT INTO  teacher VALUES (1,Joseph Huts,32,Blackrod Urban District);\nINSERT INTO  teacher VALUES (2,Gustaaf Deloor,29,Bolton County Borough);\nINSERT INTO  teacher VALUES (3,Vicente Carretero,26,Farnworth Municipal Borough);\nINSERT INTO  teacher VALUES (4,John Deloor,33,Horwich Urban District);\nINSERT INTO  teacher VALUES (5,Kearsley Brown,45,Kearsley Urban District);\nINSERT INTO  teacher VALUES (6,Anne Walker,41,Little Lever Urban District);\nINSERT INTO  teacher VALUES (7,Lucy Wong,39,Turton Urban District);\nCREATE TABLE course_arrange (\nCourse_ID int,\nTeacher_ID int,\nGrade int,\nPRIMARY KEY (Course_ID,Teacher_ID,Grade),\nFOREIGN KEY (Course_ID) REFERENCES course(Course_ID),\nFOREIGN KEY (Teacher_ID) REFERENCES teacher(Teacher_ID)\n);\nINSERT INTO  course_arrange VALUES (2,5,1);\nINSERT INTO  course_arrange VALUES (2,3,3);\nINSERT INTO  course_arrange VALUES (3,2,5);\nINSERT INTO  course_arrange VALUES (4,6,7);\nINSERT INTO  course_arrange VALUES (5,6,1);\nINSERT INTO  course_arrange VALUES (10,7,4);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT Hometown ,  COUNT(*) FROM teacher GROUP BY Hometown","prompt":"Show different hometown of teachers and the number of teachers from each hometown."}
{"context":"\nPRAGMA foreign_keys = ON;\nCREATE TABLE course (\nCourse_ID int,\nStaring_Date text,\nCourse text,\nPRIMARY KEY (Course_ID)\n);\nCREATE TABLE teacher (\nTeacher_ID int,\nName text,\nAge text,\nHometown text,\nPRIMARY KEY (Teacher_ID)\n);\nINSERT INTO  course VALUES (1,5 May,Language Arts);\nINSERT INTO  course VALUES (2,6 May,Math);\nINSERT INTO  course VALUES (3,7 May,Science);\nINSERT INTO  course VALUES (4,9 May,History);\nINSERT INTO  course VALUES (5,10 May,Bible);\nINSERT INTO  course VALUES (6,11 May,Geography);\nINSERT INTO  course VALUES (7,13 May,Sports);\nINSERT INTO  course VALUES (8,14 May,French);\nINSERT INTO  course VALUES (9,15 May,Health);\nINSERT INTO  course VALUES (10,17 May,Music);\nINSERT INTO  teacher VALUES (1,Joseph Huts,32,Blackrod Urban District);\nINSERT INTO  teacher VALUES (2,Gustaaf Deloor,29,Bolton County Borough);\nINSERT INTO  teacher VALUES (3,Vicente Carretero,26,Farnworth Municipal Borough);\nINSERT INTO  teacher VALUES (4,John Deloor,33,Horwich Urban District);\nINSERT INTO  teacher VALUES (5,Kearsley Brown,45,Kearsley Urban District);\nINSERT INTO  teacher VALUES (6,Anne Walker,41,Little Lever Urban District);\nINSERT INTO  teacher VALUES (7,Lucy Wong,39,Turton Urban District);\nCREATE TABLE course_arrange (\nCourse_ID int,\nTeacher_ID int,\nGrade int,\nPRIMARY KEY (Course_ID,Teacher_ID,Grade),\nFOREIGN KEY (Course_ID) REFERENCES course(Course_ID),\nFOREIGN KEY (Teacher_ID) REFERENCES teacher(Teacher_ID)\n);\nINSERT INTO  course_arrange VALUES (2,5,1);\nINSERT INTO  course_arrange VALUES (2,3,3);\nINSERT INTO  course_arrange VALUES (3,2,5);\nINSERT INTO  course_arrange VALUES (4,6,7);\nINSERT INTO  course_arrange VALUES (5,6,1);\nINSERT INTO  course_arrange VALUES (10,7,4);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT Hometown ,  COUNT(*) FROM teacher GROUP BY Hometown","prompt":"For each hometown, how many teachers are there?"}
{"context":"\nPRAGMA foreign_keys = ON;\nCREATE TABLE course (\nCourse_ID int,\nStaring_Date text,\nCourse text,\nPRIMARY KEY (Course_ID)\n);\nCREATE TABLE teacher (\nTeacher_ID int,\nName text,\nAge text,\nHometown text,\nPRIMARY KEY (Teacher_ID)\n);\nINSERT INTO  course VALUES (1,5 May,Language Arts);\nINSERT INTO  course VALUES (2,6 May,Math);\nINSERT INTO  course VALUES (3,7 May,Science);\nINSERT INTO  course VALUES (4,9 May,History);\nINSERT INTO  course VALUES (5,10 May,Bible);\nINSERT INTO  course VALUES (6,11 May,Geography);\nINSERT INTO  course VALUES (7,13 May,Sports);\nINSERT INTO  course VALUES (8,14 May,French);\nINSERT INTO  course VALUES (9,15 May,Health);\nINSERT INTO  course VALUES (10,17 May,Music);\nINSERT INTO  teacher VALUES (1,Joseph Huts,32,Blackrod Urban District);\nINSERT INTO  teacher VALUES (2,Gustaaf Deloor,29,Bolton County Borough);\nINSERT INTO  teacher VALUES (3,Vicente Carretero,26,Farnworth Municipal Borough);\nINSERT INTO  teacher VALUES (4,John Deloor,33,Horwich Urban District);\nINSERT INTO  teacher VALUES (5,Kearsley Brown,45,Kearsley Urban District);\nINSERT INTO  teacher VALUES (6,Anne Walker,41,Little Lever Urban District);\nINSERT INTO  teacher VALUES (7,Lucy Wong,39,Turton Urban District);\nCREATE TABLE course_arrange (\nCourse_ID int,\nTeacher_ID int,\nGrade int,\nPRIMARY KEY (Course_ID,Teacher_ID,Grade),\nFOREIGN KEY (Course_ID) REFERENCES course(Course_ID),\nFOREIGN KEY (Teacher_ID) REFERENCES teacher(Teacher_ID)\n);\nINSERT INTO  course_arrange VALUES (2,5,1);\nINSERT INTO  course_arrange VALUES (2,3,3);\nINSERT INTO  course_arrange VALUES (3,2,5);\nINSERT INTO  course_arrange VALUES (4,6,7);\nINSERT INTO  course_arrange VALUES (5,6,1);\nINSERT INTO  course_arrange VALUES (10,7,4);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1","prompt":"List the most common hometown of teachers."}
{"context":"\nPRAGMA foreign_keys = ON;\nCREATE TABLE course (\nCourse_ID int,\nStaring_Date text,\nCourse text,\nPRIMARY KEY (Course_ID)\n);\nCREATE TABLE teacher (\nTeacher_ID int,\nName text,\nAge text,\nHometown text,\nPRIMARY KEY (Teacher_ID)\n);\nINSERT INTO  course VALUES (1,5 May,Language Arts);\nINSERT INTO  course VALUES (2,6 May,Math);\nINSERT INTO  course VALUES (3,7 May,Science);\nINSERT INTO  course VALUES (4,9 May,History);\nINSERT INTO  course VALUES (5,10 May,Bible);\nINSERT INTO  course VALUES (6,11 May,Geography);\nINSERT INTO  course VALUES (7,13 May,Sports);\nINSERT INTO  course VALUES (8,14 May,French);\nINSERT INTO  course VALUES (9,15 May,Health);\nINSERT INTO  course VALUES (10,17 May,Music);\nINSERT INTO  teacher VALUES (1,Joseph Huts,32,Blackrod Urban District);\nINSERT INTO  teacher VALUES (2,Gustaaf Deloor,29,Bolton County Borough);\nINSERT INTO  teacher VALUES (3,Vicente Carretero,26,Farnworth Municipal Borough);\nINSERT INTO  teacher VALUES (4,John Deloor,33,Horwich Urban District);\nINSERT INTO  teacher VALUES (5,Kearsley Brown,45,Kearsley Urban District);\nINSERT INTO  teacher VALUES (6,Anne Walker,41,Little Lever Urban District);\nINSERT INTO  teacher VALUES (7,Lucy Wong,39,Turton Urban District);\nCREATE TABLE course_arrange (\nCourse_ID int,\nTeacher_ID int,\nGrade int,\nPRIMARY KEY (Course_ID,Teacher_ID,Grade),\nFOREIGN KEY (Course_ID) REFERENCES course(Course_ID),\nFOREIGN KEY (Teacher_ID) REFERENCES teacher(Teacher_ID)\n);\nINSERT INTO  course_arrange VALUES (2,5,1);\nINSERT INTO  course_arrange VALUES (2,3,3);\nINSERT INTO  course_arrange VALUES (3,2,5);\nINSERT INTO  course_arrange VALUES (4,6,7);\nINSERT INTO  course_arrange VALUES (5,6,1);\nINSERT INTO  course_arrange VALUES (10,7,4);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1","prompt":"What is the most commmon hometowns for teachers?"}
{"context":"\nPRAGMA foreign_keys = ON;\nCREATE TABLE course (\nCourse_ID int,\nStaring_Date text,\nCourse text,\nPRIMARY KEY (Course_ID)\n);\nCREATE TABLE teacher (\nTeacher_ID int,\nName text,\nAge text,\nHometown text,\nPRIMARY KEY (Teacher_ID)\n);\nINSERT INTO  course VALUES (1,5 May,Language Arts);\nINSERT INTO  course VALUES (2,6 May,Math);\nINSERT INTO  course VALUES (3,7 May,Science);\nINSERT INTO  course VALUES (4,9 May,History);\nINSERT INTO  course VALUES (5,10 May,Bible);\nINSERT INTO  course VALUES (6,11 May,Geography);\nINSERT INTO  course VALUES (7,13 May,Sports);\nINSERT INTO  course VALUES (8,14 May,French);\nINSERT INTO  course VALUES (9,15 May,Health);\nINSERT INTO  course VALUES (10,17 May,Music);\nINSERT INTO  teacher VALUES (1,Joseph Huts,32,Blackrod Urban District);\nINSERT INTO  teacher VALUES (2,Gustaaf Deloor,29,Bolton County Borough);\nINSERT INTO  teacher VALUES (3,Vicente Carretero,26,Farnworth Municipal Borough);\nINSERT INTO  teacher VALUES (4,John Deloor,33,Horwich Urban District);\nINSERT INTO  teacher VALUES (5,Kearsley Brown,45,Kearsley Urban District);\nINSERT INTO  teacher VALUES (6,Anne Walker,41,Little Lever Urban District);\nINSERT INTO  teacher VALUES (7,Lucy Wong,39,Turton Urban District);\nCREATE TABLE course_arrange (\nCourse_ID int,\nTeacher_ID int,\nGrade int,\nPRIMARY KEY (Course_ID,Teacher_ID,Grade),\nFOREIGN KEY (Course_ID) REFERENCES course(Course_ID),\nFOREIGN KEY (Teacher_ID) REFERENCES teacher(Teacher_ID)\n);\nINSERT INTO  course_arrange VALUES (2,5,1);\nINSERT INTO  course_arrange VALUES (2,3,3);\nINSERT INTO  course_arrange VALUES (3,2,5);\nINSERT INTO  course_arrange VALUES (4,6,7);\nINSERT INTO  course_arrange VALUES (5,6,1);\nINSERT INTO  course_arrange VALUES (10,7,4);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*)  >=  2","prompt":"Show the hometowns shared by at least two teachers."}
{"context":"\nPRAGMA foreign_keys = ON;\nCREATE TABLE course (\nCourse_ID int,\nStaring_Date text,\nCourse text,\nPRIMARY KEY (Course_ID)\n);\nCREATE TABLE teacher (\nTeacher_ID int,\nName text,\nAge text,\nHometown text,\nPRIMARY KEY (Teacher_ID)\n);\nINSERT INTO  course VALUES (1,5 May,Language Arts);\nINSERT INTO  course VALUES (2,6 May,Math);\nINSERT INTO  course VALUES (3,7 May,Science);\nINSERT INTO  course VALUES (4,9 May,History);\nINSERT INTO  course VALUES (5,10 May,Bible);\nINSERT INTO  course VALUES (6,11 May,Geography);\nINSERT INTO  course VALUES (7,13 May,Sports);\nINSERT INTO  course VALUES (8,14 May,French);\nINSERT INTO  course VALUES (9,15 May,Health);\nINSERT INTO  course VALUES (10,17 May,Music);\nINSERT INTO  teacher VALUES (1,Joseph Huts,32,Blackrod Urban District);\nINSERT INTO  teacher VALUES (2,Gustaaf Deloor,29,Bolton County Borough);\nINSERT INTO  teacher VALUES (3,Vicente Carretero,26,Farnworth Municipal Borough);\nINSERT INTO  teacher VALUES (4,John Deloor,33,Horwich Urban District);\nINSERT INTO  teacher VALUES (5,Kearsley Brown,45,Kearsley Urban District);\nINSERT INTO  teacher VALUES (6,Anne Walker,41,Little Lever Urban District);\nINSERT INTO  teacher VALUES (7,Lucy Wong,39,Turton Urban District);\nCREATE TABLE course_arrange (\nCourse_ID int,\nTeacher_ID int,\nGrade int,\nPRIMARY KEY (Course_ID,Teacher_ID,Grade),\nFOREIGN KEY (Course_ID) REFERENCES course(Course_ID),\nFOREIGN KEY (Teacher_ID) REFERENCES teacher(Teacher_ID)\n);\nINSERT INTO  course_arrange VALUES (2,5,1);\nINSERT INTO  course_arrange VALUES (2,3,3);\nINSERT INTO  course_arrange VALUES (3,2,5);\nINSERT INTO  course_arrange VALUES (4,6,7);\nINSERT INTO  course_arrange VALUES (5,6,1);\nINSERT INTO  course_arrange VALUES (10,7,4);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*)  >=  2","prompt":"What are the towns from which at least two teachers come from?"}
{"context":"\nPRAGMA foreign_keys = ON;\nCREATE TABLE course (\nCourse_ID int,\nStaring_Date text,\nCourse text,\nPRIMARY KEY (Course_ID)\n);\nCREATE TABLE teacher (\nTeacher_ID int,\nName text,\nAge text,\nHometown text,\nPRIMARY KEY (Teacher_ID)\n);\nINSERT INTO  course VALUES (1,5 May,Language Arts);\nINSERT INTO  course VALUES (2,6 May,Math);\nINSERT INTO  course VALUES (3,7 May,Science);\nINSERT INTO  course VALUES (4,9 May,History);\nINSERT INTO  course VALUES (5,10 May,Bible);\nINSERT INTO  course VALUES (6,11 May,Geography);\nINSERT INTO  course VALUES (7,13 May,Sports);\nINSERT INTO  course VALUES (8,14 May,French);\nINSERT INTO  course VALUES (9,15 May,Health);\nINSERT INTO  course VALUES (10,17 May,Music);\nINSERT INTO  teacher VALUES (1,Joseph Huts,32,Blackrod Urban District);\nINSERT INTO  teacher VALUES (2,Gustaaf Deloor,29,Bolton County Borough);\nINSERT INTO  teacher VALUES (3,Vicente Carretero,26,Farnworth Municipal Borough);\nINSERT INTO  teacher VALUES (4,John Deloor,33,Horwich Urban District);\nINSERT INTO  teacher VALUES (5,Kearsley Brown,45,Kearsley Urban District);\nINSERT INTO  teacher VALUES (6,Anne Walker,41,Little Lever Urban District);\nINSERT INTO  teacher VALUES (7,Lucy Wong,39,Turton Urban District);\nCREATE TABLE course_arrange (\nCourse_ID int,\nTeacher_ID int,\nGrade int,\nPRIMARY KEY (Course_ID,Teacher_ID,Grade),\nFOREIGN KEY (Course_ID) REFERENCES course(Course_ID),\nFOREIGN KEY (Teacher_ID) REFERENCES teacher(Teacher_ID)\n);\nINSERT INTO  course_arrange VALUES (2,5,1);\nINSERT INTO  course_arrange VALUES (2,3,3);\nINSERT INTO  course_arrange VALUES (3,2,5);\nINSERT INTO  course_arrange VALUES (4,6,7);\nINSERT INTO  course_arrange VALUES (5,6,1);\nINSERT INTO  course_arrange VALUES (10,7,4);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID","prompt":"Show names of teachers and the courses they are arranged to teach."}
{"context":"\nPRAGMA foreign_keys = ON;\nCREATE TABLE course (\nCourse_ID int,\nStaring_Date text,\nCourse text,\nPRIMARY KEY (Course_ID)\n);\nCREATE TABLE teacher (\nTeacher_ID int,\nName text,\nAge text,\nHometown text,\nPRIMARY KEY (Teacher_ID)\n);\nINSERT INTO  course VALUES (1,5 May,Language Arts);\nINSERT INTO  course VALUES (2,6 May,Math);\nINSERT INTO  course VALUES (3,7 May,Science);\nINSERT INTO  course VALUES (4,9 May,History);\nINSERT INTO  course VALUES (5,10 May,Bible);\nINSERT INTO  course VALUES (6,11 May,Geography);\nINSERT INTO  course VALUES (7,13 May,Sports);\nINSERT INTO  course VALUES (8,14 May,French);\nINSERT INTO  course VALUES (9,15 May,Health);\nINSERT INTO  course VALUES (10,17 May,Music);\nINSERT INTO  teacher VALUES (1,Joseph Huts,32,Blackrod Urban District);\nINSERT INTO  teacher VALUES (2,Gustaaf Deloor,29,Bolton County Borough);\nINSERT INTO  teacher VALUES (3,Vicente Carretero,26,Farnworth Municipal Borough);\nINSERT INTO  teacher VALUES (4,John Deloor,33,Horwich Urban District);\nINSERT INTO  teacher VALUES (5,Kearsley Brown,45,Kearsley Urban District);\nINSERT INTO  teacher VALUES (6,Anne Walker,41,Little Lever Urban District);\nINSERT INTO  teacher VALUES (7,Lucy Wong,39,Turton Urban District);\nCREATE TABLE course_arrange (\nCourse_ID int,\nTeacher_ID int,\nGrade int,\nPRIMARY KEY (Course_ID,Teacher_ID,Grade),\nFOREIGN KEY (Course_ID) REFERENCES course(Course_ID),\nFOREIGN KEY (Teacher_ID) REFERENCES teacher(Teacher_ID)\n);\nINSERT INTO  course_arrange VALUES (2,5,1);\nINSERT INTO  course_arrange VALUES (2,3,3);\nINSERT INTO  course_arrange VALUES (3,2,5);\nINSERT INTO  course_arrange VALUES (4,6,7);\nINSERT INTO  course_arrange VALUES (5,6,1);\nINSERT INTO  course_arrange VALUES (10,7,4);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID","prompt":"What is the name of each teacher and what course they teach?"}
{"context":"\nPRAGMA foreign_keys = ON;\nCREATE TABLE course (\nCourse_ID int,\nStaring_Date text,\nCourse text,\nPRIMARY KEY (Course_ID)\n);\nCREATE TABLE teacher (\nTeacher_ID int,\nName text,\nAge text,\nHometown text,\nPRIMARY KEY (Teacher_ID)\n);\nINSERT INTO  course VALUES (1,5 May,Language Arts);\nINSERT INTO  course VALUES (2,6 May,Math);\nINSERT INTO  course VALUES (3,7 May,Science);\nINSERT INTO  course VALUES (4,9 May,History);\nINSERT INTO  course VALUES (5,10 May,Bible);\nINSERT INTO  course VALUES (6,11 May,Geography);\nINSERT INTO  course VALUES (7,13 May,Sports);\nINSERT INTO  course VALUES (8,14 May,French);\nINSERT INTO  course VALUES (9,15 May,Health);\nINSERT INTO  course VALUES (10,17 May,Music);\nINSERT INTO  teacher VALUES (1,Joseph Huts,32,Blackrod Urban District);\nINSERT INTO  teacher VALUES (2,Gustaaf Deloor,29,Bolton County Borough);\nINSERT INTO  teacher VALUES (3,Vicente Carretero,26,Farnworth Municipal Borough);\nINSERT INTO  teacher VALUES (4,John Deloor,33,Horwich Urban District);\nINSERT INTO  teacher VALUES (5,Kearsley Brown,45,Kearsley Urban District);\nINSERT INTO  teacher VALUES (6,Anne Walker,41,Little Lever Urban District);\nINSERT INTO  teacher VALUES (7,Lucy Wong,39,Turton Urban District);\nCREATE TABLE course_arrange (\nCourse_ID int,\nTeacher_ID int,\nGrade int,\nPRIMARY KEY (Course_ID,Teacher_ID,Grade),\nFOREIGN KEY (Course_ID) REFERENCES course(Course_ID),\nFOREIGN KEY (Teacher_ID) REFERENCES teacher(Teacher_ID)\n);\nINSERT INTO  course_arrange VALUES (2,5,1);\nINSERT INTO  course_arrange VALUES (2,3,3);\nINSERT INTO  course_arrange VALUES (3,2,5);\nINSERT INTO  course_arrange VALUES (4,6,7);\nINSERT INTO  course_arrange VALUES (5,6,1);\nINSERT INTO  course_arrange VALUES (10,7,4);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID ORDER BY T3.Name","prompt":"Show names of teachers and the courses they are arranged to teach in ascending alphabetical order of the teacher's name."}
{"context":"\nPRAGMA foreign_keys = ON;\nCREATE TABLE course (\nCourse_ID int,\nStaring_Date text,\nCourse text,\nPRIMARY KEY (Course_ID)\n);\nCREATE TABLE teacher (\nTeacher_ID int,\nName text,\nAge text,\nHometown text,\nPRIMARY KEY (Teacher_ID)\n);\nINSERT INTO  course VALUES (1,5 May,Language Arts);\nINSERT INTO  course VALUES (2,6 May,Math);\nINSERT INTO  course VALUES (3,7 May,Science);\nINSERT INTO  course VALUES (4,9 May,History);\nINSERT INTO  course VALUES (5,10 May,Bible);\nINSERT INTO  course VALUES (6,11 May,Geography);\nINSERT INTO  course VALUES (7,13 May,Sports);\nINSERT INTO  course VALUES (8,14 May,French);\nINSERT INTO  course VALUES (9,15 May,Health);\nINSERT INTO  course VALUES (10,17 May,Music);\nINSERT INTO  teacher VALUES (1,Joseph Huts,32,Blackrod Urban District);\nINSERT INTO  teacher VALUES (2,Gustaaf Deloor,29,Bolton County Borough);\nINSERT INTO  teacher VALUES (3,Vicente Carretero,26,Farnworth Municipal Borough);\nINSERT INTO  teacher VALUES (4,John Deloor,33,Horwich Urban District);\nINSERT INTO  teacher VALUES (5,Kearsley Brown,45,Kearsley Urban District);\nINSERT INTO  teacher VALUES (6,Anne Walker,41,Little Lever Urban District);\nINSERT INTO  teacher VALUES (7,Lucy Wong,39,Turton Urban District);\nCREATE TABLE course_arrange (\nCourse_ID int,\nTeacher_ID int,\nGrade int,\nPRIMARY KEY (Course_ID,Teacher_ID,Grade),\nFOREIGN KEY (Course_ID) REFERENCES course(Course_ID),\nFOREIGN KEY (Teacher_ID) REFERENCES teacher(Teacher_ID)\n);\nINSERT INTO  course_arrange VALUES (2,5,1);\nINSERT INTO  course_arrange VALUES (2,3,3);\nINSERT INTO  course_arrange VALUES (3,2,5);\nINSERT INTO  course_arrange VALUES (4,6,7);\nINSERT INTO  course_arrange VALUES (5,6,1);\nINSERT INTO  course_arrange VALUES (10,7,4);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID ORDER BY T3.Name","prompt":"What are the names of the teachers and the courses they teach in ascending alphabetical order by the name of the teacher?"}
{"context":"\nPRAGMA foreign_keys = ON;\nCREATE TABLE course (\nCourse_ID int,\nStaring_Date text,\nCourse text,\nPRIMARY KEY (Course_ID)\n);\nCREATE TABLE teacher (\nTeacher_ID int,\nName text,\nAge text,\nHometown text,\nPRIMARY KEY (Teacher_ID)\n);\nINSERT INTO  course VALUES (1,5 May,Language Arts);\nINSERT INTO  course VALUES (2,6 May,Math);\nINSERT INTO  course VALUES (3,7 May,Science);\nINSERT INTO  course VALUES (4,9 May,History);\nINSERT INTO  course VALUES (5,10 May,Bible);\nINSERT INTO  course VALUES (6,11 May,Geography);\nINSERT INTO  course VALUES (7,13 May,Sports);\nINSERT INTO  course VALUES (8,14 May,French);\nINSERT INTO  course VALUES (9,15 May,Health);\nINSERT INTO  course VALUES (10,17 May,Music);\nINSERT INTO  teacher VALUES (1,Joseph Huts,32,Blackrod Urban District);\nINSERT INTO  teacher VALUES (2,Gustaaf Deloor,29,Bolton County Borough);\nINSERT INTO  teacher VALUES (3,Vicente Carretero,26,Farnworth Municipal Borough);\nINSERT INTO  teacher VALUES (4,John Deloor,33,Horwich Urban District);\nINSERT INTO  teacher VALUES (5,Kearsley Brown,45,Kearsley Urban District);\nINSERT INTO  teacher VALUES (6,Anne Walker,41,Little Lever Urban District);\nINSERT INTO  teacher VALUES (7,Lucy Wong,39,Turton Urban District);\nCREATE TABLE course_arrange (\nCourse_ID int,\nTeacher_ID int,\nGrade int,\nPRIMARY KEY (Course_ID,Teacher_ID,Grade),\nFOREIGN KEY (Course_ID) REFERENCES course(Course_ID),\nFOREIGN KEY (Teacher_ID) REFERENCES teacher(Teacher_ID)\n);\nINSERT INTO  course_arrange VALUES (2,5,1);\nINSERT INTO  course_arrange VALUES (2,3,3);\nINSERT INTO  course_arrange VALUES (3,2,5);\nINSERT INTO  course_arrange VALUES (4,6,7);\nINSERT INTO  course_arrange VALUES (5,6,1);\nINSERT INTO  course_arrange VALUES (10,7,4);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\"","prompt":"Show the name of the teacher for the math course."}
{"context":"\nPRAGMA foreign_keys = ON;\nCREATE TABLE course (\nCourse_ID int,\nStaring_Date text,\nCourse text,\nPRIMARY KEY (Course_ID)\n);\nCREATE TABLE teacher (\nTeacher_ID int,\nName text,\nAge text,\nHometown text,\nPRIMARY KEY (Teacher_ID)\n);\nINSERT INTO  course VALUES (1,5 May,Language Arts);\nINSERT INTO  course VALUES (2,6 May,Math);\nINSERT INTO  course VALUES (3,7 May,Science);\nINSERT INTO  course VALUES (4,9 May,History);\nINSERT INTO  course VALUES (5,10 May,Bible);\nINSERT INTO  course VALUES (6,11 May,Geography);\nINSERT INTO  course VALUES (7,13 May,Sports);\nINSERT INTO  course VALUES (8,14 May,French);\nINSERT INTO  course VALUES (9,15 May,Health);\nINSERT INTO  course VALUES (10,17 May,Music);\nINSERT INTO  teacher VALUES (1,Joseph Huts,32,Blackrod Urban District);\nINSERT INTO  teacher VALUES (2,Gustaaf Deloor,29,Bolton County Borough);\nINSERT INTO  teacher VALUES (3,Vicente Carretero,26,Farnworth Municipal Borough);\nINSERT INTO  teacher VALUES (4,John Deloor,33,Horwich Urban District);\nINSERT INTO  teacher VALUES (5,Kearsley Brown,45,Kearsley Urban District);\nINSERT INTO  teacher VALUES (6,Anne Walker,41,Little Lever Urban District);\nINSERT INTO  teacher VALUES (7,Lucy Wong,39,Turton Urban District);\nCREATE TABLE course_arrange (\nCourse_ID int,\nTeacher_ID int,\nGrade int,\nPRIMARY KEY (Course_ID,Teacher_ID,Grade),\nFOREIGN KEY (Course_ID) REFERENCES course(Course_ID),\nFOREIGN KEY (Teacher_ID) REFERENCES teacher(Teacher_ID)\n);\nINSERT INTO  course_arrange VALUES (2,5,1);\nINSERT INTO  course_arrange VALUES (2,3,3);\nINSERT INTO  course_arrange VALUES (3,2,5);\nINSERT INTO  course_arrange VALUES (4,6,7);\nINSERT INTO  course_arrange VALUES (5,6,1);\nINSERT INTO  course_arrange VALUES (10,7,4);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\"","prompt":"What are the names of the people who teach math courses?"}
{"context":"\nPRAGMA foreign_keys = ON;\nCREATE TABLE course (\nCourse_ID int,\nStaring_Date text,\nCourse text,\nPRIMARY KEY (Course_ID)\n);\nCREATE TABLE teacher (\nTeacher_ID int,\nName text,\nAge text,\nHometown text,\nPRIMARY KEY (Teacher_ID)\n);\nINSERT INTO  course VALUES (1,5 May,Language Arts);\nINSERT INTO  course VALUES (2,6 May,Math);\nINSERT INTO  course VALUES (3,7 May,Science);\nINSERT INTO  course VALUES (4,9 May,History);\nINSERT INTO  course VALUES (5,10 May,Bible);\nINSERT INTO  course VALUES (6,11 May,Geography);\nINSERT INTO  course VALUES (7,13 May,Sports);\nINSERT INTO  course VALUES (8,14 May,French);\nINSERT INTO  course VALUES (9,15 May,Health);\nINSERT INTO  course VALUES (10,17 May,Music);\nINSERT INTO  teacher VALUES (1,Joseph Huts,32,Blackrod Urban District);\nINSERT INTO  teacher VALUES (2,Gustaaf Deloor,29,Bolton County Borough);\nINSERT INTO  teacher VALUES (3,Vicente Carretero,26,Farnworth Municipal Borough);\nINSERT INTO  teacher VALUES (4,John Deloor,33,Horwich Urban District);\nINSERT INTO  teacher VALUES (5,Kearsley Brown,45,Kearsley Urban District);\nINSERT INTO  teacher VALUES (6,Anne Walker,41,Little Lever Urban District);\nINSERT INTO  teacher VALUES (7,Lucy Wong,39,Turton Urban District);\nCREATE TABLE course_arrange (\nCourse_ID int,\nTeacher_ID int,\nGrade int,\nPRIMARY KEY (Course_ID,Teacher_ID,Grade),\nFOREIGN KEY (Course_ID) REFERENCES course(Course_ID),\nFOREIGN KEY (Teacher_ID) REFERENCES teacher(Teacher_ID)\n);\nINSERT INTO  course_arrange VALUES (2,5,1);\nINSERT INTO  course_arrange VALUES (2,3,3);\nINSERT INTO  course_arrange VALUES (3,2,5);\nINSERT INTO  course_arrange VALUES (4,6,7);\nINSERT INTO  course_arrange VALUES (5,6,1);\nINSERT INTO  course_arrange VALUES (10,7,4);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name","prompt":"Show names of teachers and the number of courses they teach."}
{"context":"\nPRAGMA foreign_keys = ON;\nCREATE TABLE course (\nCourse_ID int,\nStaring_Date text,\nCourse text,\nPRIMARY KEY (Course_ID)\n);\nCREATE TABLE teacher (\nTeacher_ID int,\nName text,\nAge text,\nHometown text,\nPRIMARY KEY (Teacher_ID)\n);\nINSERT INTO  course VALUES (1,5 May,Language Arts);\nINSERT INTO  course VALUES (2,6 May,Math);\nINSERT INTO  course VALUES (3,7 May,Science);\nINSERT INTO  course VALUES (4,9 May,History);\nINSERT INTO  course VALUES (5,10 May,Bible);\nINSERT INTO  course VALUES (6,11 May,Geography);\nINSERT INTO  course VALUES (7,13 May,Sports);\nINSERT INTO  course VALUES (8,14 May,French);\nINSERT INTO  course VALUES (9,15 May,Health);\nINSERT INTO  course VALUES (10,17 May,Music);\nINSERT INTO  teacher VALUES (1,Joseph Huts,32,Blackrod Urban District);\nINSERT INTO  teacher VALUES (2,Gustaaf Deloor,29,Bolton County Borough);\nINSERT INTO  teacher VALUES (3,Vicente Carretero,26,Farnworth Municipal Borough);\nINSERT INTO  teacher VALUES (4,John Deloor,33,Horwich Urban District);\nINSERT INTO  teacher VALUES (5,Kearsley Brown,45,Kearsley Urban District);\nINSERT INTO  teacher VALUES (6,Anne Walker,41,Little Lever Urban District);\nINSERT INTO  teacher VALUES (7,Lucy Wong,39,Turton Urban District);\nCREATE TABLE course_arrange (\nCourse_ID int,\nTeacher_ID int,\nGrade int,\nPRIMARY KEY (Course_ID,Teacher_ID,Grade),\nFOREIGN KEY (Course_ID) REFERENCES course(Course_ID),\nFOREIGN KEY (Teacher_ID) REFERENCES teacher(Teacher_ID)\n);\nINSERT INTO  course_arrange VALUES (2,5,1);\nINSERT INTO  course_arrange VALUES (2,3,3);\nINSERT INTO  course_arrange VALUES (3,2,5);\nINSERT INTO  course_arrange VALUES (4,6,7);\nINSERT INTO  course_arrange VALUES (5,6,1);\nINSERT INTO  course_arrange VALUES (10,7,4);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name","prompt":"What are the names of the teachers and how many courses do they teach?"}
{"context":"\nPRAGMA foreign_keys = ON;\nCREATE TABLE course (\nCourse_ID int,\nStaring_Date text,\nCourse text,\nPRIMARY KEY (Course_ID)\n);\nCREATE TABLE teacher (\nTeacher_ID int,\nName text,\nAge text,\nHometown text,\nPRIMARY KEY (Teacher_ID)\n);\nINSERT INTO  course VALUES (1,5 May,Language Arts);\nINSERT INTO  course VALUES (2,6 May,Math);\nINSERT INTO  course VALUES (3,7 May,Science);\nINSERT INTO  course VALUES (4,9 May,History);\nINSERT INTO  course VALUES (5,10 May,Bible);\nINSERT INTO  course VALUES (6,11 May,Geography);\nINSERT INTO  course VALUES (7,13 May,Sports);\nINSERT INTO  course VALUES (8,14 May,French);\nINSERT INTO  course VALUES (9,15 May,Health);\nINSERT INTO  course VALUES (10,17 May,Music);\nINSERT INTO  teacher VALUES (1,Joseph Huts,32,Blackrod Urban District);\nINSERT INTO  teacher VALUES (2,Gustaaf Deloor,29,Bolton County Borough);\nINSERT INTO  teacher VALUES (3,Vicente Carretero,26,Farnworth Municipal Borough);\nINSERT INTO  teacher VALUES (4,John Deloor,33,Horwich Urban District);\nINSERT INTO  teacher VALUES (5,Kearsley Brown,45,Kearsley Urban District);\nINSERT INTO  teacher VALUES (6,Anne Walker,41,Little Lever Urban District);\nINSERT INTO  teacher VALUES (7,Lucy Wong,39,Turton Urban District);\nCREATE TABLE course_arrange (\nCourse_ID int,\nTeacher_ID int,\nGrade int,\nPRIMARY KEY (Course_ID,Teacher_ID,Grade),\nFOREIGN KEY (Course_ID) REFERENCES course(Course_ID),\nFOREIGN KEY (Teacher_ID) REFERENCES teacher(Teacher_ID)\n);\nINSERT INTO  course_arrange VALUES (2,5,1);\nINSERT INTO  course_arrange VALUES (2,3,3);\nINSERT INTO  course_arrange VALUES (3,2,5);\nINSERT INTO  course_arrange VALUES (4,6,7);\nINSERT INTO  course_arrange VALUES (5,6,1);\nINSERT INTO  course_arrange VALUES (10,7,4);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2","prompt":"Show names of teachers that teach at least two courses."}
{"context":"\nPRAGMA foreign_keys = ON;\nCREATE TABLE course (\nCourse_ID int,\nStaring_Date text,\nCourse text,\nPRIMARY KEY (Course_ID)\n);\nCREATE TABLE teacher (\nTeacher_ID int,\nName text,\nAge text,\nHometown text,\nPRIMARY KEY (Teacher_ID)\n);\nINSERT INTO  course VALUES (1,5 May,Language Arts);\nINSERT INTO  course VALUES (2,6 May,Math);\nINSERT INTO  course VALUES (3,7 May,Science);\nINSERT INTO  course VALUES (4,9 May,History);\nINSERT INTO  course VALUES (5,10 May,Bible);\nINSERT INTO  course VALUES (6,11 May,Geography);\nINSERT INTO  course VALUES (7,13 May,Sports);\nINSERT INTO  course VALUES (8,14 May,French);\nINSERT INTO  course VALUES (9,15 May,Health);\nINSERT INTO  course VALUES (10,17 May,Music);\nINSERT INTO  teacher VALUES (1,Joseph Huts,32,Blackrod Urban District);\nINSERT INTO  teacher VALUES (2,Gustaaf Deloor,29,Bolton County Borough);\nINSERT INTO  teacher VALUES (3,Vicente Carretero,26,Farnworth Municipal Borough);\nINSERT INTO  teacher VALUES (4,John Deloor,33,Horwich Urban District);\nINSERT INTO  teacher VALUES (5,Kearsley Brown,45,Kearsley Urban District);\nINSERT INTO  teacher VALUES (6,Anne Walker,41,Little Lever Urban District);\nINSERT INTO  teacher VALUES (7,Lucy Wong,39,Turton Urban District);\nCREATE TABLE course_arrange (\nCourse_ID int,\nTeacher_ID int,\nGrade int,\nPRIMARY KEY (Course_ID,Teacher_ID,Grade),\nFOREIGN KEY (Course_ID) REFERENCES course(Course_ID),\nFOREIGN KEY (Teacher_ID) REFERENCES teacher(Teacher_ID)\n);\nINSERT INTO  course_arrange VALUES (2,5,1);\nINSERT INTO  course_arrange VALUES (2,3,3);\nINSERT INTO  course_arrange VALUES (3,2,5);\nINSERT INTO  course_arrange VALUES (4,6,7);\nINSERT INTO  course_arrange VALUES (5,6,1);\nINSERT INTO  course_arrange VALUES (10,7,4);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2","prompt":"What are the names of the teachers who teach at least two courses?"}
{"context":"\nPRAGMA foreign_keys = ON;\nCREATE TABLE course (\nCourse_ID int,\nStaring_Date text,\nCourse text,\nPRIMARY KEY (Course_ID)\n);\nCREATE TABLE teacher (\nTeacher_ID int,\nName text,\nAge text,\nHometown text,\nPRIMARY KEY (Teacher_ID)\n);\nINSERT INTO  course VALUES (1,5 May,Language Arts);\nINSERT INTO  course VALUES (2,6 May,Math);\nINSERT INTO  course VALUES (3,7 May,Science);\nINSERT INTO  course VALUES (4,9 May,History);\nINSERT INTO  course VALUES (5,10 May,Bible);\nINSERT INTO  course VALUES (6,11 May,Geography);\nINSERT INTO  course VALUES (7,13 May,Sports);\nINSERT INTO  course VALUES (8,14 May,French);\nINSERT INTO  course VALUES (9,15 May,Health);\nINSERT INTO  course VALUES (10,17 May,Music);\nINSERT INTO  teacher VALUES (1,Joseph Huts,32,Blackrod Urban District);\nINSERT INTO  teacher VALUES (2,Gustaaf Deloor,29,Bolton County Borough);\nINSERT INTO  teacher VALUES (3,Vicente Carretero,26,Farnworth Municipal Borough);\nINSERT INTO  teacher VALUES (4,John Deloor,33,Horwich Urban District);\nINSERT INTO  teacher VALUES (5,Kearsley Brown,45,Kearsley Urban District);\nINSERT INTO  teacher VALUES (6,Anne Walker,41,Little Lever Urban District);\nINSERT INTO  teacher VALUES (7,Lucy Wong,39,Turton Urban District);\nCREATE TABLE course_arrange (\nCourse_ID int,\nTeacher_ID int,\nGrade int,\nPRIMARY KEY (Course_ID,Teacher_ID,Grade),\nFOREIGN KEY (Course_ID) REFERENCES course(Course_ID),\nFOREIGN KEY (Teacher_ID) REFERENCES teacher(Teacher_ID)\n);\nINSERT INTO  course_arrange VALUES (2,5,1);\nINSERT INTO  course_arrange VALUES (2,3,3);\nINSERT INTO  course_arrange VALUES (3,2,5);\nINSERT INTO  course_arrange VALUES (4,6,7);\nINSERT INTO  course_arrange VALUES (5,6,1);\nINSERT INTO  course_arrange VALUES (10,7,4);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange)","prompt":"List the names of teachers who have not been arranged to teach courses."}
{"context":"\nPRAGMA foreign_keys = ON;\nCREATE TABLE course (\nCourse_ID int,\nStaring_Date text,\nCourse text,\nPRIMARY KEY (Course_ID)\n);\nCREATE TABLE teacher (\nTeacher_ID int,\nName text,\nAge text,\nHometown text,\nPRIMARY KEY (Teacher_ID)\n);\nINSERT INTO  course VALUES (1,5 May,Language Arts);\nINSERT INTO  course VALUES (2,6 May,Math);\nINSERT INTO  course VALUES (3,7 May,Science);\nINSERT INTO  course VALUES (4,9 May,History);\nINSERT INTO  course VALUES (5,10 May,Bible);\nINSERT INTO  course VALUES (6,11 May,Geography);\nINSERT INTO  course VALUES (7,13 May,Sports);\nINSERT INTO  course VALUES (8,14 May,French);\nINSERT INTO  course VALUES (9,15 May,Health);\nINSERT INTO  course VALUES (10,17 May,Music);\nINSERT INTO  teacher VALUES (1,Joseph Huts,32,Blackrod Urban District);\nINSERT INTO  teacher VALUES (2,Gustaaf Deloor,29,Bolton County Borough);\nINSERT INTO  teacher VALUES (3,Vicente Carretero,26,Farnworth Municipal Borough);\nINSERT INTO  teacher VALUES (4,John Deloor,33,Horwich Urban District);\nINSERT INTO  teacher VALUES (5,Kearsley Brown,45,Kearsley Urban District);\nINSERT INTO  teacher VALUES (6,Anne Walker,41,Little Lever Urban District);\nINSERT INTO  teacher VALUES (7,Lucy Wong,39,Turton Urban District);\nCREATE TABLE course_arrange (\nCourse_ID int,\nTeacher_ID int,\nGrade int,\nPRIMARY KEY (Course_ID,Teacher_ID,Grade),\nFOREIGN KEY (Course_ID) REFERENCES course(Course_ID),\nFOREIGN KEY (Teacher_ID) REFERENCES teacher(Teacher_ID)\n);\nINSERT INTO  course_arrange VALUES (2,5,1);\nINSERT INTO  course_arrange VALUES (2,3,3);\nINSERT INTO  course_arrange VALUES (3,2,5);\nINSERT INTO  course_arrange VALUES (4,6,7);\nINSERT INTO  course_arrange VALUES (5,6,1);\nINSERT INTO  course_arrange VALUES (10,7,4);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange)","prompt":"What are the names of the teachers whose courses have not been arranged?"}
{"context":"\nPRAGMA foreign_keys = ON;\nCREATE TABLE museum (\nMuseum_ID int,\nName text,\nNum_of_Staff int,\nOpen_Year text,\nPRIMARY KEY (Museum_ID)\n);\n\nINSERT INTO  museum VALUES (1,Plaza Museum,62,2000);\nINSERT INTO  museum VALUES (2,Capital Plaza Museum,25,2012);\nINSERT INTO  museum VALUES (3,Jefferson Development Museum,18,2010);\nINSERT INTO  museum VALUES (4,Willow Grande Museum,17,2011);\nINSERT INTO  museum VALUES (5,RiverPark Museum,16,2008);\nINSERT INTO  museum VALUES (6,Place Tower Museum,16,2008);\nINSERT INTO  museum VALUES (7,Central City District Residential Museum,15,2010);\nINSERT INTO  museum VALUES (8,ZirMed Gateway Museum,12,2009);\nCREATE TABLE visitor (\nID int,\nName text,\nLevel_of_membership int,\nAge int,\nPRIMARY KEY (ID)\n);\nINSERT INTO  visitor VALUES (1,Gonzalo Higuaín ,8,35);\nINSERT INTO  visitor VALUES (2,Guti Midfielder,5,28);\nINSERT INTO  visitor VALUES (3,Arjen Robben,1,27);\nINSERT INTO  visitor VALUES (4,Raúl Brown,2,56);\nINSERT INTO  visitor VALUES (5,Fernando Gago,6,36);\nINSERT INTO  visitor VALUES (6,Rafael van der Vaart,1,25);\nCREATE TABLE visit (\nMuseum_ID int,\nvisitor_ID text,\nNum_of_Ticket int,\nTotal_spent real,\nPRIMARY KEY (Museum_ID,visitor_ID),\nFOREIGN KEY (Museum_ID) REFERENCES museum(Museum_ID),\nFOREIGN KEY (visitor_ID) REFERENCES visitor(ID)\n);\nINSERT INTO  visit VALUES (1,5,20,320.14);\nINSERT INTO  visit VALUES (2,5,4,89.98);\nINSERT INTO  visit VALUES (4,3,10,320.44);\nINSERT INTO  visit VALUES (2,3,24,209.98);\nINSERT INTO  visit VALUES (4,6,3,20.44);\nINSERT INTO  visit VALUES (8,6,2,19.98);\n\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT count(*) FROM visitor WHERE age  <  30","prompt":"How many visitors below age 30 are there?"}
{"context":"\nPRAGMA foreign_keys = ON;\nCREATE TABLE museum (\nMuseum_ID int,\nName text,\nNum_of_Staff int,\nOpen_Year text,\nPRIMARY KEY (Museum_ID)\n);\n\nINSERT INTO  museum VALUES (1,Plaza Museum,62,2000);\nINSERT INTO  museum VALUES (2,Capital Plaza Museum,25,2012);\nINSERT INTO  museum VALUES (3,Jefferson Development Museum,18,2010);\nINSERT INTO  museum VALUES (4,Willow Grande Museum,17,2011);\nINSERT INTO  museum VALUES (5,RiverPark Museum,16,2008);\nINSERT INTO  museum VALUES (6,Place Tower Museum,16,2008);\nINSERT INTO  museum VALUES (7,Central City District Residential Museum,15,2010);\nINSERT INTO  museum VALUES (8,ZirMed Gateway Museum,12,2009);\nCREATE TABLE visitor (\nID int,\nName text,\nLevel_of_membership int,\nAge int,\nPRIMARY KEY (ID)\n);\nINSERT INTO  visitor VALUES (1,Gonzalo Higuaín ,8,35);\nINSERT INTO  visitor VALUES (2,Guti Midfielder,5,28);\nINSERT INTO  visitor VALUES (3,Arjen Robben,1,27);\nINSERT INTO  visitor VALUES (4,Raúl Brown,2,56);\nINSERT INTO  visitor VALUES (5,Fernando Gago,6,36);\nINSERT INTO  visitor VALUES (6,Rafael van der Vaart,1,25);\nCREATE TABLE visit (\nMuseum_ID int,\nvisitor_ID text,\nNum_of_Ticket int,\nTotal_spent real,\nPRIMARY KEY (Museum_ID,visitor_ID),\nFOREIGN KEY (Museum_ID) REFERENCES museum(Museum_ID),\nFOREIGN KEY (visitor_ID) REFERENCES visitor(ID)\n);\nINSERT INTO  visit VALUES (1,5,20,320.14);\nINSERT INTO  visit VALUES (2,5,4,89.98);\nINSERT INTO  visit VALUES (4,3,10,320.44);\nINSERT INTO  visit VALUES (2,3,24,209.98);\nINSERT INTO  visit VALUES (4,6,3,20.44);\nINSERT INTO  visit VALUES (8,6,2,19.98);\n\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT name FROM visitor WHERE Level_of_membership  >  4 ORDER BY Level_of_membership DESC","prompt":"Find the names of the visitors whose membership level is higher than 4, and order the results by the level from high to low."}
{"context":"\nPRAGMA foreign_keys = ON;\nCREATE TABLE museum (\nMuseum_ID int,\nName text,\nNum_of_Staff int,\nOpen_Year text,\nPRIMARY KEY (Museum_ID)\n);\n\nINSERT INTO  museum VALUES (1,Plaza Museum,62,2000);\nINSERT INTO  museum VALUES (2,Capital Plaza Museum,25,2012);\nINSERT INTO  museum VALUES (3,Jefferson Development Museum,18,2010);\nINSERT INTO  museum VALUES (4,Willow Grande Museum,17,2011);\nINSERT INTO  museum VALUES (5,RiverPark Museum,16,2008);\nINSERT INTO  museum VALUES (6,Place Tower Museum,16,2008);\nINSERT INTO  museum VALUES (7,Central City District Residential Museum,15,2010);\nINSERT INTO  museum VALUES (8,ZirMed Gateway Museum,12,2009);\nCREATE TABLE visitor (\nID int,\nName text,\nLevel_of_membership int,\nAge int,\nPRIMARY KEY (ID)\n);\nINSERT INTO  visitor VALUES (1,Gonzalo Higuaín ,8,35);\nINSERT INTO  visitor VALUES (2,Guti Midfielder,5,28);\nINSERT INTO  visitor VALUES (3,Arjen Robben,1,27);\nINSERT INTO  visitor VALUES (4,Raúl Brown,2,56);\nINSERT INTO  visitor VALUES (5,Fernando Gago,6,36);\nINSERT INTO  visitor VALUES (6,Rafael van der Vaart,1,25);\nCREATE TABLE visit (\nMuseum_ID int,\nvisitor_ID text,\nNum_of_Ticket int,\nTotal_spent real,\nPRIMARY KEY (Museum_ID,visitor_ID),\nFOREIGN KEY (Museum_ID) REFERENCES museum(Museum_ID),\nFOREIGN KEY (visitor_ID) REFERENCES visitor(ID)\n);\nINSERT INTO  visit VALUES (1,5,20,320.14);\nINSERT INTO  visit VALUES (2,5,4,89.98);\nINSERT INTO  visit VALUES (4,3,10,320.44);\nINSERT INTO  visit VALUES (2,3,24,209.98);\nINSERT INTO  visit VALUES (4,6,3,20.44);\nINSERT INTO  visit VALUES (8,6,2,19.98);\n\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT avg(age) FROM visitor WHERE Level_of_membership  <=  4","prompt":"What is the average age of the visitors whose membership level is not higher than 4?"}
{"context":"\nPRAGMA foreign_keys = ON;\nCREATE TABLE museum (\nMuseum_ID int,\nName text,\nNum_of_Staff int,\nOpen_Year text,\nPRIMARY KEY (Museum_ID)\n);\n\nINSERT INTO  museum VALUES (1,Plaza Museum,62,2000);\nINSERT INTO  museum VALUES (2,Capital Plaza Museum,25,2012);\nINSERT INTO  museum VALUES (3,Jefferson Development Museum,18,2010);\nINSERT INTO  museum VALUES (4,Willow Grande Museum,17,2011);\nINSERT INTO  museum VALUES (5,RiverPark Museum,16,2008);\nINSERT INTO  museum VALUES (6,Place Tower Museum,16,2008);\nINSERT INTO  museum VALUES (7,Central City District Residential Museum,15,2010);\nINSERT INTO  museum VALUES (8,ZirMed Gateway Museum,12,2009);\nCREATE TABLE visitor (\nID int,\nName text,\nLevel_of_membership int,\nAge int,\nPRIMARY KEY (ID)\n);\nINSERT INTO  visitor VALUES (1,Gonzalo Higuaín ,8,35);\nINSERT INTO  visitor VALUES (2,Guti Midfielder,5,28);\nINSERT INTO  visitor VALUES (3,Arjen Robben,1,27);\nINSERT INTO  visitor VALUES (4,Raúl Brown,2,56);\nINSERT INTO  visitor VALUES (5,Fernando Gago,6,36);\nINSERT INTO  visitor VALUES (6,Rafael van der Vaart,1,25);\nCREATE TABLE visit (\nMuseum_ID int,\nvisitor_ID text,\nNum_of_Ticket int,\nTotal_spent real,\nPRIMARY KEY (Museum_ID,visitor_ID),\nFOREIGN KEY (Museum_ID) REFERENCES museum(Museum_ID),\nFOREIGN KEY (visitor_ID) REFERENCES visitor(ID)\n);\nINSERT INTO  visit VALUES (1,5,20,320.14);\nINSERT INTO  visit VALUES (2,5,4,89.98);\nINSERT INTO  visit VALUES (4,3,10,320.44);\nINSERT INTO  visit VALUES (2,3,24,209.98);\nINSERT INTO  visit VALUES (4,6,3,20.44);\nINSERT INTO  visit VALUES (8,6,2,19.98);\n\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT name ,  Level_of_membership FROM visitor WHERE Level_of_membership  >  4 ORDER BY age DESC","prompt":"Find the name and membership level of the visitors whose membership level is higher than 4, and sort by their age from old to young."}
{"context":"\nPRAGMA foreign_keys = ON;\nCREATE TABLE museum (\nMuseum_ID int,\nName text,\nNum_of_Staff int,\nOpen_Year text,\nPRIMARY KEY (Museum_ID)\n);\n\nINSERT INTO  museum VALUES (1,Plaza Museum,62,2000);\nINSERT INTO  museum VALUES (2,Capital Plaza Museum,25,2012);\nINSERT INTO  museum VALUES (3,Jefferson Development Museum,18,2010);\nINSERT INTO  museum VALUES (4,Willow Grande Museum,17,2011);\nINSERT INTO  museum VALUES (5,RiverPark Museum,16,2008);\nINSERT INTO  museum VALUES (6,Place Tower Museum,16,2008);\nINSERT INTO  museum VALUES (7,Central City District Residential Museum,15,2010);\nINSERT INTO  museum VALUES (8,ZirMed Gateway Museum,12,2009);\nCREATE TABLE visitor (\nID int,\nName text,\nLevel_of_membership int,\nAge int,\nPRIMARY KEY (ID)\n);\nINSERT INTO  visitor VALUES (1,Gonzalo Higuaín ,8,35);\nINSERT INTO  visitor VALUES (2,Guti Midfielder,5,28);\nINSERT INTO  visitor VALUES (3,Arjen Robben,1,27);\nINSERT INTO  visitor VALUES (4,Raúl Brown,2,56);\nINSERT INTO  visitor VALUES (5,Fernando Gago,6,36);\nINSERT INTO  visitor VALUES (6,Rafael van der Vaart,1,25);\nCREATE TABLE visit (\nMuseum_ID int,\nvisitor_ID text,\nNum_of_Ticket int,\nTotal_spent real,\nPRIMARY KEY (Museum_ID,visitor_ID),\nFOREIGN KEY (Museum_ID) REFERENCES museum(Museum_ID),\nFOREIGN KEY (visitor_ID) REFERENCES visitor(ID)\n);\nINSERT INTO  visit VALUES (1,5,20,320.14);\nINSERT INTO  visit VALUES (2,5,4,89.98);\nINSERT INTO  visit VALUES (4,3,10,320.44);\nINSERT INTO  visit VALUES (2,3,24,209.98);\nINSERT INTO  visit VALUES (4,6,3,20.44);\nINSERT INTO  visit VALUES (8,6,2,19.98);\n\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT museum_id ,  name FROM museum ORDER BY num_of_staff DESC LIMIT 1","prompt":"Find the id and name of the museum that has the most staff members?"}
{"context":"\nPRAGMA foreign_keys = ON;\nCREATE TABLE museum (\nMuseum_ID int,\nName text,\nNum_of_Staff int,\nOpen_Year text,\nPRIMARY KEY (Museum_ID)\n);\n\nINSERT INTO  museum VALUES (1,Plaza Museum,62,2000);\nINSERT INTO  museum VALUES (2,Capital Plaza Museum,25,2012);\nINSERT INTO  museum VALUES (3,Jefferson Development Museum,18,2010);\nINSERT INTO  museum VALUES (4,Willow Grande Museum,17,2011);\nINSERT INTO  museum VALUES (5,RiverPark Museum,16,2008);\nINSERT INTO  museum VALUES (6,Place Tower Museum,16,2008);\nINSERT INTO  museum VALUES (7,Central City District Residential Museum,15,2010);\nINSERT INTO  museum VALUES (8,ZirMed Gateway Museum,12,2009);\nCREATE TABLE visitor (\nID int,\nName text,\nLevel_of_membership int,\nAge int,\nPRIMARY KEY (ID)\n);\nINSERT INTO  visitor VALUES (1,Gonzalo Higuaín ,8,35);\nINSERT INTO  visitor VALUES (2,Guti Midfielder,5,28);\nINSERT INTO  visitor VALUES (3,Arjen Robben,1,27);\nINSERT INTO  visitor VALUES (4,Raúl Brown,2,56);\nINSERT INTO  visitor VALUES (5,Fernando Gago,6,36);\nINSERT INTO  visitor VALUES (6,Rafael van der Vaart,1,25);\nCREATE TABLE visit (\nMuseum_ID int,\nvisitor_ID text,\nNum_of_Ticket int,\nTotal_spent real,\nPRIMARY KEY (Museum_ID,visitor_ID),\nFOREIGN KEY (Museum_ID) REFERENCES museum(Museum_ID),\nFOREIGN KEY (visitor_ID) REFERENCES visitor(ID)\n);\nINSERT INTO  visit VALUES (1,5,20,320.14);\nINSERT INTO  visit VALUES (2,5,4,89.98);\nINSERT INTO  visit VALUES (4,3,10,320.44);\nINSERT INTO  visit VALUES (2,3,24,209.98);\nINSERT INTO  visit VALUES (4,6,3,20.44);\nINSERT INTO  visit VALUES (8,6,2,19.98);\n\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT avg(num_of_staff) FROM museum WHERE open_year  <  2009","prompt":"Find the average number of staff working for the museums that were open before 2009."}
{"context":"\nPRAGMA foreign_keys = ON;\nCREATE TABLE museum (\nMuseum_ID int,\nName text,\nNum_of_Staff int,\nOpen_Year text,\nPRIMARY KEY (Museum_ID)\n);\n\nINSERT INTO  museum VALUES (1,Plaza Museum,62,2000);\nINSERT INTO  museum VALUES (2,Capital Plaza Museum,25,2012);\nINSERT INTO  museum VALUES (3,Jefferson Development Museum,18,2010);\nINSERT INTO  museum VALUES (4,Willow Grande Museum,17,2011);\nINSERT INTO  museum VALUES (5,RiverPark Museum,16,2008);\nINSERT INTO  museum VALUES (6,Place Tower Museum,16,2008);\nINSERT INTO  museum VALUES (7,Central City District Residential Museum,15,2010);\nINSERT INTO  museum VALUES (8,ZirMed Gateway Museum,12,2009);\nCREATE TABLE visitor (\nID int,\nName text,\nLevel_of_membership int,\nAge int,\nPRIMARY KEY (ID)\n);\nINSERT INTO  visitor VALUES (1,Gonzalo Higuaín ,8,35);\nINSERT INTO  visitor VALUES (2,Guti Midfielder,5,28);\nINSERT INTO  visitor VALUES (3,Arjen Robben,1,27);\nINSERT INTO  visitor VALUES (4,Raúl Brown,2,56);\nINSERT INTO  visitor VALUES (5,Fernando Gago,6,36);\nINSERT INTO  visitor VALUES (6,Rafael van der Vaart,1,25);\nCREATE TABLE visit (\nMuseum_ID int,\nvisitor_ID text,\nNum_of_Ticket int,\nTotal_spent real,\nPRIMARY KEY (Museum_ID,visitor_ID),\nFOREIGN KEY (Museum_ID) REFERENCES museum(Museum_ID),\nFOREIGN KEY (visitor_ID) REFERENCES visitor(ID)\n);\nINSERT INTO  visit VALUES (1,5,20,320.14);\nINSERT INTO  visit VALUES (2,5,4,89.98);\nINSERT INTO  visit VALUES (4,3,10,320.44);\nINSERT INTO  visit VALUES (2,3,24,209.98);\nINSERT INTO  visit VALUES (4,6,3,20.44);\nINSERT INTO  visit VALUES (8,6,2,19.98);\n\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT Num_of_Staff ,  Open_Year FROM museum WHERE name  =  'Plaza Museum'","prompt":"What are the opening year and staff number of the museum named Plaza Museum?"}
{"context":"\nPRAGMA foreign_keys = ON;\nCREATE TABLE museum (\nMuseum_ID int,\nName text,\nNum_of_Staff int,\nOpen_Year text,\nPRIMARY KEY (Museum_ID)\n);\n\nINSERT INTO  museum VALUES (1,Plaza Museum,62,2000);\nINSERT INTO  museum VALUES (2,Capital Plaza Museum,25,2012);\nINSERT INTO  museum VALUES (3,Jefferson Development Museum,18,2010);\nINSERT INTO  museum VALUES (4,Willow Grande Museum,17,2011);\nINSERT INTO  museum VALUES (5,RiverPark Museum,16,2008);\nINSERT INTO  museum VALUES (6,Place Tower Museum,16,2008);\nINSERT INTO  museum VALUES (7,Central City District Residential Museum,15,2010);\nINSERT INTO  museum VALUES (8,ZirMed Gateway Museum,12,2009);\nCREATE TABLE visitor (\nID int,\nName text,\nLevel_of_membership int,\nAge int,\nPRIMARY KEY (ID)\n);\nINSERT INTO  visitor VALUES (1,Gonzalo Higuaín ,8,35);\nINSERT INTO  visitor VALUES (2,Guti Midfielder,5,28);\nINSERT INTO  visitor VALUES (3,Arjen Robben,1,27);\nINSERT INTO  visitor VALUES (4,Raúl Brown,2,56);\nINSERT INTO  visitor VALUES (5,Fernando Gago,6,36);\nINSERT INTO  visitor VALUES (6,Rafael van der Vaart,1,25);\nCREATE TABLE visit (\nMuseum_ID int,\nvisitor_ID text,\nNum_of_Ticket int,\nTotal_spent real,\nPRIMARY KEY (Museum_ID,visitor_ID),\nFOREIGN KEY (Museum_ID) REFERENCES museum(Museum_ID),\nFOREIGN KEY (visitor_ID) REFERENCES visitor(ID)\n);\nINSERT INTO  visit VALUES (1,5,20,320.14);\nINSERT INTO  visit VALUES (2,5,4,89.98);\nINSERT INTO  visit VALUES (4,3,10,320.44);\nINSERT INTO  visit VALUES (2,3,24,209.98);\nINSERT INTO  visit VALUES (4,6,3,20.44);\nINSERT INTO  visit VALUES (8,6,2,19.98);\n\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT name FROM museum WHERE num_of_staff  >  (SELECT min(num_of_staff) FROM museum WHERE open_year  >  2010)","prompt":"find the names of museums which have more staff than the minimum staff number of all museums opened after 2010."}
{"context":"\nPRAGMA foreign_keys = ON;\nCREATE TABLE museum (\nMuseum_ID int,\nName text,\nNum_of_Staff int,\nOpen_Year text,\nPRIMARY KEY (Museum_ID)\n);\n\nINSERT INTO  museum VALUES (1,Plaza Museum,62,2000);\nINSERT INTO  museum VALUES (2,Capital Plaza Museum,25,2012);\nINSERT INTO  museum VALUES (3,Jefferson Development Museum,18,2010);\nINSERT INTO  museum VALUES (4,Willow Grande Museum,17,2011);\nINSERT INTO  museum VALUES (5,RiverPark Museum,16,2008);\nINSERT INTO  museum VALUES (6,Place Tower Museum,16,2008);\nINSERT INTO  museum VALUES (7,Central City District Residential Museum,15,2010);\nINSERT INTO  museum VALUES (8,ZirMed Gateway Museum,12,2009);\nCREATE TABLE visitor (\nID int,\nName text,\nLevel_of_membership int,\nAge int,\nPRIMARY KEY (ID)\n);\nINSERT INTO  visitor VALUES (1,Gonzalo Higuaín ,8,35);\nINSERT INTO  visitor VALUES (2,Guti Midfielder,5,28);\nINSERT INTO  visitor VALUES (3,Arjen Robben,1,27);\nINSERT INTO  visitor VALUES (4,Raúl Brown,2,56);\nINSERT INTO  visitor VALUES (5,Fernando Gago,6,36);\nINSERT INTO  visitor VALUES (6,Rafael van der Vaart,1,25);\nCREATE TABLE visit (\nMuseum_ID int,\nvisitor_ID text,\nNum_of_Ticket int,\nTotal_spent real,\nPRIMARY KEY (Museum_ID,visitor_ID),\nFOREIGN KEY (Museum_ID) REFERENCES museum(Museum_ID),\nFOREIGN KEY (visitor_ID) REFERENCES visitor(ID)\n);\nINSERT INTO  visit VALUES (1,5,20,320.14);\nINSERT INTO  visit VALUES (2,5,4,89.98);\nINSERT INTO  visit VALUES (4,3,10,320.44);\nINSERT INTO  visit VALUES (2,3,24,209.98);\nINSERT INTO  visit VALUES (4,6,3,20.44);\nINSERT INTO  visit VALUES (8,6,2,19.98);\n\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT t1.id ,  t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t1.id HAVING count(*)  >  1","prompt":"find the id, name and age for visitors who visited some museums more than once."}
{"context":"\nPRAGMA foreign_keys = ON;\nCREATE TABLE museum (\nMuseum_ID int,\nName text,\nNum_of_Staff int,\nOpen_Year text,\nPRIMARY KEY (Museum_ID)\n);\n\nINSERT INTO  museum VALUES (1,Plaza Museum,62,2000);\nINSERT INTO  museum VALUES (2,Capital Plaza Museum,25,2012);\nINSERT INTO  museum VALUES (3,Jefferson Development Museum,18,2010);\nINSERT INTO  museum VALUES (4,Willow Grande Museum,17,2011);\nINSERT INTO  museum VALUES (5,RiverPark Museum,16,2008);\nINSERT INTO  museum VALUES (6,Place Tower Museum,16,2008);\nINSERT INTO  museum VALUES (7,Central City District Residential Museum,15,2010);\nINSERT INTO  museum VALUES (8,ZirMed Gateway Museum,12,2009);\nCREATE TABLE visitor (\nID int,\nName text,\nLevel_of_membership int,\nAge int,\nPRIMARY KEY (ID)\n);\nINSERT INTO  visitor VALUES (1,Gonzalo Higuaín ,8,35);\nINSERT INTO  visitor VALUES (2,Guti Midfielder,5,28);\nINSERT INTO  visitor VALUES (3,Arjen Robben,1,27);\nINSERT INTO  visitor VALUES (4,Raúl Brown,2,56);\nINSERT INTO  visitor VALUES (5,Fernando Gago,6,36);\nINSERT INTO  visitor VALUES (6,Rafael van der Vaart,1,25);\nCREATE TABLE visit (\nMuseum_ID int,\nvisitor_ID text,\nNum_of_Ticket int,\nTotal_spent real,\nPRIMARY KEY (Museum_ID,visitor_ID),\nFOREIGN KEY (Museum_ID) REFERENCES museum(Museum_ID),\nFOREIGN KEY (visitor_ID) REFERENCES visitor(ID)\n);\nINSERT INTO  visit VALUES (1,5,20,320.14);\nINSERT INTO  visit VALUES (2,5,4,89.98);\nINSERT INTO  visit VALUES (4,3,10,320.44);\nINSERT INTO  visit VALUES (2,3,24,209.98);\nINSERT INTO  visit VALUES (4,6,3,20.44);\nINSERT INTO  visit VALUES (8,6,2,19.98);\n\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT t2.visitor_id ,  t1.name ,  t1.Level_of_membership FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t2.visitor_id ORDER BY sum(t2.Total_spent) DESC LIMIT 1","prompt":"What are the id, name and membership level of visitors who have spent the largest amount of money in total in all museum tickets?"}
{"context":"\nPRAGMA foreign_keys = ON;\nCREATE TABLE museum (\nMuseum_ID int,\nName text,\nNum_of_Staff int,\nOpen_Year text,\nPRIMARY KEY (Museum_ID)\n);\n\nINSERT INTO  museum VALUES (1,Plaza Museum,62,2000);\nINSERT INTO  museum VALUES (2,Capital Plaza Museum,25,2012);\nINSERT INTO  museum VALUES (3,Jefferson Development Museum,18,2010);\nINSERT INTO  museum VALUES (4,Willow Grande Museum,17,2011);\nINSERT INTO  museum VALUES (5,RiverPark Museum,16,2008);\nINSERT INTO  museum VALUES (6,Place Tower Museum,16,2008);\nINSERT INTO  museum VALUES (7,Central City District Residential Museum,15,2010);\nINSERT INTO  museum VALUES (8,ZirMed Gateway Museum,12,2009);\nCREATE TABLE visitor (\nID int,\nName text,\nLevel_of_membership int,\nAge int,\nPRIMARY KEY (ID)\n);\nINSERT INTO  visitor VALUES (1,Gonzalo Higuaín ,8,35);\nINSERT INTO  visitor VALUES (2,Guti Midfielder,5,28);\nINSERT INTO  visitor VALUES (3,Arjen Robben,1,27);\nINSERT INTO  visitor VALUES (4,Raúl Brown,2,56);\nINSERT INTO  visitor VALUES (5,Fernando Gago,6,36);\nINSERT INTO  visitor VALUES (6,Rafael van der Vaart,1,25);\nCREATE TABLE visit (\nMuseum_ID int,\nvisitor_ID text,\nNum_of_Ticket int,\nTotal_spent real,\nPRIMARY KEY (Museum_ID,visitor_ID),\nFOREIGN KEY (Museum_ID) REFERENCES museum(Museum_ID),\nFOREIGN KEY (visitor_ID) REFERENCES visitor(ID)\n);\nINSERT INTO  visit VALUES (1,5,20,320.14);\nINSERT INTO  visit VALUES (2,5,4,89.98);\nINSERT INTO  visit VALUES (4,3,10,320.44);\nINSERT INTO  visit VALUES (2,3,24,209.98);\nINSERT INTO  visit VALUES (4,6,3,20.44);\nINSERT INTO  visit VALUES (8,6,2,19.98);\n\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT t2.Museum_ID ,  t1.name FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID  =  t2.Museum_ID GROUP BY t2.Museum_ID ORDER BY count(*) DESC LIMIT 1","prompt":"What are the id and name of the museum visited most times?"}
{"context":"\nPRAGMA foreign_keys = ON;\nCREATE TABLE museum (\nMuseum_ID int,\nName text,\nNum_of_Staff int,\nOpen_Year text,\nPRIMARY KEY (Museum_ID)\n);\n\nINSERT INTO  museum VALUES (1,Plaza Museum,62,2000);\nINSERT INTO  museum VALUES (2,Capital Plaza Museum,25,2012);\nINSERT INTO  museum VALUES (3,Jefferson Development Museum,18,2010);\nINSERT INTO  museum VALUES (4,Willow Grande Museum,17,2011);\nINSERT INTO  museum VALUES (5,RiverPark Museum,16,2008);\nINSERT INTO  museum VALUES (6,Place Tower Museum,16,2008);\nINSERT INTO  museum VALUES (7,Central City District Residential Museum,15,2010);\nINSERT INTO  museum VALUES (8,ZirMed Gateway Museum,12,2009);\nCREATE TABLE visitor (\nID int,\nName text,\nLevel_of_membership int,\nAge int,\nPRIMARY KEY (ID)\n);\nINSERT INTO  visitor VALUES (1,Gonzalo Higuaín ,8,35);\nINSERT INTO  visitor VALUES (2,Guti Midfielder,5,28);\nINSERT INTO  visitor VALUES (3,Arjen Robben,1,27);\nINSERT INTO  visitor VALUES (4,Raúl Brown,2,56);\nINSERT INTO  visitor VALUES (5,Fernando Gago,6,36);\nINSERT INTO  visitor VALUES (6,Rafael van der Vaart,1,25);\nCREATE TABLE visit (\nMuseum_ID int,\nvisitor_ID text,\nNum_of_Ticket int,\nTotal_spent real,\nPRIMARY KEY (Museum_ID,visitor_ID),\nFOREIGN KEY (Museum_ID) REFERENCES museum(Museum_ID),\nFOREIGN KEY (visitor_ID) REFERENCES visitor(ID)\n);\nINSERT INTO  visit VALUES (1,5,20,320.14);\nINSERT INTO  visit VALUES (2,5,4,89.98);\nINSERT INTO  visit VALUES (4,3,10,320.44);\nINSERT INTO  visit VALUES (2,3,24,209.98);\nINSERT INTO  visit VALUES (4,6,3,20.44);\nINSERT INTO  visit VALUES (8,6,2,19.98);\n\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT name FROM museum WHERE Museum_ID NOT IN (SELECT museum_id FROM visit)","prompt":"What is the name of the museum that had no visitor yet?"}
{"context":"\nPRAGMA foreign_keys = ON;\nCREATE TABLE museum (\nMuseum_ID int,\nName text,\nNum_of_Staff int,\nOpen_Year text,\nPRIMARY KEY (Museum_ID)\n);\n\nINSERT INTO  museum VALUES (1,Plaza Museum,62,2000);\nINSERT INTO  museum VALUES (2,Capital Plaza Museum,25,2012);\nINSERT INTO  museum VALUES (3,Jefferson Development Museum,18,2010);\nINSERT INTO  museum VALUES (4,Willow Grande Museum,17,2011);\nINSERT INTO  museum VALUES (5,RiverPark Museum,16,2008);\nINSERT INTO  museum VALUES (6,Place Tower Museum,16,2008);\nINSERT INTO  museum VALUES (7,Central City District Residential Museum,15,2010);\nINSERT INTO  museum VALUES (8,ZirMed Gateway Museum,12,2009);\nCREATE TABLE visitor (\nID int,\nName text,\nLevel_of_membership int,\nAge int,\nPRIMARY KEY (ID)\n);\nINSERT INTO  visitor VALUES (1,Gonzalo Higuaín ,8,35);\nINSERT INTO  visitor VALUES (2,Guti Midfielder,5,28);\nINSERT INTO  visitor VALUES (3,Arjen Robben,1,27);\nINSERT INTO  visitor VALUES (4,Raúl Brown,2,56);\nINSERT INTO  visitor VALUES (5,Fernando Gago,6,36);\nINSERT INTO  visitor VALUES (6,Rafael van der Vaart,1,25);\nCREATE TABLE visit (\nMuseum_ID int,\nvisitor_ID text,\nNum_of_Ticket int,\nTotal_spent real,\nPRIMARY KEY (Museum_ID,visitor_ID),\nFOREIGN KEY (Museum_ID) REFERENCES museum(Museum_ID),\nFOREIGN KEY (visitor_ID) REFERENCES visitor(ID)\n);\nINSERT INTO  visit VALUES (1,5,20,320.14);\nINSERT INTO  visit VALUES (2,5,4,89.98);\nINSERT INTO  visit VALUES (4,3,10,320.44);\nINSERT INTO  visit VALUES (2,3,24,209.98);\nINSERT INTO  visit VALUES (4,6,3,20.44);\nINSERT INTO  visit VALUES (8,6,2,19.98);\n\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id ORDER BY t2.num_of_ticket DESC LIMIT 1","prompt":"Find the name and age of the visitor who bought the most tickets at once."}
{"context":"\nPRAGMA foreign_keys = ON;\nCREATE TABLE museum (\nMuseum_ID int,\nName text,\nNum_of_Staff int,\nOpen_Year text,\nPRIMARY KEY (Museum_ID)\n);\n\nINSERT INTO  museum VALUES (1,Plaza Museum,62,2000);\nINSERT INTO  museum VALUES (2,Capital Plaza Museum,25,2012);\nINSERT INTO  museum VALUES (3,Jefferson Development Museum,18,2010);\nINSERT INTO  museum VALUES (4,Willow Grande Museum,17,2011);\nINSERT INTO  museum VALUES (5,RiverPark Museum,16,2008);\nINSERT INTO  museum VALUES (6,Place Tower Museum,16,2008);\nINSERT INTO  museum VALUES (7,Central City District Residential Museum,15,2010);\nINSERT INTO  museum VALUES (8,ZirMed Gateway Museum,12,2009);\nCREATE TABLE visitor (\nID int,\nName text,\nLevel_of_membership int,\nAge int,\nPRIMARY KEY (ID)\n);\nINSERT INTO  visitor VALUES (1,Gonzalo Higuaín ,8,35);\nINSERT INTO  visitor VALUES (2,Guti Midfielder,5,28);\nINSERT INTO  visitor VALUES (3,Arjen Robben,1,27);\nINSERT INTO  visitor VALUES (4,Raúl Brown,2,56);\nINSERT INTO  visitor VALUES (5,Fernando Gago,6,36);\nINSERT INTO  visitor VALUES (6,Rafael van der Vaart,1,25);\nCREATE TABLE visit (\nMuseum_ID int,\nvisitor_ID text,\nNum_of_Ticket int,\nTotal_spent real,\nPRIMARY KEY (Museum_ID,visitor_ID),\nFOREIGN KEY (Museum_ID) REFERENCES museum(Museum_ID),\nFOREIGN KEY (visitor_ID) REFERENCES visitor(ID)\n);\nINSERT INTO  visit VALUES (1,5,20,320.14);\nINSERT INTO  visit VALUES (2,5,4,89.98);\nINSERT INTO  visit VALUES (4,3,10,320.44);\nINSERT INTO  visit VALUES (2,3,24,209.98);\nINSERT INTO  visit VALUES (4,6,3,20.44);\nINSERT INTO  visit VALUES (8,6,2,19.98);\n\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT avg(num_of_ticket) ,  max(num_of_ticket) FROM visit","prompt":"What are the average and maximum number of tickets bought in all visits?"}
{"context":"\nPRAGMA foreign_keys = ON;\nCREATE TABLE museum (\nMuseum_ID int,\nName text,\nNum_of_Staff int,\nOpen_Year text,\nPRIMARY KEY (Museum_ID)\n);\n\nINSERT INTO  museum VALUES (1,Plaza Museum,62,2000);\nINSERT INTO  museum VALUES (2,Capital Plaza Museum,25,2012);\nINSERT INTO  museum VALUES (3,Jefferson Development Museum,18,2010);\nINSERT INTO  museum VALUES (4,Willow Grande Museum,17,2011);\nINSERT INTO  museum VALUES (5,RiverPark Museum,16,2008);\nINSERT INTO  museum VALUES (6,Place Tower Museum,16,2008);\nINSERT INTO  museum VALUES (7,Central City District Residential Museum,15,2010);\nINSERT INTO  museum VALUES (8,ZirMed Gateway Museum,12,2009);\nCREATE TABLE visitor (\nID int,\nName text,\nLevel_of_membership int,\nAge int,\nPRIMARY KEY (ID)\n);\nINSERT INTO  visitor VALUES (1,Gonzalo Higuaín ,8,35);\nINSERT INTO  visitor VALUES (2,Guti Midfielder,5,28);\nINSERT INTO  visitor VALUES (3,Arjen Robben,1,27);\nINSERT INTO  visitor VALUES (4,Raúl Brown,2,56);\nINSERT INTO  visitor VALUES (5,Fernando Gago,6,36);\nINSERT INTO  visitor VALUES (6,Rafael van der Vaart,1,25);\nCREATE TABLE visit (\nMuseum_ID int,\nvisitor_ID text,\nNum_of_Ticket int,\nTotal_spent real,\nPRIMARY KEY (Museum_ID,visitor_ID),\nFOREIGN KEY (Museum_ID) REFERENCES museum(Museum_ID),\nFOREIGN KEY (visitor_ID) REFERENCES visitor(ID)\n);\nINSERT INTO  visit VALUES (1,5,20,320.14);\nINSERT INTO  visit VALUES (2,5,4,89.98);\nINSERT INTO  visit VALUES (4,3,10,320.44);\nINSERT INTO  visit VALUES (2,3,24,209.98);\nINSERT INTO  visit VALUES (4,6,3,20.44);\nINSERT INTO  visit VALUES (8,6,2,19.98);\n\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT sum(t2.Total_spent) FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id WHERE t1.Level_of_membership  =  1","prompt":"What is the total ticket expense of the visitors whose membership level is 1?"}
{"context":"\nPRAGMA foreign_keys = ON;\nCREATE TABLE museum (\nMuseum_ID int,\nName text,\nNum_of_Staff int,\nOpen_Year text,\nPRIMARY KEY (Museum_ID)\n);\n\nINSERT INTO  museum VALUES (1,Plaza Museum,62,2000);\nINSERT INTO  museum VALUES (2,Capital Plaza Museum,25,2012);\nINSERT INTO  museum VALUES (3,Jefferson Development Museum,18,2010);\nINSERT INTO  museum VALUES (4,Willow Grande Museum,17,2011);\nINSERT INTO  museum VALUES (5,RiverPark Museum,16,2008);\nINSERT INTO  museum VALUES (6,Place Tower Museum,16,2008);\nINSERT INTO  museum VALUES (7,Central City District Residential Museum,15,2010);\nINSERT INTO  museum VALUES (8,ZirMed Gateway Museum,12,2009);\nCREATE TABLE visitor (\nID int,\nName text,\nLevel_of_membership int,\nAge int,\nPRIMARY KEY (ID)\n);\nINSERT INTO  visitor VALUES (1,Gonzalo Higuaín ,8,35);\nINSERT INTO  visitor VALUES (2,Guti Midfielder,5,28);\nINSERT INTO  visitor VALUES (3,Arjen Robben,1,27);\nINSERT INTO  visitor VALUES (4,Raúl Brown,2,56);\nINSERT INTO  visitor VALUES (5,Fernando Gago,6,36);\nINSERT INTO  visitor VALUES (6,Rafael van der Vaart,1,25);\nCREATE TABLE visit (\nMuseum_ID int,\nvisitor_ID text,\nNum_of_Ticket int,\nTotal_spent real,\nPRIMARY KEY (Museum_ID,visitor_ID),\nFOREIGN KEY (Museum_ID) REFERENCES museum(Museum_ID),\nFOREIGN KEY (visitor_ID) REFERENCES visitor(ID)\n);\nINSERT INTO  visit VALUES (1,5,20,320.14);\nINSERT INTO  visit VALUES (2,5,4,89.98);\nINSERT INTO  visit VALUES (4,3,10,320.44);\nINSERT INTO  visit VALUES (2,3,24,209.98);\nINSERT INTO  visit VALUES (4,6,3,20.44);\nINSERT INTO  visit VALUES (8,6,2,19.98);\n\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID  =  t2.Museum_ID WHERE t3.open_year  <  2009 INTERSECT SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID  =  t2.Museum_ID WHERE t3.open_year  >  2011","prompt":"What is the name of the visitor who visited both a museum opened before 2009 and a museum opened after 2011?"}
{"context":"\nPRAGMA foreign_keys = ON;\nCREATE TABLE museum (\nMuseum_ID int,\nName text,\nNum_of_Staff int,\nOpen_Year text,\nPRIMARY KEY (Museum_ID)\n);\n\nINSERT INTO  museum VALUES (1,Plaza Museum,62,2000);\nINSERT INTO  museum VALUES (2,Capital Plaza Museum,25,2012);\nINSERT INTO  museum VALUES (3,Jefferson Development Museum,18,2010);\nINSERT INTO  museum VALUES (4,Willow Grande Museum,17,2011);\nINSERT INTO  museum VALUES (5,RiverPark Museum,16,2008);\nINSERT INTO  museum VALUES (6,Place Tower Museum,16,2008);\nINSERT INTO  museum VALUES (7,Central City District Residential Museum,15,2010);\nINSERT INTO  museum VALUES (8,ZirMed Gateway Museum,12,2009);\nCREATE TABLE visitor (\nID int,\nName text,\nLevel_of_membership int,\nAge int,\nPRIMARY KEY (ID)\n);\nINSERT INTO  visitor VALUES (1,Gonzalo Higuaín ,8,35);\nINSERT INTO  visitor VALUES (2,Guti Midfielder,5,28);\nINSERT INTO  visitor VALUES (3,Arjen Robben,1,27);\nINSERT INTO  visitor VALUES (4,Raúl Brown,2,56);\nINSERT INTO  visitor VALUES (5,Fernando Gago,6,36);\nINSERT INTO  visitor VALUES (6,Rafael van der Vaart,1,25);\nCREATE TABLE visit (\nMuseum_ID int,\nvisitor_ID text,\nNum_of_Ticket int,\nTotal_spent real,\nPRIMARY KEY (Museum_ID,visitor_ID),\nFOREIGN KEY (Museum_ID) REFERENCES museum(Museum_ID),\nFOREIGN KEY (visitor_ID) REFERENCES visitor(ID)\n);\nINSERT INTO  visit VALUES (1,5,20,320.14);\nINSERT INTO  visit VALUES (2,5,4,89.98);\nINSERT INTO  visit VALUES (4,3,10,320.44);\nINSERT INTO  visit VALUES (2,3,24,209.98);\nINSERT INTO  visit VALUES (4,6,3,20.44);\nINSERT INTO  visit VALUES (8,6,2,19.98);\n\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT count(*) FROM visitor WHERE id NOT IN (SELECT t2.visitor_id FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID  =  t2.Museum_ID WHERE t1.open_year  >  2010)","prompt":"Find the number of visitors who did not visit any museum opened after 2010."}
{"context":"\nPRAGMA foreign_keys = ON;\nCREATE TABLE museum (\nMuseum_ID int,\nName text,\nNum_of_Staff int,\nOpen_Year text,\nPRIMARY KEY (Museum_ID)\n);\n\nINSERT INTO  museum VALUES (1,Plaza Museum,62,2000);\nINSERT INTO  museum VALUES (2,Capital Plaza Museum,25,2012);\nINSERT INTO  museum VALUES (3,Jefferson Development Museum,18,2010);\nINSERT INTO  museum VALUES (4,Willow Grande Museum,17,2011);\nINSERT INTO  museum VALUES (5,RiverPark Museum,16,2008);\nINSERT INTO  museum VALUES (6,Place Tower Museum,16,2008);\nINSERT INTO  museum VALUES (7,Central City District Residential Museum,15,2010);\nINSERT INTO  museum VALUES (8,ZirMed Gateway Museum,12,2009);\nCREATE TABLE visitor (\nID int,\nName text,\nLevel_of_membership int,\nAge int,\nPRIMARY KEY (ID)\n);\nINSERT INTO  visitor VALUES (1,Gonzalo Higuaín ,8,35);\nINSERT INTO  visitor VALUES (2,Guti Midfielder,5,28);\nINSERT INTO  visitor VALUES (3,Arjen Robben,1,27);\nINSERT INTO  visitor VALUES (4,Raúl Brown,2,56);\nINSERT INTO  visitor VALUES (5,Fernando Gago,6,36);\nINSERT INTO  visitor VALUES (6,Rafael van der Vaart,1,25);\nCREATE TABLE visit (\nMuseum_ID int,\nvisitor_ID text,\nNum_of_Ticket int,\nTotal_spent real,\nPRIMARY KEY (Museum_ID,visitor_ID),\nFOREIGN KEY (Museum_ID) REFERENCES museum(Museum_ID),\nFOREIGN KEY (visitor_ID) REFERENCES visitor(ID)\n);\nINSERT INTO  visit VALUES (1,5,20,320.14);\nINSERT INTO  visit VALUES (2,5,4,89.98);\nINSERT INTO  visit VALUES (4,3,10,320.44);\nINSERT INTO  visit VALUES (2,3,24,209.98);\nINSERT INTO  visit VALUES (4,6,3,20.44);\nINSERT INTO  visit VALUES (8,6,2,19.98);\n\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT count(*) FROM museum WHERE open_year  >  2013 OR open_year  <  2008","prompt":"How many museums were opened after 2013 or before 2008?"}
{"context":"CRloser_rank_pointsEATE TABLE players(\n    player_id INT PRIMARY KEY,\n    first_name TEXT,\n    last_name TEXT,\n    hand TEXT,\n    birth_date DATE,\n    country_code TEXT\n);\nCREATE TABLE matches(\n  best_of INT,\n  draw_size INT,\n  loser_age FLOAT,\n  loser_entry TEXT,\n  loser_hand TEXT,\n  loser_ht INT,\n  loser_id INT,\n  loser_ioc TEXT,\n  loser_name TEXT,\n  loser_rank INT,\n  loser_rank_points INT,\n  loser_seed INT,\n  match_num INT,\n  minutes INT,\n  round TEXT,\n  score TEXT,\n  surface TEXT,\n  tourney_date DATE,\n  tourney_id TEXT,\n  tourney_level TEXT,\n  tourney_name TEXT,\n  winner_age FLOAT,\n  winner_entry TEXT,\n  winner_hand TEXT,\n  winner_ht INT,\n  winner_id INT,\n  winner_ioc TEXT,\n  winner_name TEXT,\n  winner_rank INT,\n  winner_rank_points INT,\n  winner_seed INT,\n  year INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n);\n\nCREATE TABLE qualifying_matches(\n  best_of INT,\n  draw_size INT,\n  l_1stIn TEXT,\n  l_1stWon TEXT,\n  l_2ndWon TEXT,\n  l_SvGms TEXT,\n  l_ace TEXT,\n  l_bpFaced TEXT,\n  l_bpSaved TEXT,\n  l_df TEXT,\n  l_svpt TEXT,\n  loser_age FLOAT,\n  loser_entry TEXT,\n  loser_hand TEXT,\n  loser_ht INT,\n  loser_id INT,\n  loser_ioc TEXT,\n  loser_name TEXT,\n  loser_rank INT,\n  loser_rank_points INT,\n  loser_seed INT,\n  match_num INT,\n  minutes INT,\n  round TEXT,\n  score TEXT,\n  surface TEXT,\n  tourney_date DATE,\n  tourney_id TEXT,\n  tourney_level TEXT,\n  tourney_name TEXT,\n  w_1stIn TEXT,\n  w_1stWon TEXT,\n  w_2ndWon TEXT,\n  w_SvGms TEXT,\n  w_ace TEXT,\n  w_bpFaced TEXT,\n  w_bpSaved TEXT,\n  w_df TEXT,\n  w_svpt TEXT,\n  winner_age FLOAT,\n  winner_entry TEXT,\n  winner_hand TEXT,\n  winner_ht INT,\n  winner_id INT,\n  winner_ioc TEXT,\n  winner_name TEXT,\n  winner_rank INT,\n  winner_rank_points INT,\n  winner_seed INT,\n  year INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n);\nCREATE TABLE rankings(\n  ranking_date DATE,\n  ranking INT,\n  player_id INT,\n  ranking_points INT,\n  tours INT,\n  FOREIGN KEY(player_id) REFERENCES players(player_id)\n);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT count(*) FROM players","prompt":"Find the total number of players."}
{"context":"CRloser_rank_pointsEATE TABLE players(\n    player_id INT PRIMARY KEY,\n    first_name TEXT,\n    last_name TEXT,\n    hand TEXT,\n    birth_date DATE,\n    country_code TEXT\n);\nCREATE TABLE matches(\n  best_of INT,\n  draw_size INT,\n  loser_age FLOAT,\n  loser_entry TEXT,\n  loser_hand TEXT,\n  loser_ht INT,\n  loser_id INT,\n  loser_ioc TEXT,\n  loser_name TEXT,\n  loser_rank INT,\n  loser_rank_points INT,\n  loser_seed INT,\n  match_num INT,\n  minutes INT,\n  round TEXT,\n  score TEXT,\n  surface TEXT,\n  tourney_date DATE,\n  tourney_id TEXT,\n  tourney_level TEXT,\n  tourney_name TEXT,\n  winner_age FLOAT,\n  winner_entry TEXT,\n  winner_hand TEXT,\n  winner_ht INT,\n  winner_id INT,\n  winner_ioc TEXT,\n  winner_name TEXT,\n  winner_rank INT,\n  winner_rank_points INT,\n  winner_seed INT,\n  year INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n);\n\nCREATE TABLE qualifying_matches(\n  best_of INT,\n  draw_size INT,\n  l_1stIn TEXT,\n  l_1stWon TEXT,\n  l_2ndWon TEXT,\n  l_SvGms TEXT,\n  l_ace TEXT,\n  l_bpFaced TEXT,\n  l_bpSaved TEXT,\n  l_df TEXT,\n  l_svpt TEXT,\n  loser_age FLOAT,\n  loser_entry TEXT,\n  loser_hand TEXT,\n  loser_ht INT,\n  loser_id INT,\n  loser_ioc TEXT,\n  loser_name TEXT,\n  loser_rank INT,\n  loser_rank_points INT,\n  loser_seed INT,\n  match_num INT,\n  minutes INT,\n  round TEXT,\n  score TEXT,\n  surface TEXT,\n  tourney_date DATE,\n  tourney_id TEXT,\n  tourney_level TEXT,\n  tourney_name TEXT,\n  w_1stIn TEXT,\n  w_1stWon TEXT,\n  w_2ndWon TEXT,\n  w_SvGms TEXT,\n  w_ace TEXT,\n  w_bpFaced TEXT,\n  w_bpSaved TEXT,\n  w_df TEXT,\n  w_svpt TEXT,\n  winner_age FLOAT,\n  winner_entry TEXT,\n  winner_hand TEXT,\n  winner_ht INT,\n  winner_id INT,\n  winner_ioc TEXT,\n  winner_name TEXT,\n  winner_rank INT,\n  winner_rank_points INT,\n  winner_seed INT,\n  year INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n);\nCREATE TABLE rankings(\n  ranking_date DATE,\n  ranking INT,\n  player_id INT,\n  ranking_points INT,\n  tours INT,\n  FOREIGN KEY(player_id) REFERENCES players(player_id)\n);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT count(*) FROM players","prompt":"How many players are there?"}
{"context":"CRloser_rank_pointsEATE TABLE players(\n    player_id INT PRIMARY KEY,\n    first_name TEXT,\n    last_name TEXT,\n    hand TEXT,\n    birth_date DATE,\n    country_code TEXT\n);\nCREATE TABLE matches(\n  best_of INT,\n  draw_size INT,\n  loser_age FLOAT,\n  loser_entry TEXT,\n  loser_hand TEXT,\n  loser_ht INT,\n  loser_id INT,\n  loser_ioc TEXT,\n  loser_name TEXT,\n  loser_rank INT,\n  loser_rank_points INT,\n  loser_seed INT,\n  match_num INT,\n  minutes INT,\n  round TEXT,\n  score TEXT,\n  surface TEXT,\n  tourney_date DATE,\n  tourney_id TEXT,\n  tourney_level TEXT,\n  tourney_name TEXT,\n  winner_age FLOAT,\n  winner_entry TEXT,\n  winner_hand TEXT,\n  winner_ht INT,\n  winner_id INT,\n  winner_ioc TEXT,\n  winner_name TEXT,\n  winner_rank INT,\n  winner_rank_points INT,\n  winner_seed INT,\n  year INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n);\n\nCREATE TABLE qualifying_matches(\n  best_of INT,\n  draw_size INT,\n  l_1stIn TEXT,\n  l_1stWon TEXT,\n  l_2ndWon TEXT,\n  l_SvGms TEXT,\n  l_ace TEXT,\n  l_bpFaced TEXT,\n  l_bpSaved TEXT,\n  l_df TEXT,\n  l_svpt TEXT,\n  loser_age FLOAT,\n  loser_entry TEXT,\n  loser_hand TEXT,\n  loser_ht INT,\n  loser_id INT,\n  loser_ioc TEXT,\n  loser_name TEXT,\n  loser_rank INT,\n  loser_rank_points INT,\n  loser_seed INT,\n  match_num INT,\n  minutes INT,\n  round TEXT,\n  score TEXT,\n  surface TEXT,\n  tourney_date DATE,\n  tourney_id TEXT,\n  tourney_level TEXT,\n  tourney_name TEXT,\n  w_1stIn TEXT,\n  w_1stWon TEXT,\n  w_2ndWon TEXT,\n  w_SvGms TEXT,\n  w_ace TEXT,\n  w_bpFaced TEXT,\n  w_bpSaved TEXT,\n  w_df TEXT,\n  w_svpt TEXT,\n  winner_age FLOAT,\n  winner_entry TEXT,\n  winner_hand TEXT,\n  winner_ht INT,\n  winner_id INT,\n  winner_ioc TEXT,\n  winner_name TEXT,\n  winner_rank INT,\n  winner_rank_points INT,\n  winner_seed INT,\n  year INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n);\nCREATE TABLE rankings(\n  ranking_date DATE,\n  ranking INT,\n  player_id INT,\n  ranking_points INT,\n  tours INT,\n  FOREIGN KEY(player_id) REFERENCES players(player_id)\n);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT count(*) FROM matches","prompt":"Find the total number of matches."}
{"context":"CRloser_rank_pointsEATE TABLE players(\n    player_id INT PRIMARY KEY,\n    first_name TEXT,\n    last_name TEXT,\n    hand TEXT,\n    birth_date DATE,\n    country_code TEXT\n);\nCREATE TABLE matches(\n  best_of INT,\n  draw_size INT,\n  loser_age FLOAT,\n  loser_entry TEXT,\n  loser_hand TEXT,\n  loser_ht INT,\n  loser_id INT,\n  loser_ioc TEXT,\n  loser_name TEXT,\n  loser_rank INT,\n  loser_rank_points INT,\n  loser_seed INT,\n  match_num INT,\n  minutes INT,\n  round TEXT,\n  score TEXT,\n  surface TEXT,\n  tourney_date DATE,\n  tourney_id TEXT,\n  tourney_level TEXT,\n  tourney_name TEXT,\n  winner_age FLOAT,\n  winner_entry TEXT,\n  winner_hand TEXT,\n  winner_ht INT,\n  winner_id INT,\n  winner_ioc TEXT,\n  winner_name TEXT,\n  winner_rank INT,\n  winner_rank_points INT,\n  winner_seed INT,\n  year INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n);\n\nCREATE TABLE qualifying_matches(\n  best_of INT,\n  draw_size INT,\n  l_1stIn TEXT,\n  l_1stWon TEXT,\n  l_2ndWon TEXT,\n  l_SvGms TEXT,\n  l_ace TEXT,\n  l_bpFaced TEXT,\n  l_bpSaved TEXT,\n  l_df TEXT,\n  l_svpt TEXT,\n  loser_age FLOAT,\n  loser_entry TEXT,\n  loser_hand TEXT,\n  loser_ht INT,\n  loser_id INT,\n  loser_ioc TEXT,\n  loser_name TEXT,\n  loser_rank INT,\n  loser_rank_points INT,\n  loser_seed INT,\n  match_num INT,\n  minutes INT,\n  round TEXT,\n  score TEXT,\n  surface TEXT,\n  tourney_date DATE,\n  tourney_id TEXT,\n  tourney_level TEXT,\n  tourney_name TEXT,\n  w_1stIn TEXT,\n  w_1stWon TEXT,\n  w_2ndWon TEXT,\n  w_SvGms TEXT,\n  w_ace TEXT,\n  w_bpFaced TEXT,\n  w_bpSaved TEXT,\n  w_df TEXT,\n  w_svpt TEXT,\n  winner_age FLOAT,\n  winner_entry TEXT,\n  winner_hand TEXT,\n  winner_ht INT,\n  winner_id INT,\n  winner_ioc TEXT,\n  winner_name TEXT,\n  winner_rank INT,\n  winner_rank_points INT,\n  winner_seed INT,\n  year INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n);\nCREATE TABLE rankings(\n  ranking_date DATE,\n  ranking INT,\n  player_id INT,\n  ranking_points INT,\n  tours INT,\n  FOREIGN KEY(player_id) REFERENCES players(player_id)\n);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT count(*) FROM matches","prompt":"Count the number of matches."}
{"context":"CRloser_rank_pointsEATE TABLE players(\n    player_id INT PRIMARY KEY,\n    first_name TEXT,\n    last_name TEXT,\n    hand TEXT,\n    birth_date DATE,\n    country_code TEXT\n);\nCREATE TABLE matches(\n  best_of INT,\n  draw_size INT,\n  loser_age FLOAT,\n  loser_entry TEXT,\n  loser_hand TEXT,\n  loser_ht INT,\n  loser_id INT,\n  loser_ioc TEXT,\n  loser_name TEXT,\n  loser_rank INT,\n  loser_rank_points INT,\n  loser_seed INT,\n  match_num INT,\n  minutes INT,\n  round TEXT,\n  score TEXT,\n  surface TEXT,\n  tourney_date DATE,\n  tourney_id TEXT,\n  tourney_level TEXT,\n  tourney_name TEXT,\n  winner_age FLOAT,\n  winner_entry TEXT,\n  winner_hand TEXT,\n  winner_ht INT,\n  winner_id INT,\n  winner_ioc TEXT,\n  winner_name TEXT,\n  winner_rank INT,\n  winner_rank_points INT,\n  winner_seed INT,\n  year INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n);\n\nCREATE TABLE qualifying_matches(\n  best_of INT,\n  draw_size INT,\n  l_1stIn TEXT,\n  l_1stWon TEXT,\n  l_2ndWon TEXT,\n  l_SvGms TEXT,\n  l_ace TEXT,\n  l_bpFaced TEXT,\n  l_bpSaved TEXT,\n  l_df TEXT,\n  l_svpt TEXT,\n  loser_age FLOAT,\n  loser_entry TEXT,\n  loser_hand TEXT,\n  loser_ht INT,\n  loser_id INT,\n  loser_ioc TEXT,\n  loser_name TEXT,\n  loser_rank INT,\n  loser_rank_points INT,\n  loser_seed INT,\n  match_num INT,\n  minutes INT,\n  round TEXT,\n  score TEXT,\n  surface TEXT,\n  tourney_date DATE,\n  tourney_id TEXT,\n  tourney_level TEXT,\n  tourney_name TEXT,\n  w_1stIn TEXT,\n  w_1stWon TEXT,\n  w_2ndWon TEXT,\n  w_SvGms TEXT,\n  w_ace TEXT,\n  w_bpFaced TEXT,\n  w_bpSaved TEXT,\n  w_df TEXT,\n  w_svpt TEXT,\n  winner_age FLOAT,\n  winner_entry TEXT,\n  winner_hand TEXT,\n  winner_ht INT,\n  winner_id INT,\n  winner_ioc TEXT,\n  winner_name TEXT,\n  winner_rank INT,\n  winner_rank_points INT,\n  winner_seed INT,\n  year INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n);\nCREATE TABLE rankings(\n  ranking_date DATE,\n  ranking INT,\n  player_id INT,\n  ranking_points INT,\n  tours INT,\n  FOREIGN KEY(player_id) REFERENCES players(player_id)\n);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'","prompt":"List the first name and birth date of all players from the country with code USA."}
{"context":"CRloser_rank_pointsEATE TABLE players(\n    player_id INT PRIMARY KEY,\n    first_name TEXT,\n    last_name TEXT,\n    hand TEXT,\n    birth_date DATE,\n    country_code TEXT\n);\nCREATE TABLE matches(\n  best_of INT,\n  draw_size INT,\n  loser_age FLOAT,\n  loser_entry TEXT,\n  loser_hand TEXT,\n  loser_ht INT,\n  loser_id INT,\n  loser_ioc TEXT,\n  loser_name TEXT,\n  loser_rank INT,\n  loser_rank_points INT,\n  loser_seed INT,\n  match_num INT,\n  minutes INT,\n  round TEXT,\n  score TEXT,\n  surface TEXT,\n  tourney_date DATE,\n  tourney_id TEXT,\n  tourney_level TEXT,\n  tourney_name TEXT,\n  winner_age FLOAT,\n  winner_entry TEXT,\n  winner_hand TEXT,\n  winner_ht INT,\n  winner_id INT,\n  winner_ioc TEXT,\n  winner_name TEXT,\n  winner_rank INT,\n  winner_rank_points INT,\n  winner_seed INT,\n  year INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n);\n\nCREATE TABLE qualifying_matches(\n  best_of INT,\n  draw_size INT,\n  l_1stIn TEXT,\n  l_1stWon TEXT,\n  l_2ndWon TEXT,\n  l_SvGms TEXT,\n  l_ace TEXT,\n  l_bpFaced TEXT,\n  l_bpSaved TEXT,\n  l_df TEXT,\n  l_svpt TEXT,\n  loser_age FLOAT,\n  loser_entry TEXT,\n  loser_hand TEXT,\n  loser_ht INT,\n  loser_id INT,\n  loser_ioc TEXT,\n  loser_name TEXT,\n  loser_rank INT,\n  loser_rank_points INT,\n  loser_seed INT,\n  match_num INT,\n  minutes INT,\n  round TEXT,\n  score TEXT,\n  surface TEXT,\n  tourney_date DATE,\n  tourney_id TEXT,\n  tourney_level TEXT,\n  tourney_name TEXT,\n  w_1stIn TEXT,\n  w_1stWon TEXT,\n  w_2ndWon TEXT,\n  w_SvGms TEXT,\n  w_ace TEXT,\n  w_bpFaced TEXT,\n  w_bpSaved TEXT,\n  w_df TEXT,\n  w_svpt TEXT,\n  winner_age FLOAT,\n  winner_entry TEXT,\n  winner_hand TEXT,\n  winner_ht INT,\n  winner_id INT,\n  winner_ioc TEXT,\n  winner_name TEXT,\n  winner_rank INT,\n  winner_rank_points INT,\n  winner_seed INT,\n  year INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n);\nCREATE TABLE rankings(\n  ranking_date DATE,\n  ranking INT,\n  player_id INT,\n  ranking_points INT,\n  tours INT,\n  FOREIGN KEY(player_id) REFERENCES players(player_id)\n);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'","prompt":"What are the first names and birth dates of players from the USA?"}
{"context":"CRloser_rank_pointsEATE TABLE players(\n    player_id INT PRIMARY KEY,\n    first_name TEXT,\n    last_name TEXT,\n    hand TEXT,\n    birth_date DATE,\n    country_code TEXT\n);\nCREATE TABLE matches(\n  best_of INT,\n  draw_size INT,\n  loser_age FLOAT,\n  loser_entry TEXT,\n  loser_hand TEXT,\n  loser_ht INT,\n  loser_id INT,\n  loser_ioc TEXT,\n  loser_name TEXT,\n  loser_rank INT,\n  loser_rank_points INT,\n  loser_seed INT,\n  match_num INT,\n  minutes INT,\n  round TEXT,\n  score TEXT,\n  surface TEXT,\n  tourney_date DATE,\n  tourney_id TEXT,\n  tourney_level TEXT,\n  tourney_name TEXT,\n  winner_age FLOAT,\n  winner_entry TEXT,\n  winner_hand TEXT,\n  winner_ht INT,\n  winner_id INT,\n  winner_ioc TEXT,\n  winner_name TEXT,\n  winner_rank INT,\n  winner_rank_points INT,\n  winner_seed INT,\n  year INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n);\n\nCREATE TABLE qualifying_matches(\n  best_of INT,\n  draw_size INT,\n  l_1stIn TEXT,\n  l_1stWon TEXT,\n  l_2ndWon TEXT,\n  l_SvGms TEXT,\n  l_ace TEXT,\n  l_bpFaced TEXT,\n  l_bpSaved TEXT,\n  l_df TEXT,\n  l_svpt TEXT,\n  loser_age FLOAT,\n  loser_entry TEXT,\n  loser_hand TEXT,\n  loser_ht INT,\n  loser_id INT,\n  loser_ioc TEXT,\n  loser_name TEXT,\n  loser_rank INT,\n  loser_rank_points INT,\n  loser_seed INT,\n  match_num INT,\n  minutes INT,\n  round TEXT,\n  score TEXT,\n  surface TEXT,\n  tourney_date DATE,\n  tourney_id TEXT,\n  tourney_level TEXT,\n  tourney_name TEXT,\n  w_1stIn TEXT,\n  w_1stWon TEXT,\n  w_2ndWon TEXT,\n  w_SvGms TEXT,\n  w_ace TEXT,\n  w_bpFaced TEXT,\n  w_bpSaved TEXT,\n  w_df TEXT,\n  w_svpt TEXT,\n  winner_age FLOAT,\n  winner_entry TEXT,\n  winner_hand TEXT,\n  winner_ht INT,\n  winner_id INT,\n  winner_ioc TEXT,\n  winner_name TEXT,\n  winner_rank INT,\n  winner_rank_points INT,\n  winner_seed INT,\n  year INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n);\nCREATE TABLE rankings(\n  ranking_date DATE,\n  ranking INT,\n  player_id INT,\n  ranking_points INT,\n  tours INT,\n  FOREIGN KEY(player_id) REFERENCES players(player_id)\n);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT avg(loser_age) ,  avg(winner_age) FROM matches","prompt":"Find the average age of losers and winners of all matches."}
{"context":"CRloser_rank_pointsEATE TABLE players(\n    player_id INT PRIMARY KEY,\n    first_name TEXT,\n    last_name TEXT,\n    hand TEXT,\n    birth_date DATE,\n    country_code TEXT\n);\nCREATE TABLE matches(\n  best_of INT,\n  draw_size INT,\n  loser_age FLOAT,\n  loser_entry TEXT,\n  loser_hand TEXT,\n  loser_ht INT,\n  loser_id INT,\n  loser_ioc TEXT,\n  loser_name TEXT,\n  loser_rank INT,\n  loser_rank_points INT,\n  loser_seed INT,\n  match_num INT,\n  minutes INT,\n  round TEXT,\n  score TEXT,\n  surface TEXT,\n  tourney_date DATE,\n  tourney_id TEXT,\n  tourney_level TEXT,\n  tourney_name TEXT,\n  winner_age FLOAT,\n  winner_entry TEXT,\n  winner_hand TEXT,\n  winner_ht INT,\n  winner_id INT,\n  winner_ioc TEXT,\n  winner_name TEXT,\n  winner_rank INT,\n  winner_rank_points INT,\n  winner_seed INT,\n  year INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n);\n\nCREATE TABLE qualifying_matches(\n  best_of INT,\n  draw_size INT,\n  l_1stIn TEXT,\n  l_1stWon TEXT,\n  l_2ndWon TEXT,\n  l_SvGms TEXT,\n  l_ace TEXT,\n  l_bpFaced TEXT,\n  l_bpSaved TEXT,\n  l_df TEXT,\n  l_svpt TEXT,\n  loser_age FLOAT,\n  loser_entry TEXT,\n  loser_hand TEXT,\n  loser_ht INT,\n  loser_id INT,\n  loser_ioc TEXT,\n  loser_name TEXT,\n  loser_rank INT,\n  loser_rank_points INT,\n  loser_seed INT,\n  match_num INT,\n  minutes INT,\n  round TEXT,\n  score TEXT,\n  surface TEXT,\n  tourney_date DATE,\n  tourney_id TEXT,\n  tourney_level TEXT,\n  tourney_name TEXT,\n  w_1stIn TEXT,\n  w_1stWon TEXT,\n  w_2ndWon TEXT,\n  w_SvGms TEXT,\n  w_ace TEXT,\n  w_bpFaced TEXT,\n  w_bpSaved TEXT,\n  w_df TEXT,\n  w_svpt TEXT,\n  winner_age FLOAT,\n  winner_entry TEXT,\n  winner_hand TEXT,\n  winner_ht INT,\n  winner_id INT,\n  winner_ioc TEXT,\n  winner_name TEXT,\n  winner_rank INT,\n  winner_rank_points INT,\n  winner_seed INT,\n  year INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n);\nCREATE TABLE rankings(\n  ranking_date DATE,\n  ranking INT,\n  player_id INT,\n  ranking_points INT,\n  tours INT,\n  FOREIGN KEY(player_id) REFERENCES players(player_id)\n);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT avg(loser_age) ,  avg(winner_age) FROM matches","prompt":"What are the average ages of losers and winners across matches?"}
{"context":"CRloser_rank_pointsEATE TABLE players(\n    player_id INT PRIMARY KEY,\n    first_name TEXT,\n    last_name TEXT,\n    hand TEXT,\n    birth_date DATE,\n    country_code TEXT\n);\nCREATE TABLE matches(\n  best_of INT,\n  draw_size INT,\n  loser_age FLOAT,\n  loser_entry TEXT,\n  loser_hand TEXT,\n  loser_ht INT,\n  loser_id INT,\n  loser_ioc TEXT,\n  loser_name TEXT,\n  loser_rank INT,\n  loser_rank_points INT,\n  loser_seed INT,\n  match_num INT,\n  minutes INT,\n  round TEXT,\n  score TEXT,\n  surface TEXT,\n  tourney_date DATE,\n  tourney_id TEXT,\n  tourney_level TEXT,\n  tourney_name TEXT,\n  winner_age FLOAT,\n  winner_entry TEXT,\n  winner_hand TEXT,\n  winner_ht INT,\n  winner_id INT,\n  winner_ioc TEXT,\n  winner_name TEXT,\n  winner_rank INT,\n  winner_rank_points INT,\n  winner_seed INT,\n  year INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n);\n\nCREATE TABLE qualifying_matches(\n  best_of INT,\n  draw_size INT,\n  l_1stIn TEXT,\n  l_1stWon TEXT,\n  l_2ndWon TEXT,\n  l_SvGms TEXT,\n  l_ace TEXT,\n  l_bpFaced TEXT,\n  l_bpSaved TEXT,\n  l_df TEXT,\n  l_svpt TEXT,\n  loser_age FLOAT,\n  loser_entry TEXT,\n  loser_hand TEXT,\n  loser_ht INT,\n  loser_id INT,\n  loser_ioc TEXT,\n  loser_name TEXT,\n  loser_rank INT,\n  loser_rank_points INT,\n  loser_seed INT,\n  match_num INT,\n  minutes INT,\n  round TEXT,\n  score TEXT,\n  surface TEXT,\n  tourney_date DATE,\n  tourney_id TEXT,\n  tourney_level TEXT,\n  tourney_name TEXT,\n  w_1stIn TEXT,\n  w_1stWon TEXT,\n  w_2ndWon TEXT,\n  w_SvGms TEXT,\n  w_ace TEXT,\n  w_bpFaced TEXT,\n  w_bpSaved TEXT,\n  w_df TEXT,\n  w_svpt TEXT,\n  winner_age FLOAT,\n  winner_entry TEXT,\n  winner_hand TEXT,\n  winner_ht INT,\n  winner_id INT,\n  winner_ioc TEXT,\n  winner_name TEXT,\n  winner_rank INT,\n  winner_rank_points INT,\n  winner_seed INT,\n  year INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n);\nCREATE TABLE rankings(\n  ranking_date DATE,\n  ranking INT,\n  player_id INT,\n  ranking_points INT,\n  tours INT,\n  FOREIGN KEY(player_id) REFERENCES players(player_id)\n);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT avg(winner_rank) FROM matches","prompt":"Find the average rank of winners in all matches."}
{"context":"CRloser_rank_pointsEATE TABLE players(\n    player_id INT PRIMARY KEY,\n    first_name TEXT,\n    last_name TEXT,\n    hand TEXT,\n    birth_date DATE,\n    country_code TEXT\n);\nCREATE TABLE matches(\n  best_of INT,\n  draw_size INT,\n  loser_age FLOAT,\n  loser_entry TEXT,\n  loser_hand TEXT,\n  loser_ht INT,\n  loser_id INT,\n  loser_ioc TEXT,\n  loser_name TEXT,\n  loser_rank INT,\n  loser_rank_points INT,\n  loser_seed INT,\n  match_num INT,\n  minutes INT,\n  round TEXT,\n  score TEXT,\n  surface TEXT,\n  tourney_date DATE,\n  tourney_id TEXT,\n  tourney_level TEXT,\n  tourney_name TEXT,\n  winner_age FLOAT,\n  winner_entry TEXT,\n  winner_hand TEXT,\n  winner_ht INT,\n  winner_id INT,\n  winner_ioc TEXT,\n  winner_name TEXT,\n  winner_rank INT,\n  winner_rank_points INT,\n  winner_seed INT,\n  year INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n);\n\nCREATE TABLE qualifying_matches(\n  best_of INT,\n  draw_size INT,\n  l_1stIn TEXT,\n  l_1stWon TEXT,\n  l_2ndWon TEXT,\n  l_SvGms TEXT,\n  l_ace TEXT,\n  l_bpFaced TEXT,\n  l_bpSaved TEXT,\n  l_df TEXT,\n  l_svpt TEXT,\n  loser_age FLOAT,\n  loser_entry TEXT,\n  loser_hand TEXT,\n  loser_ht INT,\n  loser_id INT,\n  loser_ioc TEXT,\n  loser_name TEXT,\n  loser_rank INT,\n  loser_rank_points INT,\n  loser_seed INT,\n  match_num INT,\n  minutes INT,\n  round TEXT,\n  score TEXT,\n  surface TEXT,\n  tourney_date DATE,\n  tourney_id TEXT,\n  tourney_level TEXT,\n  tourney_name TEXT,\n  w_1stIn TEXT,\n  w_1stWon TEXT,\n  w_2ndWon TEXT,\n  w_SvGms TEXT,\n  w_ace TEXT,\n  w_bpFaced TEXT,\n  w_bpSaved TEXT,\n  w_df TEXT,\n  w_svpt TEXT,\n  winner_age FLOAT,\n  winner_entry TEXT,\n  winner_hand TEXT,\n  winner_ht INT,\n  winner_id INT,\n  winner_ioc TEXT,\n  winner_name TEXT,\n  winner_rank INT,\n  winner_rank_points INT,\n  winner_seed INT,\n  year INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n);\nCREATE TABLE rankings(\n  ranking_date DATE,\n  ranking INT,\n  player_id INT,\n  ranking_points INT,\n  tours INT,\n  FOREIGN KEY(player_id) REFERENCES players(player_id)\n);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT avg(winner_rank) FROM matches","prompt":"What is the average rank for winners in all matches?"}
{"context":"CRloser_rank_pointsEATE TABLE players(\n    player_id INT PRIMARY KEY,\n    first_name TEXT,\n    last_name TEXT,\n    hand TEXT,\n    birth_date DATE,\n    country_code TEXT\n);\nCREATE TABLE matches(\n  best_of INT,\n  draw_size INT,\n  loser_age FLOAT,\n  loser_entry TEXT,\n  loser_hand TEXT,\n  loser_ht INT,\n  loser_id INT,\n  loser_ioc TEXT,\n  loser_name TEXT,\n  loser_rank INT,\n  loser_rank_points INT,\n  loser_seed INT,\n  match_num INT,\n  minutes INT,\n  round TEXT,\n  score TEXT,\n  surface TEXT,\n  tourney_date DATE,\n  tourney_id TEXT,\n  tourney_level TEXT,\n  tourney_name TEXT,\n  winner_age FLOAT,\n  winner_entry TEXT,\n  winner_hand TEXT,\n  winner_ht INT,\n  winner_id INT,\n  winner_ioc TEXT,\n  winner_name TEXT,\n  winner_rank INT,\n  winner_rank_points INT,\n  winner_seed INT,\n  year INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n);\n\nCREATE TABLE qualifying_matches(\n  best_of INT,\n  draw_size INT,\n  l_1stIn TEXT,\n  l_1stWon TEXT,\n  l_2ndWon TEXT,\n  l_SvGms TEXT,\n  l_ace TEXT,\n  l_bpFaced TEXT,\n  l_bpSaved TEXT,\n  l_df TEXT,\n  l_svpt TEXT,\n  loser_age FLOAT,\n  loser_entry TEXT,\n  loser_hand TEXT,\n  loser_ht INT,\n  loser_id INT,\n  loser_ioc TEXT,\n  loser_name TEXT,\n  loser_rank INT,\n  loser_rank_points INT,\n  loser_seed INT,\n  match_num INT,\n  minutes INT,\n  round TEXT,\n  score TEXT,\n  surface TEXT,\n  tourney_date DATE,\n  tourney_id TEXT,\n  tourney_level TEXT,\n  tourney_name TEXT,\n  w_1stIn TEXT,\n  w_1stWon TEXT,\n  w_2ndWon TEXT,\n  w_SvGms TEXT,\n  w_ace TEXT,\n  w_bpFaced TEXT,\n  w_bpSaved TEXT,\n  w_df TEXT,\n  w_svpt TEXT,\n  winner_age FLOAT,\n  winner_entry TEXT,\n  winner_hand TEXT,\n  winner_ht INT,\n  winner_id INT,\n  winner_ioc TEXT,\n  winner_name TEXT,\n  winner_rank INT,\n  winner_rank_points INT,\n  winner_seed INT,\n  year INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n);\nCREATE TABLE rankings(\n  ranking_date DATE,\n  ranking INT,\n  player_id INT,\n  ranking_points INT,\n  tours INT,\n  FOREIGN KEY(player_id) REFERENCES players(player_id)\n);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT min(loser_rank) FROM matches","prompt":"Find the highest rank of losers in all matches."}
{"context":"CRloser_rank_pointsEATE TABLE players(\n    player_id INT PRIMARY KEY,\n    first_name TEXT,\n    last_name TEXT,\n    hand TEXT,\n    birth_date DATE,\n    country_code TEXT\n);\nCREATE TABLE matches(\n  best_of INT,\n  draw_size INT,\n  loser_age FLOAT,\n  loser_entry TEXT,\n  loser_hand TEXT,\n  loser_ht INT,\n  loser_id INT,\n  loser_ioc TEXT,\n  loser_name TEXT,\n  loser_rank INT,\n  loser_rank_points INT,\n  loser_seed INT,\n  match_num INT,\n  minutes INT,\n  round TEXT,\n  score TEXT,\n  surface TEXT,\n  tourney_date DATE,\n  tourney_id TEXT,\n  tourney_level TEXT,\n  tourney_name TEXT,\n  winner_age FLOAT,\n  winner_entry TEXT,\n  winner_hand TEXT,\n  winner_ht INT,\n  winner_id INT,\n  winner_ioc TEXT,\n  winner_name TEXT,\n  winner_rank INT,\n  winner_rank_points INT,\n  winner_seed INT,\n  year INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n);\n\nCREATE TABLE qualifying_matches(\n  best_of INT,\n  draw_size INT,\n  l_1stIn TEXT,\n  l_1stWon TEXT,\n  l_2ndWon TEXT,\n  l_SvGms TEXT,\n  l_ace TEXT,\n  l_bpFaced TEXT,\n  l_bpSaved TEXT,\n  l_df TEXT,\n  l_svpt TEXT,\n  loser_age FLOAT,\n  loser_entry TEXT,\n  loser_hand TEXT,\n  loser_ht INT,\n  loser_id INT,\n  loser_ioc TEXT,\n  loser_name TEXT,\n  loser_rank INT,\n  loser_rank_points INT,\n  loser_seed INT,\n  match_num INT,\n  minutes INT,\n  round TEXT,\n  score TEXT,\n  surface TEXT,\n  tourney_date DATE,\n  tourney_id TEXT,\n  tourney_level TEXT,\n  tourney_name TEXT,\n  w_1stIn TEXT,\n  w_1stWon TEXT,\n  w_2ndWon TEXT,\n  w_SvGms TEXT,\n  w_ace TEXT,\n  w_bpFaced TEXT,\n  w_bpSaved TEXT,\n  w_df TEXT,\n  w_svpt TEXT,\n  winner_age FLOAT,\n  winner_entry TEXT,\n  winner_hand TEXT,\n  winner_ht INT,\n  winner_id INT,\n  winner_ioc TEXT,\n  winner_name TEXT,\n  winner_rank INT,\n  winner_rank_points INT,\n  winner_seed INT,\n  year INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n);\nCREATE TABLE rankings(\n  ranking_date DATE,\n  ranking INT,\n  player_id INT,\n  ranking_points INT,\n  tours INT,\n  FOREIGN KEY(player_id) REFERENCES players(player_id)\n);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT min(loser_rank) FROM matches","prompt":"What is the best rank of losers across all matches?"}
{"context":"CRloser_rank_pointsEATE TABLE players(\n    player_id INT PRIMARY KEY,\n    first_name TEXT,\n    last_name TEXT,\n    hand TEXT,\n    birth_date DATE,\n    country_code TEXT\n);\nCREATE TABLE matches(\n  best_of INT,\n  draw_size INT,\n  loser_age FLOAT,\n  loser_entry TEXT,\n  loser_hand TEXT,\n  loser_ht INT,\n  loser_id INT,\n  loser_ioc TEXT,\n  loser_name TEXT,\n  loser_rank INT,\n  loser_rank_points INT,\n  loser_seed INT,\n  match_num INT,\n  minutes INT,\n  round TEXT,\n  score TEXT,\n  surface TEXT,\n  tourney_date DATE,\n  tourney_id TEXT,\n  tourney_level TEXT,\n  tourney_name TEXT,\n  winner_age FLOAT,\n  winner_entry TEXT,\n  winner_hand TEXT,\n  winner_ht INT,\n  winner_id INT,\n  winner_ioc TEXT,\n  winner_name TEXT,\n  winner_rank INT,\n  winner_rank_points INT,\n  winner_seed INT,\n  year INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n);\n\nCREATE TABLE qualifying_matches(\n  best_of INT,\n  draw_size INT,\n  l_1stIn TEXT,\n  l_1stWon TEXT,\n  l_2ndWon TEXT,\n  l_SvGms TEXT,\n  l_ace TEXT,\n  l_bpFaced TEXT,\n  l_bpSaved TEXT,\n  l_df TEXT,\n  l_svpt TEXT,\n  loser_age FLOAT,\n  loser_entry TEXT,\n  loser_hand TEXT,\n  loser_ht INT,\n  loser_id INT,\n  loser_ioc TEXT,\n  loser_name TEXT,\n  loser_rank INT,\n  loser_rank_points INT,\n  loser_seed INT,\n  match_num INT,\n  minutes INT,\n  round TEXT,\n  score TEXT,\n  surface TEXT,\n  tourney_date DATE,\n  tourney_id TEXT,\n  tourney_level TEXT,\n  tourney_name TEXT,\n  w_1stIn TEXT,\n  w_1stWon TEXT,\n  w_2ndWon TEXT,\n  w_SvGms TEXT,\n  w_ace TEXT,\n  w_bpFaced TEXT,\n  w_bpSaved TEXT,\n  w_df TEXT,\n  w_svpt TEXT,\n  winner_age FLOAT,\n  winner_entry TEXT,\n  winner_hand TEXT,\n  winner_ht INT,\n  winner_id INT,\n  winner_ioc TEXT,\n  winner_name TEXT,\n  winner_rank INT,\n  winner_rank_points INT,\n  winner_seed INT,\n  year INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n);\nCREATE TABLE rankings(\n  ranking_date DATE,\n  ranking INT,\n  player_id INT,\n  ranking_points INT,\n  tours INT,\n  FOREIGN KEY(player_id) REFERENCES players(player_id)\n);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT count(DISTINCT country_code) FROM players","prompt":"find the number of distinct country codes of all players."}
{"context":"CRloser_rank_pointsEATE TABLE players(\n    player_id INT PRIMARY KEY,\n    first_name TEXT,\n    last_name TEXT,\n    hand TEXT,\n    birth_date DATE,\n    country_code TEXT\n);\nCREATE TABLE matches(\n  best_of INT,\n  draw_size INT,\n  loser_age FLOAT,\n  loser_entry TEXT,\n  loser_hand TEXT,\n  loser_ht INT,\n  loser_id INT,\n  loser_ioc TEXT,\n  loser_name TEXT,\n  loser_rank INT,\n  loser_rank_points INT,\n  loser_seed INT,\n  match_num INT,\n  minutes INT,\n  round TEXT,\n  score TEXT,\n  surface TEXT,\n  tourney_date DATE,\n  tourney_id TEXT,\n  tourney_level TEXT,\n  tourney_name TEXT,\n  winner_age FLOAT,\n  winner_entry TEXT,\n  winner_hand TEXT,\n  winner_ht INT,\n  winner_id INT,\n  winner_ioc TEXT,\n  winner_name TEXT,\n  winner_rank INT,\n  winner_rank_points INT,\n  winner_seed INT,\n  year INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n);\n\nCREATE TABLE qualifying_matches(\n  best_of INT,\n  draw_size INT,\n  l_1stIn TEXT,\n  l_1stWon TEXT,\n  l_2ndWon TEXT,\n  l_SvGms TEXT,\n  l_ace TEXT,\n  l_bpFaced TEXT,\n  l_bpSaved TEXT,\n  l_df TEXT,\n  l_svpt TEXT,\n  loser_age FLOAT,\n  loser_entry TEXT,\n  loser_hand TEXT,\n  loser_ht INT,\n  loser_id INT,\n  loser_ioc TEXT,\n  loser_name TEXT,\n  loser_rank INT,\n  loser_rank_points INT,\n  loser_seed INT,\n  match_num INT,\n  minutes INT,\n  round TEXT,\n  score TEXT,\n  surface TEXT,\n  tourney_date DATE,\n  tourney_id TEXT,\n  tourney_level TEXT,\n  tourney_name TEXT,\n  w_1stIn TEXT,\n  w_1stWon TEXT,\n  w_2ndWon TEXT,\n  w_SvGms TEXT,\n  w_ace TEXT,\n  w_bpFaced TEXT,\n  w_bpSaved TEXT,\n  w_df TEXT,\n  w_svpt TEXT,\n  winner_age FLOAT,\n  winner_entry TEXT,\n  winner_hand TEXT,\n  winner_ht INT,\n  winner_id INT,\n  winner_ioc TEXT,\n  winner_name TEXT,\n  winner_rank INT,\n  winner_rank_points INT,\n  winner_seed INT,\n  year INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n);\nCREATE TABLE rankings(\n  ranking_date DATE,\n  ranking INT,\n  player_id INT,\n  ranking_points INT,\n  tours INT,\n  FOREIGN KEY(player_id) REFERENCES players(player_id)\n);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT count(DISTINCT country_code) FROM players","prompt":"How many distinct countries do players come from?"}
{"context":"CRloser_rank_pointsEATE TABLE players(\n    player_id INT PRIMARY KEY,\n    first_name TEXT,\n    last_name TEXT,\n    hand TEXT,\n    birth_date DATE,\n    country_code TEXT\n);\nCREATE TABLE matches(\n  best_of INT,\n  draw_size INT,\n  loser_age FLOAT,\n  loser_entry TEXT,\n  loser_hand TEXT,\n  loser_ht INT,\n  loser_id INT,\n  loser_ioc TEXT,\n  loser_name TEXT,\n  loser_rank INT,\n  loser_rank_points INT,\n  loser_seed INT,\n  match_num INT,\n  minutes INT,\n  round TEXT,\n  score TEXT,\n  surface TEXT,\n  tourney_date DATE,\n  tourney_id TEXT,\n  tourney_level TEXT,\n  tourney_name TEXT,\n  winner_age FLOAT,\n  winner_entry TEXT,\n  winner_hand TEXT,\n  winner_ht INT,\n  winner_id INT,\n  winner_ioc TEXT,\n  winner_name TEXT,\n  winner_rank INT,\n  winner_rank_points INT,\n  winner_seed INT,\n  year INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n);\n\nCREATE TABLE qualifying_matches(\n  best_of INT,\n  draw_size INT,\n  l_1stIn TEXT,\n  l_1stWon TEXT,\n  l_2ndWon TEXT,\n  l_SvGms TEXT,\n  l_ace TEXT,\n  l_bpFaced TEXT,\n  l_bpSaved TEXT,\n  l_df TEXT,\n  l_svpt TEXT,\n  loser_age FLOAT,\n  loser_entry TEXT,\n  loser_hand TEXT,\n  loser_ht INT,\n  loser_id INT,\n  loser_ioc TEXT,\n  loser_name TEXT,\n  loser_rank INT,\n  loser_rank_points INT,\n  loser_seed INT,\n  match_num INT,\n  minutes INT,\n  round TEXT,\n  score TEXT,\n  surface TEXT,\n  tourney_date DATE,\n  tourney_id TEXT,\n  tourney_level TEXT,\n  tourney_name TEXT,\n  w_1stIn TEXT,\n  w_1stWon TEXT,\n  w_2ndWon TEXT,\n  w_SvGms TEXT,\n  w_ace TEXT,\n  w_bpFaced TEXT,\n  w_bpSaved TEXT,\n  w_df TEXT,\n  w_svpt TEXT,\n  winner_age FLOAT,\n  winner_entry TEXT,\n  winner_hand TEXT,\n  winner_ht INT,\n  winner_id INT,\n  winner_ioc TEXT,\n  winner_name TEXT,\n  winner_rank INT,\n  winner_rank_points INT,\n  winner_seed INT,\n  year INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n);\nCREATE TABLE rankings(\n  ranking_date DATE,\n  ranking INT,\n  player_id INT,\n  ranking_points INT,\n  tours INT,\n  FOREIGN KEY(player_id) REFERENCES players(player_id)\n);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT count(DISTINCT loser_name) FROM matches","prompt":"Find the number of distinct name of losers."}
{"context":"CRloser_rank_pointsEATE TABLE players(\n    player_id INT PRIMARY KEY,\n    first_name TEXT,\n    last_name TEXT,\n    hand TEXT,\n    birth_date DATE,\n    country_code TEXT\n);\nCREATE TABLE matches(\n  best_of INT,\n  draw_size INT,\n  loser_age FLOAT,\n  loser_entry TEXT,\n  loser_hand TEXT,\n  loser_ht INT,\n  loser_id INT,\n  loser_ioc TEXT,\n  loser_name TEXT,\n  loser_rank INT,\n  loser_rank_points INT,\n  loser_seed INT,\n  match_num INT,\n  minutes INT,\n  round TEXT,\n  score TEXT,\n  surface TEXT,\n  tourney_date DATE,\n  tourney_id TEXT,\n  tourney_level TEXT,\n  tourney_name TEXT,\n  winner_age FLOAT,\n  winner_entry TEXT,\n  winner_hand TEXT,\n  winner_ht INT,\n  winner_id INT,\n  winner_ioc TEXT,\n  winner_name TEXT,\n  winner_rank INT,\n  winner_rank_points INT,\n  winner_seed INT,\n  year INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n);\n\nCREATE TABLE qualifying_matches(\n  best_of INT,\n  draw_size INT,\n  l_1stIn TEXT,\n  l_1stWon TEXT,\n  l_2ndWon TEXT,\n  l_SvGms TEXT,\n  l_ace TEXT,\n  l_bpFaced TEXT,\n  l_bpSaved TEXT,\n  l_df TEXT,\n  l_svpt TEXT,\n  loser_age FLOAT,\n  loser_entry TEXT,\n  loser_hand TEXT,\n  loser_ht INT,\n  loser_id INT,\n  loser_ioc TEXT,\n  loser_name TEXT,\n  loser_rank INT,\n  loser_rank_points INT,\n  loser_seed INT,\n  match_num INT,\n  minutes INT,\n  round TEXT,\n  score TEXT,\n  surface TEXT,\n  tourney_date DATE,\n  tourney_id TEXT,\n  tourney_level TEXT,\n  tourney_name TEXT,\n  w_1stIn TEXT,\n  w_1stWon TEXT,\n  w_2ndWon TEXT,\n  w_SvGms TEXT,\n  w_ace TEXT,\n  w_bpFaced TEXT,\n  w_bpSaved TEXT,\n  w_df TEXT,\n  w_svpt TEXT,\n  winner_age FLOAT,\n  winner_entry TEXT,\n  winner_hand TEXT,\n  winner_ht INT,\n  winner_id INT,\n  winner_ioc TEXT,\n  winner_name TEXT,\n  winner_rank INT,\n  winner_rank_points INT,\n  winner_seed INT,\n  year INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n);\nCREATE TABLE rankings(\n  ranking_date DATE,\n  ranking INT,\n  player_id INT,\n  ranking_points INT,\n  tours INT,\n  FOREIGN KEY(player_id) REFERENCES players(player_id)\n);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT count(DISTINCT loser_name) FROM matches","prompt":"How many different loser names are there?"}
{"context":"CRloser_rank_pointsEATE TABLE players(\n    player_id INT PRIMARY KEY,\n    first_name TEXT,\n    last_name TEXT,\n    hand TEXT,\n    birth_date DATE,\n    country_code TEXT\n);\nCREATE TABLE matches(\n  best_of INT,\n  draw_size INT,\n  loser_age FLOAT,\n  loser_entry TEXT,\n  loser_hand TEXT,\n  loser_ht INT,\n  loser_id INT,\n  loser_ioc TEXT,\n  loser_name TEXT,\n  loser_rank INT,\n  loser_rank_points INT,\n  loser_seed INT,\n  match_num INT,\n  minutes INT,\n  round TEXT,\n  score TEXT,\n  surface TEXT,\n  tourney_date DATE,\n  tourney_id TEXT,\n  tourney_level TEXT,\n  tourney_name TEXT,\n  winner_age FLOAT,\n  winner_entry TEXT,\n  winner_hand TEXT,\n  winner_ht INT,\n  winner_id INT,\n  winner_ioc TEXT,\n  winner_name TEXT,\n  winner_rank INT,\n  winner_rank_points INT,\n  winner_seed INT,\n  year INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n);\n\nCREATE TABLE qualifying_matches(\n  best_of INT,\n  draw_size INT,\n  l_1stIn TEXT,\n  l_1stWon TEXT,\n  l_2ndWon TEXT,\n  l_SvGms TEXT,\n  l_ace TEXT,\n  l_bpFaced TEXT,\n  l_bpSaved TEXT,\n  l_df TEXT,\n  l_svpt TEXT,\n  loser_age FLOAT,\n  loser_entry TEXT,\n  loser_hand TEXT,\n  loser_ht INT,\n  loser_id INT,\n  loser_ioc TEXT,\n  loser_name TEXT,\n  loser_rank INT,\n  loser_rank_points INT,\n  loser_seed INT,\n  match_num INT,\n  minutes INT,\n  round TEXT,\n  score TEXT,\n  surface TEXT,\n  tourney_date DATE,\n  tourney_id TEXT,\n  tourney_level TEXT,\n  tourney_name TEXT,\n  w_1stIn TEXT,\n  w_1stWon TEXT,\n  w_2ndWon TEXT,\n  w_SvGms TEXT,\n  w_ace TEXT,\n  w_bpFaced TEXT,\n  w_bpSaved TEXT,\n  w_df TEXT,\n  w_svpt TEXT,\n  winner_age FLOAT,\n  winner_entry TEXT,\n  winner_hand TEXT,\n  winner_ht INT,\n  winner_id INT,\n  winner_ioc TEXT,\n  winner_name TEXT,\n  winner_rank INT,\n  winner_rank_points INT,\n  winner_seed INT,\n  year INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n);\nCREATE TABLE rankings(\n  ranking_date DATE,\n  ranking INT,\n  player_id INT,\n  ranking_points INT,\n  tours INT,\n  FOREIGN KEY(player_id) REFERENCES players(player_id)\n);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10","prompt":"Find the name of tourney that has more than 10 matches."}
{"context":"CRloser_rank_pointsEATE TABLE players(\n    player_id INT PRIMARY KEY,\n    first_name TEXT,\n    last_name TEXT,\n    hand TEXT,\n    birth_date DATE,\n    country_code TEXT\n);\nCREATE TABLE matches(\n  best_of INT,\n  draw_size INT,\n  loser_age FLOAT,\n  loser_entry TEXT,\n  loser_hand TEXT,\n  loser_ht INT,\n  loser_id INT,\n  loser_ioc TEXT,\n  loser_name TEXT,\n  loser_rank INT,\n  loser_rank_points INT,\n  loser_seed INT,\n  match_num INT,\n  minutes INT,\n  round TEXT,\n  score TEXT,\n  surface TEXT,\n  tourney_date DATE,\n  tourney_id TEXT,\n  tourney_level TEXT,\n  tourney_name TEXT,\n  winner_age FLOAT,\n  winner_entry TEXT,\n  winner_hand TEXT,\n  winner_ht INT,\n  winner_id INT,\n  winner_ioc TEXT,\n  winner_name TEXT,\n  winner_rank INT,\n  winner_rank_points INT,\n  winner_seed INT,\n  year INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n);\n\nCREATE TABLE qualifying_matches(\n  best_of INT,\n  draw_size INT,\n  l_1stIn TEXT,\n  l_1stWon TEXT,\n  l_2ndWon TEXT,\n  l_SvGms TEXT,\n  l_ace TEXT,\n  l_bpFaced TEXT,\n  l_bpSaved TEXT,\n  l_df TEXT,\n  l_svpt TEXT,\n  loser_age FLOAT,\n  loser_entry TEXT,\n  loser_hand TEXT,\n  loser_ht INT,\n  loser_id INT,\n  loser_ioc TEXT,\n  loser_name TEXT,\n  loser_rank INT,\n  loser_rank_points INT,\n  loser_seed INT,\n  match_num INT,\n  minutes INT,\n  round TEXT,\n  score TEXT,\n  surface TEXT,\n  tourney_date DATE,\n  tourney_id TEXT,\n  tourney_level TEXT,\n  tourney_name TEXT,\n  w_1stIn TEXT,\n  w_1stWon TEXT,\n  w_2ndWon TEXT,\n  w_SvGms TEXT,\n  w_ace TEXT,\n  w_bpFaced TEXT,\n  w_bpSaved TEXT,\n  w_df TEXT,\n  w_svpt TEXT,\n  winner_age FLOAT,\n  winner_entry TEXT,\n  winner_hand TEXT,\n  winner_ht INT,\n  winner_id INT,\n  winner_ioc TEXT,\n  winner_name TEXT,\n  winner_rank INT,\n  winner_rank_points INT,\n  winner_seed INT,\n  year INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n);\nCREATE TABLE rankings(\n  ranking_date DATE,\n  ranking INT,\n  player_id INT,\n  ranking_points INT,\n  tours INT,\n  FOREIGN KEY(player_id) REFERENCES players(player_id)\n);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10","prompt":"What are the names of tournaments that have more than 10 matches?"}
{"context":"CRloser_rank_pointsEATE TABLE players(\n    player_id INT PRIMARY KEY,\n    first_name TEXT,\n    last_name TEXT,\n    hand TEXT,\n    birth_date DATE,\n    country_code TEXT\n);\nCREATE TABLE matches(\n  best_of INT,\n  draw_size INT,\n  loser_age FLOAT,\n  loser_entry TEXT,\n  loser_hand TEXT,\n  loser_ht INT,\n  loser_id INT,\n  loser_ioc TEXT,\n  loser_name TEXT,\n  loser_rank INT,\n  loser_rank_points INT,\n  loser_seed INT,\n  match_num INT,\n  minutes INT,\n  round TEXT,\n  score TEXT,\n  surface TEXT,\n  tourney_date DATE,\n  tourney_id TEXT,\n  tourney_level TEXT,\n  tourney_name TEXT,\n  winner_age FLOAT,\n  winner_entry TEXT,\n  winner_hand TEXT,\n  winner_ht INT,\n  winner_id INT,\n  winner_ioc TEXT,\n  winner_name TEXT,\n  winner_rank INT,\n  winner_rank_points INT,\n  winner_seed INT,\n  year INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n);\n\nCREATE TABLE qualifying_matches(\n  best_of INT,\n  draw_size INT,\n  l_1stIn TEXT,\n  l_1stWon TEXT,\n  l_2ndWon TEXT,\n  l_SvGms TEXT,\n  l_ace TEXT,\n  l_bpFaced TEXT,\n  l_bpSaved TEXT,\n  l_df TEXT,\n  l_svpt TEXT,\n  loser_age FLOAT,\n  loser_entry TEXT,\n  loser_hand TEXT,\n  loser_ht INT,\n  loser_id INT,\n  loser_ioc TEXT,\n  loser_name TEXT,\n  loser_rank INT,\n  loser_rank_points INT,\n  loser_seed INT,\n  match_num INT,\n  minutes INT,\n  round TEXT,\n  score TEXT,\n  surface TEXT,\n  tourney_date DATE,\n  tourney_id TEXT,\n  tourney_level TEXT,\n  tourney_name TEXT,\n  w_1stIn TEXT,\n  w_1stWon TEXT,\n  w_2ndWon TEXT,\n  w_SvGms TEXT,\n  w_ace TEXT,\n  w_bpFaced TEXT,\n  w_bpSaved TEXT,\n  w_df TEXT,\n  w_svpt TEXT,\n  winner_age FLOAT,\n  winner_entry TEXT,\n  winner_hand TEXT,\n  winner_ht INT,\n  winner_id INT,\n  winner_ioc TEXT,\n  winner_name TEXT,\n  winner_rank INT,\n  winner_rank_points INT,\n  winner_seed INT,\n  year INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n);\nCREATE TABLE rankings(\n  ranking_date DATE,\n  ranking INT,\n  player_id INT,\n  ranking_points INT,\n  tours INT,\n  FOREIGN KEY(player_id) REFERENCES players(player_id)\n);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016","prompt":"What are the names of players who won in both 2013 and 2016?"}
{"context":"CRloser_rank_pointsEATE TABLE players(\n    player_id INT PRIMARY KEY,\n    first_name TEXT,\n    last_name TEXT,\n    hand TEXT,\n    birth_date DATE,\n    country_code TEXT\n);\nCREATE TABLE matches(\n  best_of INT,\n  draw_size INT,\n  loser_age FLOAT,\n  loser_entry TEXT,\n  loser_hand TEXT,\n  loser_ht INT,\n  loser_id INT,\n  loser_ioc TEXT,\n  loser_name TEXT,\n  loser_rank INT,\n  loser_rank_points INT,\n  loser_seed INT,\n  match_num INT,\n  minutes INT,\n  round TEXT,\n  score TEXT,\n  surface TEXT,\n  tourney_date DATE,\n  tourney_id TEXT,\n  tourney_level TEXT,\n  tourney_name TEXT,\n  winner_age FLOAT,\n  winner_entry TEXT,\n  winner_hand TEXT,\n  winner_ht INT,\n  winner_id INT,\n  winner_ioc TEXT,\n  winner_name TEXT,\n  winner_rank INT,\n  winner_rank_points INT,\n  winner_seed INT,\n  year INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n);\n\nCREATE TABLE qualifying_matches(\n  best_of INT,\n  draw_size INT,\n  l_1stIn TEXT,\n  l_1stWon TEXT,\n  l_2ndWon TEXT,\n  l_SvGms TEXT,\n  l_ace TEXT,\n  l_bpFaced TEXT,\n  l_bpSaved TEXT,\n  l_df TEXT,\n  l_svpt TEXT,\n  loser_age FLOAT,\n  loser_entry TEXT,\n  loser_hand TEXT,\n  loser_ht INT,\n  loser_id INT,\n  loser_ioc TEXT,\n  loser_name TEXT,\n  loser_rank INT,\n  loser_rank_points INT,\n  loser_seed INT,\n  match_num INT,\n  minutes INT,\n  round TEXT,\n  score TEXT,\n  surface TEXT,\n  tourney_date DATE,\n  tourney_id TEXT,\n  tourney_level TEXT,\n  tourney_name TEXT,\n  w_1stIn TEXT,\n  w_1stWon TEXT,\n  w_2ndWon TEXT,\n  w_SvGms TEXT,\n  w_ace TEXT,\n  w_bpFaced TEXT,\n  w_bpSaved TEXT,\n  w_df TEXT,\n  w_svpt TEXT,\n  winner_age FLOAT,\n  winner_entry TEXT,\n  winner_hand TEXT,\n  winner_ht INT,\n  winner_id INT,\n  winner_ioc TEXT,\n  winner_name TEXT,\n  winner_rank INT,\n  winner_rank_points INT,\n  winner_seed INT,\n  year INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n);\nCREATE TABLE rankings(\n  ranking_date DATE,\n  ranking INT,\n  player_id INT,\n  ranking_points INT,\n  tours INT,\n  FOREIGN KEY(player_id) REFERENCES players(player_id)\n);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT count(*) FROM matches WHERE YEAR  =  2013 OR YEAR  =  2016","prompt":"List the number of all matches who played in years of 2013 or 2016."}
{"context":"CRloser_rank_pointsEATE TABLE players(\n    player_id INT PRIMARY KEY,\n    first_name TEXT,\n    last_name TEXT,\n    hand TEXT,\n    birth_date DATE,\n    country_code TEXT\n);\nCREATE TABLE matches(\n  best_of INT,\n  draw_size INT,\n  loser_age FLOAT,\n  loser_entry TEXT,\n  loser_hand TEXT,\n  loser_ht INT,\n  loser_id INT,\n  loser_ioc TEXT,\n  loser_name TEXT,\n  loser_rank INT,\n  loser_rank_points INT,\n  loser_seed INT,\n  match_num INT,\n  minutes INT,\n  round TEXT,\n  score TEXT,\n  surface TEXT,\n  tourney_date DATE,\n  tourney_id TEXT,\n  tourney_level TEXT,\n  tourney_name TEXT,\n  winner_age FLOAT,\n  winner_entry TEXT,\n  winner_hand TEXT,\n  winner_ht INT,\n  winner_id INT,\n  winner_ioc TEXT,\n  winner_name TEXT,\n  winner_rank INT,\n  winner_rank_points INT,\n  winner_seed INT,\n  year INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n);\n\nCREATE TABLE qualifying_matches(\n  best_of INT,\n  draw_size INT,\n  l_1stIn TEXT,\n  l_1stWon TEXT,\n  l_2ndWon TEXT,\n  l_SvGms TEXT,\n  l_ace TEXT,\n  l_bpFaced TEXT,\n  l_bpSaved TEXT,\n  l_df TEXT,\n  l_svpt TEXT,\n  loser_age FLOAT,\n  loser_entry TEXT,\n  loser_hand TEXT,\n  loser_ht INT,\n  loser_id INT,\n  loser_ioc TEXT,\n  loser_name TEXT,\n  loser_rank INT,\n  loser_rank_points INT,\n  loser_seed INT,\n  match_num INT,\n  minutes INT,\n  round TEXT,\n  score TEXT,\n  surface TEXT,\n  tourney_date DATE,\n  tourney_id TEXT,\n  tourney_level TEXT,\n  tourney_name TEXT,\n  w_1stIn TEXT,\n  w_1stWon TEXT,\n  w_2ndWon TEXT,\n  w_SvGms TEXT,\n  w_ace TEXT,\n  w_bpFaced TEXT,\n  w_bpSaved TEXT,\n  w_df TEXT,\n  w_svpt TEXT,\n  winner_age FLOAT,\n  winner_entry TEXT,\n  winner_hand TEXT,\n  winner_ht INT,\n  winner_id INT,\n  winner_ioc TEXT,\n  winner_name TEXT,\n  winner_rank INT,\n  winner_rank_points INT,\n  winner_seed INT,\n  year INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n);\nCREATE TABLE rankings(\n  ranking_date DATE,\n  ranking INT,\n  player_id INT,\n  ranking_points INT,\n  tours INT,\n  FOREIGN KEY(player_id) REFERENCES players(player_id)\n);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT count(*) FROM matches WHERE YEAR  =  2013 OR YEAR  =  2016","prompt":"How many matches were played in 2013 or 2016?"}
{"context":"CRloser_rank_pointsEATE TABLE players(\n    player_id INT PRIMARY KEY,\n    first_name TEXT,\n    last_name TEXT,\n    hand TEXT,\n    birth_date DATE,\n    country_code TEXT\n);\nCREATE TABLE matches(\n  best_of INT,\n  draw_size INT,\n  loser_age FLOAT,\n  loser_entry TEXT,\n  loser_hand TEXT,\n  loser_ht INT,\n  loser_id INT,\n  loser_ioc TEXT,\n  loser_name TEXT,\n  loser_rank INT,\n  loser_rank_points INT,\n  loser_seed INT,\n  match_num INT,\n  minutes INT,\n  round TEXT,\n  score TEXT,\n  surface TEXT,\n  tourney_date DATE,\n  tourney_id TEXT,\n  tourney_level TEXT,\n  tourney_name TEXT,\n  winner_age FLOAT,\n  winner_entry TEXT,\n  winner_hand TEXT,\n  winner_ht INT,\n  winner_id INT,\n  winner_ioc TEXT,\n  winner_name TEXT,\n  winner_rank INT,\n  winner_rank_points INT,\n  winner_seed INT,\n  year INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n);\n\nCREATE TABLE qualifying_matches(\n  best_of INT,\n  draw_size INT,\n  l_1stIn TEXT,\n  l_1stWon TEXT,\n  l_2ndWon TEXT,\n  l_SvGms TEXT,\n  l_ace TEXT,\n  l_bpFaced TEXT,\n  l_bpSaved TEXT,\n  l_df TEXT,\n  l_svpt TEXT,\n  loser_age FLOAT,\n  loser_entry TEXT,\n  loser_hand TEXT,\n  loser_ht INT,\n  loser_id INT,\n  loser_ioc TEXT,\n  loser_name TEXT,\n  loser_rank INT,\n  loser_rank_points INT,\n  loser_seed INT,\n  match_num INT,\n  minutes INT,\n  round TEXT,\n  score TEXT,\n  surface TEXT,\n  tourney_date DATE,\n  tourney_id TEXT,\n  tourney_level TEXT,\n  tourney_name TEXT,\n  w_1stIn TEXT,\n  w_1stWon TEXT,\n  w_2ndWon TEXT,\n  w_SvGms TEXT,\n  w_ace TEXT,\n  w_bpFaced TEXT,\n  w_bpSaved TEXT,\n  w_df TEXT,\n  w_svpt TEXT,\n  winner_age FLOAT,\n  winner_entry TEXT,\n  winner_hand TEXT,\n  winner_ht INT,\n  winner_id INT,\n  winner_ioc TEXT,\n  winner_name TEXT,\n  winner_rank INT,\n  winner_rank_points INT,\n  winner_seed INT,\n  year INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n);\nCREATE TABLE rankings(\n  ranking_date DATE,\n  ranking INT,\n  player_id INT,\n  ranking_points INT,\n  tours INT,\n  FOREIGN KEY(player_id) REFERENCES players(player_id)\n);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1","prompt":"Find the first name and country code of the oldest player."}
{"context":"CRloser_rank_pointsEATE TABLE players(\n    player_id INT PRIMARY KEY,\n    first_name TEXT,\n    last_name TEXT,\n    hand TEXT,\n    birth_date DATE,\n    country_code TEXT\n);\nCREATE TABLE matches(\n  best_of INT,\n  draw_size INT,\n  loser_age FLOAT,\n  loser_entry TEXT,\n  loser_hand TEXT,\n  loser_ht INT,\n  loser_id INT,\n  loser_ioc TEXT,\n  loser_name TEXT,\n  loser_rank INT,\n  loser_rank_points INT,\n  loser_seed INT,\n  match_num INT,\n  minutes INT,\n  round TEXT,\n  score TEXT,\n  surface TEXT,\n  tourney_date DATE,\n  tourney_id TEXT,\n  tourney_level TEXT,\n  tourney_name TEXT,\n  winner_age FLOAT,\n  winner_entry TEXT,\n  winner_hand TEXT,\n  winner_ht INT,\n  winner_id INT,\n  winner_ioc TEXT,\n  winner_name TEXT,\n  winner_rank INT,\n  winner_rank_points INT,\n  winner_seed INT,\n  year INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n);\n\nCREATE TABLE qualifying_matches(\n  best_of INT,\n  draw_size INT,\n  l_1stIn TEXT,\n  l_1stWon TEXT,\n  l_2ndWon TEXT,\n  l_SvGms TEXT,\n  l_ace TEXT,\n  l_bpFaced TEXT,\n  l_bpSaved TEXT,\n  l_df TEXT,\n  l_svpt TEXT,\n  loser_age FLOAT,\n  loser_entry TEXT,\n  loser_hand TEXT,\n  loser_ht INT,\n  loser_id INT,\n  loser_ioc TEXT,\n  loser_name TEXT,\n  loser_rank INT,\n  loser_rank_points INT,\n  loser_seed INT,\n  match_num INT,\n  minutes INT,\n  round TEXT,\n  score TEXT,\n  surface TEXT,\n  tourney_date DATE,\n  tourney_id TEXT,\n  tourney_level TEXT,\n  tourney_name TEXT,\n  w_1stIn TEXT,\n  w_1stWon TEXT,\n  w_2ndWon TEXT,\n  w_SvGms TEXT,\n  w_ace TEXT,\n  w_bpFaced TEXT,\n  w_bpSaved TEXT,\n  w_df TEXT,\n  w_svpt TEXT,\n  winner_age FLOAT,\n  winner_entry TEXT,\n  winner_hand TEXT,\n  winner_ht INT,\n  winner_id INT,\n  winner_ioc TEXT,\n  winner_name TEXT,\n  winner_rank INT,\n  winner_rank_points INT,\n  winner_seed INT,\n  year INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n);\nCREATE TABLE rankings(\n  ranking_date DATE,\n  ranking INT,\n  player_id INT,\n  ranking_points INT,\n  tours INT,\n  FOREIGN KEY(player_id) REFERENCES players(player_id)\n);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1","prompt":"What is the first name and country code of the oldest player?"}
{"context":"CRloser_rank_pointsEATE TABLE players(\n    player_id INT PRIMARY KEY,\n    first_name TEXT,\n    last_name TEXT,\n    hand TEXT,\n    birth_date DATE,\n    country_code TEXT\n);\nCREATE TABLE matches(\n  best_of INT,\n  draw_size INT,\n  loser_age FLOAT,\n  loser_entry TEXT,\n  loser_hand TEXT,\n  loser_ht INT,\n  loser_id INT,\n  loser_ioc TEXT,\n  loser_name TEXT,\n  loser_rank INT,\n  loser_rank_points INT,\n  loser_seed INT,\n  match_num INT,\n  minutes INT,\n  round TEXT,\n  score TEXT,\n  surface TEXT,\n  tourney_date DATE,\n  tourney_id TEXT,\n  tourney_level TEXT,\n  tourney_name TEXT,\n  winner_age FLOAT,\n  winner_entry TEXT,\n  winner_hand TEXT,\n  winner_ht INT,\n  winner_id INT,\n  winner_ioc TEXT,\n  winner_name TEXT,\n  winner_rank INT,\n  winner_rank_points INT,\n  winner_seed INT,\n  year INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n);\n\nCREATE TABLE qualifying_matches(\n  best_of INT,\n  draw_size INT,\n  l_1stIn TEXT,\n  l_1stWon TEXT,\n  l_2ndWon TEXT,\n  l_SvGms TEXT,\n  l_ace TEXT,\n  l_bpFaced TEXT,\n  l_bpSaved TEXT,\n  l_df TEXT,\n  l_svpt TEXT,\n  loser_age FLOAT,\n  loser_entry TEXT,\n  loser_hand TEXT,\n  loser_ht INT,\n  loser_id INT,\n  loser_ioc TEXT,\n  loser_name TEXT,\n  loser_rank INT,\n  loser_rank_points INT,\n  loser_seed INT,\n  match_num INT,\n  minutes INT,\n  round TEXT,\n  score TEXT,\n  surface TEXT,\n  tourney_date DATE,\n  tourney_id TEXT,\n  tourney_level TEXT,\n  tourney_name TEXT,\n  w_1stIn TEXT,\n  w_1stWon TEXT,\n  w_2ndWon TEXT,\n  w_SvGms TEXT,\n  w_ace TEXT,\n  w_bpFaced TEXT,\n  w_bpSaved TEXT,\n  w_df TEXT,\n  w_svpt TEXT,\n  winner_age FLOAT,\n  winner_entry TEXT,\n  winner_hand TEXT,\n  winner_ht INT,\n  winner_id INT,\n  winner_ioc TEXT,\n  winner_name TEXT,\n  winner_rank INT,\n  winner_rank_points INT,\n  winner_seed INT,\n  year INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n);\nCREATE TABLE rankings(\n  ranking_date DATE,\n  ranking INT,\n  player_id INT,\n  ranking_points INT,\n  tours INT,\n  FOREIGN KEY(player_id) REFERENCES players(player_id)\n);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT first_name ,  last_name FROM players ORDER BY birth_date","prompt":"List the first and last name of all players in the order of birth date."}
{"context":"CRloser_rank_pointsEATE TABLE players(\n    player_id INT PRIMARY KEY,\n    first_name TEXT,\n    last_name TEXT,\n    hand TEXT,\n    birth_date DATE,\n    country_code TEXT\n);\nCREATE TABLE matches(\n  best_of INT,\n  draw_size INT,\n  loser_age FLOAT,\n  loser_entry TEXT,\n  loser_hand TEXT,\n  loser_ht INT,\n  loser_id INT,\n  loser_ioc TEXT,\n  loser_name TEXT,\n  loser_rank INT,\n  loser_rank_points INT,\n  loser_seed INT,\n  match_num INT,\n  minutes INT,\n  round TEXT,\n  score TEXT,\n  surface TEXT,\n  tourney_date DATE,\n  tourney_id TEXT,\n  tourney_level TEXT,\n  tourney_name TEXT,\n  winner_age FLOAT,\n  winner_entry TEXT,\n  winner_hand TEXT,\n  winner_ht INT,\n  winner_id INT,\n  winner_ioc TEXT,\n  winner_name TEXT,\n  winner_rank INT,\n  winner_rank_points INT,\n  winner_seed INT,\n  year INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n);\n\nCREATE TABLE qualifying_matches(\n  best_of INT,\n  draw_size INT,\n  l_1stIn TEXT,\n  l_1stWon TEXT,\n  l_2ndWon TEXT,\n  l_SvGms TEXT,\n  l_ace TEXT,\n  l_bpFaced TEXT,\n  l_bpSaved TEXT,\n  l_df TEXT,\n  l_svpt TEXT,\n  loser_age FLOAT,\n  loser_entry TEXT,\n  loser_hand TEXT,\n  loser_ht INT,\n  loser_id INT,\n  loser_ioc TEXT,\n  loser_name TEXT,\n  loser_rank INT,\n  loser_rank_points INT,\n  loser_seed INT,\n  match_num INT,\n  minutes INT,\n  round TEXT,\n  score TEXT,\n  surface TEXT,\n  tourney_date DATE,\n  tourney_id TEXT,\n  tourney_level TEXT,\n  tourney_name TEXT,\n  w_1stIn TEXT,\n  w_1stWon TEXT,\n  w_2ndWon TEXT,\n  w_SvGms TEXT,\n  w_ace TEXT,\n  w_bpFaced TEXT,\n  w_bpSaved TEXT,\n  w_df TEXT,\n  w_svpt TEXT,\n  winner_age FLOAT,\n  winner_entry TEXT,\n  winner_hand TEXT,\n  winner_ht INT,\n  winner_id INT,\n  winner_ioc TEXT,\n  winner_name TEXT,\n  winner_rank INT,\n  winner_rank_points INT,\n  winner_seed INT,\n  year INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n);\nCREATE TABLE rankings(\n  ranking_date DATE,\n  ranking INT,\n  player_id INT,\n  ranking_points INT,\n  tours INT,\n  FOREIGN KEY(player_id) REFERENCES players(player_id)\n);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT first_name ,  last_name FROM players ORDER BY birth_date","prompt":"What are the full names of all players, sorted by birth date?"}
{"context":"CRloser_rank_pointsEATE TABLE players(\n    player_id INT PRIMARY KEY,\n    first_name TEXT,\n    last_name TEXT,\n    hand TEXT,\n    birth_date DATE,\n    country_code TEXT\n);\nCREATE TABLE matches(\n  best_of INT,\n  draw_size INT,\n  loser_age FLOAT,\n  loser_entry TEXT,\n  loser_hand TEXT,\n  loser_ht INT,\n  loser_id INT,\n  loser_ioc TEXT,\n  loser_name TEXT,\n  loser_rank INT,\n  loser_rank_points INT,\n  loser_seed INT,\n  match_num INT,\n  minutes INT,\n  round TEXT,\n  score TEXT,\n  surface TEXT,\n  tourney_date DATE,\n  tourney_id TEXT,\n  tourney_level TEXT,\n  tourney_name TEXT,\n  winner_age FLOAT,\n  winner_entry TEXT,\n  winner_hand TEXT,\n  winner_ht INT,\n  winner_id INT,\n  winner_ioc TEXT,\n  winner_name TEXT,\n  winner_rank INT,\n  winner_rank_points INT,\n  winner_seed INT,\n  year INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n);\n\nCREATE TABLE qualifying_matches(\n  best_of INT,\n  draw_size INT,\n  l_1stIn TEXT,\n  l_1stWon TEXT,\n  l_2ndWon TEXT,\n  l_SvGms TEXT,\n  l_ace TEXT,\n  l_bpFaced TEXT,\n  l_bpSaved TEXT,\n  l_df TEXT,\n  l_svpt TEXT,\n  loser_age FLOAT,\n  loser_entry TEXT,\n  loser_hand TEXT,\n  loser_ht INT,\n  loser_id INT,\n  loser_ioc TEXT,\n  loser_name TEXT,\n  loser_rank INT,\n  loser_rank_points INT,\n  loser_seed INT,\n  match_num INT,\n  minutes INT,\n  round TEXT,\n  score TEXT,\n  surface TEXT,\n  tourney_date DATE,\n  tourney_id TEXT,\n  tourney_level TEXT,\n  tourney_name TEXT,\n  w_1stIn TEXT,\n  w_1stWon TEXT,\n  w_2ndWon TEXT,\n  w_SvGms TEXT,\n  w_ace TEXT,\n  w_bpFaced TEXT,\n  w_bpSaved TEXT,\n  w_df TEXT,\n  w_svpt TEXT,\n  winner_age FLOAT,\n  winner_entry TEXT,\n  winner_hand TEXT,\n  winner_ht INT,\n  winner_id INT,\n  winner_ioc TEXT,\n  winner_name TEXT,\n  winner_rank INT,\n  winner_rank_points INT,\n  winner_seed INT,\n  year INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n);\nCREATE TABLE rankings(\n  ranking_date DATE,\n  ranking INT,\n  player_id INT,\n  ranking_points INT,\n  tours INT,\n  FOREIGN KEY(player_id) REFERENCES players(player_id)\n);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date","prompt":"What are the full names of all left handed players, in order of birth date?"}
{"context":"CRloser_rank_pointsEATE TABLE players(\n    player_id INT PRIMARY KEY,\n    first_name TEXT,\n    last_name TEXT,\n    hand TEXT,\n    birth_date DATE,\n    country_code TEXT\n);\nCREATE TABLE matches(\n  best_of INT,\n  draw_size INT,\n  loser_age FLOAT,\n  loser_entry TEXT,\n  loser_hand TEXT,\n  loser_ht INT,\n  loser_id INT,\n  loser_ioc TEXT,\n  loser_name TEXT,\n  loser_rank INT,\n  loser_rank_points INT,\n  loser_seed INT,\n  match_num INT,\n  minutes INT,\n  round TEXT,\n  score TEXT,\n  surface TEXT,\n  tourney_date DATE,\n  tourney_id TEXT,\n  tourney_level TEXT,\n  tourney_name TEXT,\n  winner_age FLOAT,\n  winner_entry TEXT,\n  winner_hand TEXT,\n  winner_ht INT,\n  winner_id INT,\n  winner_ioc TEXT,\n  winner_name TEXT,\n  winner_rank INT,\n  winner_rank_points INT,\n  winner_seed INT,\n  year INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n);\n\nCREATE TABLE qualifying_matches(\n  best_of INT,\n  draw_size INT,\n  l_1stIn TEXT,\n  l_1stWon TEXT,\n  l_2ndWon TEXT,\n  l_SvGms TEXT,\n  l_ace TEXT,\n  l_bpFaced TEXT,\n  l_bpSaved TEXT,\n  l_df TEXT,\n  l_svpt TEXT,\n  loser_age FLOAT,\n  loser_entry TEXT,\n  loser_hand TEXT,\n  loser_ht INT,\n  loser_id INT,\n  loser_ioc TEXT,\n  loser_name TEXT,\n  loser_rank INT,\n  loser_rank_points INT,\n  loser_seed INT,\n  match_num INT,\n  minutes INT,\n  round TEXT,\n  score TEXT,\n  surface TEXT,\n  tourney_date DATE,\n  tourney_id TEXT,\n  tourney_level TEXT,\n  tourney_name TEXT,\n  w_1stIn TEXT,\n  w_1stWon TEXT,\n  w_2ndWon TEXT,\n  w_SvGms TEXT,\n  w_ace TEXT,\n  w_bpFaced TEXT,\n  w_bpSaved TEXT,\n  w_df TEXT,\n  w_svpt TEXT,\n  winner_age FLOAT,\n  winner_entry TEXT,\n  winner_hand TEXT,\n  winner_ht INT,\n  winner_id INT,\n  winner_ioc TEXT,\n  winner_name TEXT,\n  winner_rank INT,\n  winner_rank_points INT,\n  winner_seed INT,\n  year INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n);\nCREATE TABLE rankings(\n  ranking_date DATE,\n  ranking INT,\n  player_id INT,\n  ranking_points INT,\n  tours INT,\n  FOREIGN KEY(player_id) REFERENCES players(player_id)\n);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1","prompt":"Find the year that has the most number of matches."}
{"context":"CRloser_rank_pointsEATE TABLE players(\n    player_id INT PRIMARY KEY,\n    first_name TEXT,\n    last_name TEXT,\n    hand TEXT,\n    birth_date DATE,\n    country_code TEXT\n);\nCREATE TABLE matches(\n  best_of INT,\n  draw_size INT,\n  loser_age FLOAT,\n  loser_entry TEXT,\n  loser_hand TEXT,\n  loser_ht INT,\n  loser_id INT,\n  loser_ioc TEXT,\n  loser_name TEXT,\n  loser_rank INT,\n  loser_rank_points INT,\n  loser_seed INT,\n  match_num INT,\n  minutes INT,\n  round TEXT,\n  score TEXT,\n  surface TEXT,\n  tourney_date DATE,\n  tourney_id TEXT,\n  tourney_level TEXT,\n  tourney_name TEXT,\n  winner_age FLOAT,\n  winner_entry TEXT,\n  winner_hand TEXT,\n  winner_ht INT,\n  winner_id INT,\n  winner_ioc TEXT,\n  winner_name TEXT,\n  winner_rank INT,\n  winner_rank_points INT,\n  winner_seed INT,\n  year INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n);\n\nCREATE TABLE qualifying_matches(\n  best_of INT,\n  draw_size INT,\n  l_1stIn TEXT,\n  l_1stWon TEXT,\n  l_2ndWon TEXT,\n  l_SvGms TEXT,\n  l_ace TEXT,\n  l_bpFaced TEXT,\n  l_bpSaved TEXT,\n  l_df TEXT,\n  l_svpt TEXT,\n  loser_age FLOAT,\n  loser_entry TEXT,\n  loser_hand TEXT,\n  loser_ht INT,\n  loser_id INT,\n  loser_ioc TEXT,\n  loser_name TEXT,\n  loser_rank INT,\n  loser_rank_points INT,\n  loser_seed INT,\n  match_num INT,\n  minutes INT,\n  round TEXT,\n  score TEXT,\n  surface TEXT,\n  tourney_date DATE,\n  tourney_id TEXT,\n  tourney_level TEXT,\n  tourney_name TEXT,\n  w_1stIn TEXT,\n  w_1stWon TEXT,\n  w_2ndWon TEXT,\n  w_SvGms TEXT,\n  w_ace TEXT,\n  w_bpFaced TEXT,\n  w_bpSaved TEXT,\n  w_df TEXT,\n  w_svpt TEXT,\n  winner_age FLOAT,\n  winner_entry TEXT,\n  winner_hand TEXT,\n  winner_ht INT,\n  winner_id INT,\n  winner_ioc TEXT,\n  winner_name TEXT,\n  winner_rank INT,\n  winner_rank_points INT,\n  winner_seed INT,\n  year INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n);\nCREATE TABLE rankings(\n  ranking_date DATE,\n  ranking INT,\n  player_id INT,\n  ranking_points INT,\n  tours INT,\n  FOREIGN KEY(player_id) REFERENCES players(player_id)\n);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1","prompt":"Which year had the most matches?"}
{"context":"CRloser_rank_pointsEATE TABLE players(\n    player_id INT PRIMARY KEY,\n    first_name TEXT,\n    last_name TEXT,\n    hand TEXT,\n    birth_date DATE,\n    country_code TEXT\n);\nCREATE TABLE matches(\n  best_of INT,\n  draw_size INT,\n  loser_age FLOAT,\n  loser_entry TEXT,\n  loser_hand TEXT,\n  loser_ht INT,\n  loser_id INT,\n  loser_ioc TEXT,\n  loser_name TEXT,\n  loser_rank INT,\n  loser_rank_points INT,\n  loser_seed INT,\n  match_num INT,\n  minutes INT,\n  round TEXT,\n  score TEXT,\n  surface TEXT,\n  tourney_date DATE,\n  tourney_id TEXT,\n  tourney_level TEXT,\n  tourney_name TEXT,\n  winner_age FLOAT,\n  winner_entry TEXT,\n  winner_hand TEXT,\n  winner_ht INT,\n  winner_id INT,\n  winner_ioc TEXT,\n  winner_name TEXT,\n  winner_rank INT,\n  winner_rank_points INT,\n  winner_seed INT,\n  year INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n);\n\nCREATE TABLE qualifying_matches(\n  best_of INT,\n  draw_size INT,\n  l_1stIn TEXT,\n  l_1stWon TEXT,\n  l_2ndWon TEXT,\n  l_SvGms TEXT,\n  l_ace TEXT,\n  l_bpFaced TEXT,\n  l_bpSaved TEXT,\n  l_df TEXT,\n  l_svpt TEXT,\n  loser_age FLOAT,\n  loser_entry TEXT,\n  loser_hand TEXT,\n  loser_ht INT,\n  loser_id INT,\n  loser_ioc TEXT,\n  loser_name TEXT,\n  loser_rank INT,\n  loser_rank_points INT,\n  loser_seed INT,\n  match_num INT,\n  minutes INT,\n  round TEXT,\n  score TEXT,\n  surface TEXT,\n  tourney_date DATE,\n  tourney_id TEXT,\n  tourney_level TEXT,\n  tourney_name TEXT,\n  w_1stIn TEXT,\n  w_1stWon TEXT,\n  w_2ndWon TEXT,\n  w_SvGms TEXT,\n  w_ace TEXT,\n  w_bpFaced TEXT,\n  w_bpSaved TEXT,\n  w_df TEXT,\n  w_svpt TEXT,\n  winner_age FLOAT,\n  winner_entry TEXT,\n  winner_hand TEXT,\n  winner_ht INT,\n  winner_id INT,\n  winner_ioc TEXT,\n  winner_name TEXT,\n  winner_rank INT,\n  winner_rank_points INT,\n  winner_seed INT,\n  year INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n);\nCREATE TABLE rankings(\n  ranking_date DATE,\n  ranking INT,\n  player_id INT,\n  ranking_points INT,\n  tours INT,\n  FOREIGN KEY(player_id) REFERENCES players(player_id)\n);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1","prompt":"Find the name and rank points of the winner who won the most times."}
{"context":"CRloser_rank_pointsEATE TABLE players(\n    player_id INT PRIMARY KEY,\n    first_name TEXT,\n    last_name TEXT,\n    hand TEXT,\n    birth_date DATE,\n    country_code TEXT\n);\nCREATE TABLE matches(\n  best_of INT,\n  draw_size INT,\n  loser_age FLOAT,\n  loser_entry TEXT,\n  loser_hand TEXT,\n  loser_ht INT,\n  loser_id INT,\n  loser_ioc TEXT,\n  loser_name TEXT,\n  loser_rank INT,\n  loser_rank_points INT,\n  loser_seed INT,\n  match_num INT,\n  minutes INT,\n  round TEXT,\n  score TEXT,\n  surface TEXT,\n  tourney_date DATE,\n  tourney_id TEXT,\n  tourney_level TEXT,\n  tourney_name TEXT,\n  winner_age FLOAT,\n  winner_entry TEXT,\n  winner_hand TEXT,\n  winner_ht INT,\n  winner_id INT,\n  winner_ioc TEXT,\n  winner_name TEXT,\n  winner_rank INT,\n  winner_rank_points INT,\n  winner_seed INT,\n  year INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n);\n\nCREATE TABLE qualifying_matches(\n  best_of INT,\n  draw_size INT,\n  l_1stIn TEXT,\n  l_1stWon TEXT,\n  l_2ndWon TEXT,\n  l_SvGms TEXT,\n  l_ace TEXT,\n  l_bpFaced TEXT,\n  l_bpSaved TEXT,\n  l_df TEXT,\n  l_svpt TEXT,\n  loser_age FLOAT,\n  loser_entry TEXT,\n  loser_hand TEXT,\n  loser_ht INT,\n  loser_id INT,\n  loser_ioc TEXT,\n  loser_name TEXT,\n  loser_rank INT,\n  loser_rank_points INT,\n  loser_seed INT,\n  match_num INT,\n  minutes INT,\n  round TEXT,\n  score TEXT,\n  surface TEXT,\n  tourney_date DATE,\n  tourney_id TEXT,\n  tourney_level TEXT,\n  tourney_name TEXT,\n  w_1stIn TEXT,\n  w_1stWon TEXT,\n  w_2ndWon TEXT,\n  w_SvGms TEXT,\n  w_ace TEXT,\n  w_bpFaced TEXT,\n  w_bpSaved TEXT,\n  w_df TEXT,\n  w_svpt TEXT,\n  winner_age FLOAT,\n  winner_entry TEXT,\n  winner_hand TEXT,\n  winner_ht INT,\n  winner_id INT,\n  winner_ioc TEXT,\n  winner_name TEXT,\n  winner_rank INT,\n  winner_rank_points INT,\n  winner_seed INT,\n  year INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n);\nCREATE TABLE rankings(\n  ranking_date DATE,\n  ranking INT,\n  player_id INT,\n  ranking_points INT,\n  tours INT,\n  FOREIGN KEY(player_id) REFERENCES players(player_id)\n);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1","prompt":"find the names of loser and winner who played in the match with greatest number of minutes."}
{"context":"CRloser_rank_pointsEATE TABLE players(\n    player_id INT PRIMARY KEY,\n    first_name TEXT,\n    last_name TEXT,\n    hand TEXT,\n    birth_date DATE,\n    country_code TEXT\n);\nCREATE TABLE matches(\n  best_of INT,\n  draw_size INT,\n  loser_age FLOAT,\n  loser_entry TEXT,\n  loser_hand TEXT,\n  loser_ht INT,\n  loser_id INT,\n  loser_ioc TEXT,\n  loser_name TEXT,\n  loser_rank INT,\n  loser_rank_points INT,\n  loser_seed INT,\n  match_num INT,\n  minutes INT,\n  round TEXT,\n  score TEXT,\n  surface TEXT,\n  tourney_date DATE,\n  tourney_id TEXT,\n  tourney_level TEXT,\n  tourney_name TEXT,\n  winner_age FLOAT,\n  winner_entry TEXT,\n  winner_hand TEXT,\n  winner_ht INT,\n  winner_id INT,\n  winner_ioc TEXT,\n  winner_name TEXT,\n  winner_rank INT,\n  winner_rank_points INT,\n  winner_seed INT,\n  year INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n);\n\nCREATE TABLE qualifying_matches(\n  best_of INT,\n  draw_size INT,\n  l_1stIn TEXT,\n  l_1stWon TEXT,\n  l_2ndWon TEXT,\n  l_SvGms TEXT,\n  l_ace TEXT,\n  l_bpFaced TEXT,\n  l_bpSaved TEXT,\n  l_df TEXT,\n  l_svpt TEXT,\n  loser_age FLOAT,\n  loser_entry TEXT,\n  loser_hand TEXT,\n  loser_ht INT,\n  loser_id INT,\n  loser_ioc TEXT,\n  loser_name TEXT,\n  loser_rank INT,\n  loser_rank_points INT,\n  loser_seed INT,\n  match_num INT,\n  minutes INT,\n  round TEXT,\n  score TEXT,\n  surface TEXT,\n  tourney_date DATE,\n  tourney_id TEXT,\n  tourney_level TEXT,\n  tourney_name TEXT,\n  w_1stIn TEXT,\n  w_1stWon TEXT,\n  w_2ndWon TEXT,\n  w_SvGms TEXT,\n  w_ace TEXT,\n  w_bpFaced TEXT,\n  w_bpSaved TEXT,\n  w_df TEXT,\n  w_svpt TEXT,\n  winner_age FLOAT,\n  winner_entry TEXT,\n  winner_hand TEXT,\n  winner_ht INT,\n  winner_id INT,\n  winner_ioc TEXT,\n  winner_name TEXT,\n  winner_rank INT,\n  winner_rank_points INT,\n  winner_seed INT,\n  year INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n);\nCREATE TABLE rankings(\n  ranking_date DATE,\n  ranking INT,\n  player_id INT,\n  ranking_points INT,\n  tours INT,\n  FOREIGN KEY(player_id) REFERENCES players(player_id)\n);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1","prompt":"What are the names of the winner and loser who played in the longest match?"}
{"context":"CRloser_rank_pointsEATE TABLE players(\n    player_id INT PRIMARY KEY,\n    first_name TEXT,\n    last_name TEXT,\n    hand TEXT,\n    birth_date DATE,\n    country_code TEXT\n);\nCREATE TABLE matches(\n  best_of INT,\n  draw_size INT,\n  loser_age FLOAT,\n  loser_entry TEXT,\n  loser_hand TEXT,\n  loser_ht INT,\n  loser_id INT,\n  loser_ioc TEXT,\n  loser_name TEXT,\n  loser_rank INT,\n  loser_rank_points INT,\n  loser_seed INT,\n  match_num INT,\n  minutes INT,\n  round TEXT,\n  score TEXT,\n  surface TEXT,\n  tourney_date DATE,\n  tourney_id TEXT,\n  tourney_level TEXT,\n  tourney_name TEXT,\n  winner_age FLOAT,\n  winner_entry TEXT,\n  winner_hand TEXT,\n  winner_ht INT,\n  winner_id INT,\n  winner_ioc TEXT,\n  winner_name TEXT,\n  winner_rank INT,\n  winner_rank_points INT,\n  winner_seed INT,\n  year INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n);\n\nCREATE TABLE qualifying_matches(\n  best_of INT,\n  draw_size INT,\n  l_1stIn TEXT,\n  l_1stWon TEXT,\n  l_2ndWon TEXT,\n  l_SvGms TEXT,\n  l_ace TEXT,\n  l_bpFaced TEXT,\n  l_bpSaved TEXT,\n  l_df TEXT,\n  l_svpt TEXT,\n  loser_age FLOAT,\n  loser_entry TEXT,\n  loser_hand TEXT,\n  loser_ht INT,\n  loser_id INT,\n  loser_ioc TEXT,\n  loser_name TEXT,\n  loser_rank INT,\n  loser_rank_points INT,\n  loser_seed INT,\n  match_num INT,\n  minutes INT,\n  round TEXT,\n  score TEXT,\n  surface TEXT,\n  tourney_date DATE,\n  tourney_id TEXT,\n  tourney_level TEXT,\n  tourney_name TEXT,\n  w_1stIn TEXT,\n  w_1stWon TEXT,\n  w_2ndWon TEXT,\n  w_SvGms TEXT,\n  w_ace TEXT,\n  w_bpFaced TEXT,\n  w_bpSaved TEXT,\n  w_df TEXT,\n  w_svpt TEXT,\n  winner_age FLOAT,\n  winner_entry TEXT,\n  winner_hand TEXT,\n  winner_ht INT,\n  winner_id INT,\n  winner_ioc TEXT,\n  winner_name TEXT,\n  winner_rank INT,\n  winner_rank_points INT,\n  winner_seed INT,\n  year INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n);\nCREATE TABLE rankings(\n  ranking_date DATE,\n  ranking INT,\n  player_id INT,\n  ranking_points INT,\n  tours INT,\n  FOREIGN KEY(player_id) REFERENCES players(player_id)\n);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT count(*) ,  country_code FROM players GROUP BY country_code","prompt":"find the number of players for each country."}
{"context":"CRloser_rank_pointsEATE TABLE players(\n    player_id INT PRIMARY KEY,\n    first_name TEXT,\n    last_name TEXT,\n    hand TEXT,\n    birth_date DATE,\n    country_code TEXT\n);\nCREATE TABLE matches(\n  best_of INT,\n  draw_size INT,\n  loser_age FLOAT,\n  loser_entry TEXT,\n  loser_hand TEXT,\n  loser_ht INT,\n  loser_id INT,\n  loser_ioc TEXT,\n  loser_name TEXT,\n  loser_rank INT,\n  loser_rank_points INT,\n  loser_seed INT,\n  match_num INT,\n  minutes INT,\n  round TEXT,\n  score TEXT,\n  surface TEXT,\n  tourney_date DATE,\n  tourney_id TEXT,\n  tourney_level TEXT,\n  tourney_name TEXT,\n  winner_age FLOAT,\n  winner_entry TEXT,\n  winner_hand TEXT,\n  winner_ht INT,\n  winner_id INT,\n  winner_ioc TEXT,\n  winner_name TEXT,\n  winner_rank INT,\n  winner_rank_points INT,\n  winner_seed INT,\n  year INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n);\n\nCREATE TABLE qualifying_matches(\n  best_of INT,\n  draw_size INT,\n  l_1stIn TEXT,\n  l_1stWon TEXT,\n  l_2ndWon TEXT,\n  l_SvGms TEXT,\n  l_ace TEXT,\n  l_bpFaced TEXT,\n  l_bpSaved TEXT,\n  l_df TEXT,\n  l_svpt TEXT,\n  loser_age FLOAT,\n  loser_entry TEXT,\n  loser_hand TEXT,\n  loser_ht INT,\n  loser_id INT,\n  loser_ioc TEXT,\n  loser_name TEXT,\n  loser_rank INT,\n  loser_rank_points INT,\n  loser_seed INT,\n  match_num INT,\n  minutes INT,\n  round TEXT,\n  score TEXT,\n  surface TEXT,\n  tourney_date DATE,\n  tourney_id TEXT,\n  tourney_level TEXT,\n  tourney_name TEXT,\n  w_1stIn TEXT,\n  w_1stWon TEXT,\n  w_2ndWon TEXT,\n  w_SvGms TEXT,\n  w_ace TEXT,\n  w_bpFaced TEXT,\n  w_bpSaved TEXT,\n  w_df TEXT,\n  w_svpt TEXT,\n  winner_age FLOAT,\n  winner_entry TEXT,\n  winner_hand TEXT,\n  winner_ht INT,\n  winner_id INT,\n  winner_ioc TEXT,\n  winner_name TEXT,\n  winner_rank INT,\n  winner_rank_points INT,\n  winner_seed INT,\n  year INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n);\nCREATE TABLE rankings(\n  ranking_date DATE,\n  ranking INT,\n  player_id INT,\n  ranking_points INT,\n  tours INT,\n  FOREIGN KEY(player_id) REFERENCES players(player_id)\n);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT count(*) ,  country_code FROM players GROUP BY country_code","prompt":"How many players are from each country?"}
{"context":"CRloser_rank_pointsEATE TABLE players(\n    player_id INT PRIMARY KEY,\n    first_name TEXT,\n    last_name TEXT,\n    hand TEXT,\n    birth_date DATE,\n    country_code TEXT\n);\nCREATE TABLE matches(\n  best_of INT,\n  draw_size INT,\n  loser_age FLOAT,\n  loser_entry TEXT,\n  loser_hand TEXT,\n  loser_ht INT,\n  loser_id INT,\n  loser_ioc TEXT,\n  loser_name TEXT,\n  loser_rank INT,\n  loser_rank_points INT,\n  loser_seed INT,\n  match_num INT,\n  minutes INT,\n  round TEXT,\n  score TEXT,\n  surface TEXT,\n  tourney_date DATE,\n  tourney_id TEXT,\n  tourney_level TEXT,\n  tourney_name TEXT,\n  winner_age FLOAT,\n  winner_entry TEXT,\n  winner_hand TEXT,\n  winner_ht INT,\n  winner_id INT,\n  winner_ioc TEXT,\n  winner_name TEXT,\n  winner_rank INT,\n  winner_rank_points INT,\n  winner_seed INT,\n  year INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n);\n\nCREATE TABLE qualifying_matches(\n  best_of INT,\n  draw_size INT,\n  l_1stIn TEXT,\n  l_1stWon TEXT,\n  l_2ndWon TEXT,\n  l_SvGms TEXT,\n  l_ace TEXT,\n  l_bpFaced TEXT,\n  l_bpSaved TEXT,\n  l_df TEXT,\n  l_svpt TEXT,\n  loser_age FLOAT,\n  loser_entry TEXT,\n  loser_hand TEXT,\n  loser_ht INT,\n  loser_id INT,\n  loser_ioc TEXT,\n  loser_name TEXT,\n  loser_rank INT,\n  loser_rank_points INT,\n  loser_seed INT,\n  match_num INT,\n  minutes INT,\n  round TEXT,\n  score TEXT,\n  surface TEXT,\n  tourney_date DATE,\n  tourney_id TEXT,\n  tourney_level TEXT,\n  tourney_name TEXT,\n  w_1stIn TEXT,\n  w_1stWon TEXT,\n  w_2ndWon TEXT,\n  w_SvGms TEXT,\n  w_ace TEXT,\n  w_bpFaced TEXT,\n  w_bpSaved TEXT,\n  w_df TEXT,\n  w_svpt TEXT,\n  winner_age FLOAT,\n  winner_entry TEXT,\n  winner_hand TEXT,\n  winner_ht INT,\n  winner_id INT,\n  winner_ioc TEXT,\n  winner_name TEXT,\n  winner_rank INT,\n  winner_rank_points INT,\n  winner_seed INT,\n  year INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n);\nCREATE TABLE rankings(\n  ranking_date DATE,\n  ranking INT,\n  player_id INT,\n  ranking_points INT,\n  tours INT,\n  FOREIGN KEY(player_id) REFERENCES players(player_id)\n);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1","prompt":"find the code of the country where has the greatest number of players."}
{"context":"CRloser_rank_pointsEATE TABLE players(\n    player_id INT PRIMARY KEY,\n    first_name TEXT,\n    last_name TEXT,\n    hand TEXT,\n    birth_date DATE,\n    country_code TEXT\n);\nCREATE TABLE matches(\n  best_of INT,\n  draw_size INT,\n  loser_age FLOAT,\n  loser_entry TEXT,\n  loser_hand TEXT,\n  loser_ht INT,\n  loser_id INT,\n  loser_ioc TEXT,\n  loser_name TEXT,\n  loser_rank INT,\n  loser_rank_points INT,\n  loser_seed INT,\n  match_num INT,\n  minutes INT,\n  round TEXT,\n  score TEXT,\n  surface TEXT,\n  tourney_date DATE,\n  tourney_id TEXT,\n  tourney_level TEXT,\n  tourney_name TEXT,\n  winner_age FLOAT,\n  winner_entry TEXT,\n  winner_hand TEXT,\n  winner_ht INT,\n  winner_id INT,\n  winner_ioc TEXT,\n  winner_name TEXT,\n  winner_rank INT,\n  winner_rank_points INT,\n  winner_seed INT,\n  year INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n);\n\nCREATE TABLE qualifying_matches(\n  best_of INT,\n  draw_size INT,\n  l_1stIn TEXT,\n  l_1stWon TEXT,\n  l_2ndWon TEXT,\n  l_SvGms TEXT,\n  l_ace TEXT,\n  l_bpFaced TEXT,\n  l_bpSaved TEXT,\n  l_df TEXT,\n  l_svpt TEXT,\n  loser_age FLOAT,\n  loser_entry TEXT,\n  loser_hand TEXT,\n  loser_ht INT,\n  loser_id INT,\n  loser_ioc TEXT,\n  loser_name TEXT,\n  loser_rank INT,\n  loser_rank_points INT,\n  loser_seed INT,\n  match_num INT,\n  minutes INT,\n  round TEXT,\n  score TEXT,\n  surface TEXT,\n  tourney_date DATE,\n  tourney_id TEXT,\n  tourney_level TEXT,\n  tourney_name TEXT,\n  w_1stIn TEXT,\n  w_1stWon TEXT,\n  w_2ndWon TEXT,\n  w_SvGms TEXT,\n  w_ace TEXT,\n  w_bpFaced TEXT,\n  w_bpSaved TEXT,\n  w_df TEXT,\n  w_svpt TEXT,\n  winner_age FLOAT,\n  winner_entry TEXT,\n  winner_hand TEXT,\n  winner_ht INT,\n  winner_id INT,\n  winner_ioc TEXT,\n  winner_name TEXT,\n  winner_rank INT,\n  winner_rank_points INT,\n  winner_seed INT,\n  year INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n);\nCREATE TABLE rankings(\n  ranking_date DATE,\n  ranking INT,\n  player_id INT,\n  ranking_points INT,\n  tours INT,\n  FOREIGN KEY(player_id) REFERENCES players(player_id)\n);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1","prompt":"What is the code of the country with the most players?"}
{"context":"CRloser_rank_pointsEATE TABLE players(\n    player_id INT PRIMARY KEY,\n    first_name TEXT,\n    last_name TEXT,\n    hand TEXT,\n    birth_date DATE,\n    country_code TEXT\n);\nCREATE TABLE matches(\n  best_of INT,\n  draw_size INT,\n  loser_age FLOAT,\n  loser_entry TEXT,\n  loser_hand TEXT,\n  loser_ht INT,\n  loser_id INT,\n  loser_ioc TEXT,\n  loser_name TEXT,\n  loser_rank INT,\n  loser_rank_points INT,\n  loser_seed INT,\n  match_num INT,\n  minutes INT,\n  round TEXT,\n  score TEXT,\n  surface TEXT,\n  tourney_date DATE,\n  tourney_id TEXT,\n  tourney_level TEXT,\n  tourney_name TEXT,\n  winner_age FLOAT,\n  winner_entry TEXT,\n  winner_hand TEXT,\n  winner_ht INT,\n  winner_id INT,\n  winner_ioc TEXT,\n  winner_name TEXT,\n  winner_rank INT,\n  winner_rank_points INT,\n  winner_seed INT,\n  year INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n);\n\nCREATE TABLE qualifying_matches(\n  best_of INT,\n  draw_size INT,\n  l_1stIn TEXT,\n  l_1stWon TEXT,\n  l_2ndWon TEXT,\n  l_SvGms TEXT,\n  l_ace TEXT,\n  l_bpFaced TEXT,\n  l_bpSaved TEXT,\n  l_df TEXT,\n  l_svpt TEXT,\n  loser_age FLOAT,\n  loser_entry TEXT,\n  loser_hand TEXT,\n  loser_ht INT,\n  loser_id INT,\n  loser_ioc TEXT,\n  loser_name TEXT,\n  loser_rank INT,\n  loser_rank_points INT,\n  loser_seed INT,\n  match_num INT,\n  minutes INT,\n  round TEXT,\n  score TEXT,\n  surface TEXT,\n  tourney_date DATE,\n  tourney_id TEXT,\n  tourney_level TEXT,\n  tourney_name TEXT,\n  w_1stIn TEXT,\n  w_1stWon TEXT,\n  w_2ndWon TEXT,\n  w_SvGms TEXT,\n  w_ace TEXT,\n  w_bpFaced TEXT,\n  w_bpSaved TEXT,\n  w_df TEXT,\n  w_svpt TEXT,\n  winner_age FLOAT,\n  winner_entry TEXT,\n  winner_hand TEXT,\n  winner_ht INT,\n  winner_id INT,\n  winner_ioc TEXT,\n  winner_name TEXT,\n  winner_rank INT,\n  winner_rank_points INT,\n  winner_seed INT,\n  year INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n);\nCREATE TABLE rankings(\n  ranking_date DATE,\n  ranking INT,\n  player_id INT,\n  ranking_points INT,\n  tours INT,\n  FOREIGN KEY(player_id) REFERENCES players(player_id)\n);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50","prompt":"Find the codes of countries that have more than 50 players."}
{"context":"CRloser_rank_pointsEATE TABLE players(\n    player_id INT PRIMARY KEY,\n    first_name TEXT,\n    last_name TEXT,\n    hand TEXT,\n    birth_date DATE,\n    country_code TEXT\n);\nCREATE TABLE matches(\n  best_of INT,\n  draw_size INT,\n  loser_age FLOAT,\n  loser_entry TEXT,\n  loser_hand TEXT,\n  loser_ht INT,\n  loser_id INT,\n  loser_ioc TEXT,\n  loser_name TEXT,\n  loser_rank INT,\n  loser_rank_points INT,\n  loser_seed INT,\n  match_num INT,\n  minutes INT,\n  round TEXT,\n  score TEXT,\n  surface TEXT,\n  tourney_date DATE,\n  tourney_id TEXT,\n  tourney_level TEXT,\n  tourney_name TEXT,\n  winner_age FLOAT,\n  winner_entry TEXT,\n  winner_hand TEXT,\n  winner_ht INT,\n  winner_id INT,\n  winner_ioc TEXT,\n  winner_name TEXT,\n  winner_rank INT,\n  winner_rank_points INT,\n  winner_seed INT,\n  year INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n);\n\nCREATE TABLE qualifying_matches(\n  best_of INT,\n  draw_size INT,\n  l_1stIn TEXT,\n  l_1stWon TEXT,\n  l_2ndWon TEXT,\n  l_SvGms TEXT,\n  l_ace TEXT,\n  l_bpFaced TEXT,\n  l_bpSaved TEXT,\n  l_df TEXT,\n  l_svpt TEXT,\n  loser_age FLOAT,\n  loser_entry TEXT,\n  loser_hand TEXT,\n  loser_ht INT,\n  loser_id INT,\n  loser_ioc TEXT,\n  loser_name TEXT,\n  loser_rank INT,\n  loser_rank_points INT,\n  loser_seed INT,\n  match_num INT,\n  minutes INT,\n  round TEXT,\n  score TEXT,\n  surface TEXT,\n  tourney_date DATE,\n  tourney_id TEXT,\n  tourney_level TEXT,\n  tourney_name TEXT,\n  w_1stIn TEXT,\n  w_1stWon TEXT,\n  w_2ndWon TEXT,\n  w_SvGms TEXT,\n  w_ace TEXT,\n  w_bpFaced TEXT,\n  w_bpSaved TEXT,\n  w_df TEXT,\n  w_svpt TEXT,\n  winner_age FLOAT,\n  winner_entry TEXT,\n  winner_hand TEXT,\n  winner_ht INT,\n  winner_id INT,\n  winner_ioc TEXT,\n  winner_name TEXT,\n  winner_rank INT,\n  winner_rank_points INT,\n  winner_seed INT,\n  year INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n);\nCREATE TABLE rankings(\n  ranking_date DATE,\n  ranking INT,\n  player_id INT,\n  ranking_points INT,\n  tours INT,\n  FOREIGN KEY(player_id) REFERENCES players(player_id)\n);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50","prompt":"What are the codes of countries with more than 50 players?"}
{"context":"CRloser_rank_pointsEATE TABLE players(\n    player_id INT PRIMARY KEY,\n    first_name TEXT,\n    last_name TEXT,\n    hand TEXT,\n    birth_date DATE,\n    country_code TEXT\n);\nCREATE TABLE matches(\n  best_of INT,\n  draw_size INT,\n  loser_age FLOAT,\n  loser_entry TEXT,\n  loser_hand TEXT,\n  loser_ht INT,\n  loser_id INT,\n  loser_ioc TEXT,\n  loser_name TEXT,\n  loser_rank INT,\n  loser_rank_points INT,\n  loser_seed INT,\n  match_num INT,\n  minutes INT,\n  round TEXT,\n  score TEXT,\n  surface TEXT,\n  tourney_date DATE,\n  tourney_id TEXT,\n  tourney_level TEXT,\n  tourney_name TEXT,\n  winner_age FLOAT,\n  winner_entry TEXT,\n  winner_hand TEXT,\n  winner_ht INT,\n  winner_id INT,\n  winner_ioc TEXT,\n  winner_name TEXT,\n  winner_rank INT,\n  winner_rank_points INT,\n  winner_seed INT,\n  year INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n);\n\nCREATE TABLE qualifying_matches(\n  best_of INT,\n  draw_size INT,\n  l_1stIn TEXT,\n  l_1stWon TEXT,\n  l_2ndWon TEXT,\n  l_SvGms TEXT,\n  l_ace TEXT,\n  l_bpFaced TEXT,\n  l_bpSaved TEXT,\n  l_df TEXT,\n  l_svpt TEXT,\n  loser_age FLOAT,\n  loser_entry TEXT,\n  loser_hand TEXT,\n  loser_ht INT,\n  loser_id INT,\n  loser_ioc TEXT,\n  loser_name TEXT,\n  loser_rank INT,\n  loser_rank_points INT,\n  loser_seed INT,\n  match_num INT,\n  minutes INT,\n  round TEXT,\n  score TEXT,\n  surface TEXT,\n  tourney_date DATE,\n  tourney_id TEXT,\n  tourney_level TEXT,\n  tourney_name TEXT,\n  w_1stIn TEXT,\n  w_1stWon TEXT,\n  w_2ndWon TEXT,\n  w_SvGms TEXT,\n  w_ace TEXT,\n  w_bpFaced TEXT,\n  w_bpSaved TEXT,\n  w_df TEXT,\n  w_svpt TEXT,\n  winner_age FLOAT,\n  winner_entry TEXT,\n  winner_hand TEXT,\n  winner_ht INT,\n  winner_id INT,\n  winner_ioc TEXT,\n  winner_name TEXT,\n  winner_rank INT,\n  winner_rank_points INT,\n  winner_seed INT,\n  year INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n);\nCREATE TABLE rankings(\n  ranking_date DATE,\n  ranking INT,\n  player_id INT,\n  ranking_points INT,\n  tours INT,\n  FOREIGN KEY(player_id) REFERENCES players(player_id)\n);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date","prompt":"Find the total number of tours for each ranking date."}
{"context":"CRloser_rank_pointsEATE TABLE players(\n    player_id INT PRIMARY KEY,\n    first_name TEXT,\n    last_name TEXT,\n    hand TEXT,\n    birth_date DATE,\n    country_code TEXT\n);\nCREATE TABLE matches(\n  best_of INT,\n  draw_size INT,\n  loser_age FLOAT,\n  loser_entry TEXT,\n  loser_hand TEXT,\n  loser_ht INT,\n  loser_id INT,\n  loser_ioc TEXT,\n  loser_name TEXT,\n  loser_rank INT,\n  loser_rank_points INT,\n  loser_seed INT,\n  match_num INT,\n  minutes INT,\n  round TEXT,\n  score TEXT,\n  surface TEXT,\n  tourney_date DATE,\n  tourney_id TEXT,\n  tourney_level TEXT,\n  tourney_name TEXT,\n  winner_age FLOAT,\n  winner_entry TEXT,\n  winner_hand TEXT,\n  winner_ht INT,\n  winner_id INT,\n  winner_ioc TEXT,\n  winner_name TEXT,\n  winner_rank INT,\n  winner_rank_points INT,\n  winner_seed INT,\n  year INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n);\n\nCREATE TABLE qualifying_matches(\n  best_of INT,\n  draw_size INT,\n  l_1stIn TEXT,\n  l_1stWon TEXT,\n  l_2ndWon TEXT,\n  l_SvGms TEXT,\n  l_ace TEXT,\n  l_bpFaced TEXT,\n  l_bpSaved TEXT,\n  l_df TEXT,\n  l_svpt TEXT,\n  loser_age FLOAT,\n  loser_entry TEXT,\n  loser_hand TEXT,\n  loser_ht INT,\n  loser_id INT,\n  loser_ioc TEXT,\n  loser_name TEXT,\n  loser_rank INT,\n  loser_rank_points INT,\n  loser_seed INT,\n  match_num INT,\n  minutes INT,\n  round TEXT,\n  score TEXT,\n  surface TEXT,\n  tourney_date DATE,\n  tourney_id TEXT,\n  tourney_level TEXT,\n  tourney_name TEXT,\n  w_1stIn TEXT,\n  w_1stWon TEXT,\n  w_2ndWon TEXT,\n  w_SvGms TEXT,\n  w_ace TEXT,\n  w_bpFaced TEXT,\n  w_bpSaved TEXT,\n  w_df TEXT,\n  w_svpt TEXT,\n  winner_age FLOAT,\n  winner_entry TEXT,\n  winner_hand TEXT,\n  winner_ht INT,\n  winner_id INT,\n  winner_ioc TEXT,\n  winner_name TEXT,\n  winner_rank INT,\n  winner_rank_points INT,\n  winner_seed INT,\n  year INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n);\nCREATE TABLE rankings(\n  ranking_date DATE,\n  ranking INT,\n  player_id INT,\n  ranking_points INT,\n  tours INT,\n  FOREIGN KEY(player_id) REFERENCES players(player_id)\n);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date","prompt":"How many total tours were there for each ranking date?"}
{"context":"CRloser_rank_pointsEATE TABLE players(\n    player_id INT PRIMARY KEY,\n    first_name TEXT,\n    last_name TEXT,\n    hand TEXT,\n    birth_date DATE,\n    country_code TEXT\n);\nCREATE TABLE matches(\n  best_of INT,\n  draw_size INT,\n  loser_age FLOAT,\n  loser_entry TEXT,\n  loser_hand TEXT,\n  loser_ht INT,\n  loser_id INT,\n  loser_ioc TEXT,\n  loser_name TEXT,\n  loser_rank INT,\n  loser_rank_points INT,\n  loser_seed INT,\n  match_num INT,\n  minutes INT,\n  round TEXT,\n  score TEXT,\n  surface TEXT,\n  tourney_date DATE,\n  tourney_id TEXT,\n  tourney_level TEXT,\n  tourney_name TEXT,\n  winner_age FLOAT,\n  winner_entry TEXT,\n  winner_hand TEXT,\n  winner_ht INT,\n  winner_id INT,\n  winner_ioc TEXT,\n  winner_name TEXT,\n  winner_rank INT,\n  winner_rank_points INT,\n  winner_seed INT,\n  year INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n);\n\nCREATE TABLE qualifying_matches(\n  best_of INT,\n  draw_size INT,\n  l_1stIn TEXT,\n  l_1stWon TEXT,\n  l_2ndWon TEXT,\n  l_SvGms TEXT,\n  l_ace TEXT,\n  l_bpFaced TEXT,\n  l_bpSaved TEXT,\n  l_df TEXT,\n  l_svpt TEXT,\n  loser_age FLOAT,\n  loser_entry TEXT,\n  loser_hand TEXT,\n  loser_ht INT,\n  loser_id INT,\n  loser_ioc TEXT,\n  loser_name TEXT,\n  loser_rank INT,\n  loser_rank_points INT,\n  loser_seed INT,\n  match_num INT,\n  minutes INT,\n  round TEXT,\n  score TEXT,\n  surface TEXT,\n  tourney_date DATE,\n  tourney_id TEXT,\n  tourney_level TEXT,\n  tourney_name TEXT,\n  w_1stIn TEXT,\n  w_1stWon TEXT,\n  w_2ndWon TEXT,\n  w_SvGms TEXT,\n  w_ace TEXT,\n  w_bpFaced TEXT,\n  w_bpSaved TEXT,\n  w_df TEXT,\n  w_svpt TEXT,\n  winner_age FLOAT,\n  winner_entry TEXT,\n  winner_hand TEXT,\n  winner_ht INT,\n  winner_id INT,\n  winner_ioc TEXT,\n  winner_name TEXT,\n  winner_rank INT,\n  winner_rank_points INT,\n  winner_seed INT,\n  year INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n);\nCREATE TABLE rankings(\n  ranking_date DATE,\n  ranking INT,\n  player_id INT,\n  ranking_points INT,\n  tours INT,\n  FOREIGN KEY(player_id) REFERENCES players(player_id)\n);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT count(*) ,  YEAR FROM matches GROUP BY YEAR","prompt":"Find the number of matches happened in each year."}
{"context":"CRloser_rank_pointsEATE TABLE players(\n    player_id INT PRIMARY KEY,\n    first_name TEXT,\n    last_name TEXT,\n    hand TEXT,\n    birth_date DATE,\n    country_code TEXT\n);\nCREATE TABLE matches(\n  best_of INT,\n  draw_size INT,\n  loser_age FLOAT,\n  loser_entry TEXT,\n  loser_hand TEXT,\n  loser_ht INT,\n  loser_id INT,\n  loser_ioc TEXT,\n  loser_name TEXT,\n  loser_rank INT,\n  loser_rank_points INT,\n  loser_seed INT,\n  match_num INT,\n  minutes INT,\n  round TEXT,\n  score TEXT,\n  surface TEXT,\n  tourney_date DATE,\n  tourney_id TEXT,\n  tourney_level TEXT,\n  tourney_name TEXT,\n  winner_age FLOAT,\n  winner_entry TEXT,\n  winner_hand TEXT,\n  winner_ht INT,\n  winner_id INT,\n  winner_ioc TEXT,\n  winner_name TEXT,\n  winner_rank INT,\n  winner_rank_points INT,\n  winner_seed INT,\n  year INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n);\n\nCREATE TABLE qualifying_matches(\n  best_of INT,\n  draw_size INT,\n  l_1stIn TEXT,\n  l_1stWon TEXT,\n  l_2ndWon TEXT,\n  l_SvGms TEXT,\n  l_ace TEXT,\n  l_bpFaced TEXT,\n  l_bpSaved TEXT,\n  l_df TEXT,\n  l_svpt TEXT,\n  loser_age FLOAT,\n  loser_entry TEXT,\n  loser_hand TEXT,\n  loser_ht INT,\n  loser_id INT,\n  loser_ioc TEXT,\n  loser_name TEXT,\n  loser_rank INT,\n  loser_rank_points INT,\n  loser_seed INT,\n  match_num INT,\n  minutes INT,\n  round TEXT,\n  score TEXT,\n  surface TEXT,\n  tourney_date DATE,\n  tourney_id TEXT,\n  tourney_level TEXT,\n  tourney_name TEXT,\n  w_1stIn TEXT,\n  w_1stWon TEXT,\n  w_2ndWon TEXT,\n  w_SvGms TEXT,\n  w_ace TEXT,\n  w_bpFaced TEXT,\n  w_bpSaved TEXT,\n  w_df TEXT,\n  w_svpt TEXT,\n  winner_age FLOAT,\n  winner_entry TEXT,\n  winner_hand TEXT,\n  winner_ht INT,\n  winner_id INT,\n  winner_ioc TEXT,\n  winner_name TEXT,\n  winner_rank INT,\n  winner_rank_points INT,\n  winner_seed INT,\n  year INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n);\nCREATE TABLE rankings(\n  ranking_date DATE,\n  ranking INT,\n  player_id INT,\n  ranking_points INT,\n  tours INT,\n  FOREIGN KEY(player_id) REFERENCES players(player_id)\n);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT count(*) ,  YEAR FROM matches GROUP BY YEAR","prompt":"How many matches were played in each year?"}
{"context":"CRloser_rank_pointsEATE TABLE players(\n    player_id INT PRIMARY KEY,\n    first_name TEXT,\n    last_name TEXT,\n    hand TEXT,\n    birth_date DATE,\n    country_code TEXT\n);\nCREATE TABLE matches(\n  best_of INT,\n  draw_size INT,\n  loser_age FLOAT,\n  loser_entry TEXT,\n  loser_hand TEXT,\n  loser_ht INT,\n  loser_id INT,\n  loser_ioc TEXT,\n  loser_name TEXT,\n  loser_rank INT,\n  loser_rank_points INT,\n  loser_seed INT,\n  match_num INT,\n  minutes INT,\n  round TEXT,\n  score TEXT,\n  surface TEXT,\n  tourney_date DATE,\n  tourney_id TEXT,\n  tourney_level TEXT,\n  tourney_name TEXT,\n  winner_age FLOAT,\n  winner_entry TEXT,\n  winner_hand TEXT,\n  winner_ht INT,\n  winner_id INT,\n  winner_ioc TEXT,\n  winner_name TEXT,\n  winner_rank INT,\n  winner_rank_points INT,\n  winner_seed INT,\n  year INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n);\n\nCREATE TABLE qualifying_matches(\n  best_of INT,\n  draw_size INT,\n  l_1stIn TEXT,\n  l_1stWon TEXT,\n  l_2ndWon TEXT,\n  l_SvGms TEXT,\n  l_ace TEXT,\n  l_bpFaced TEXT,\n  l_bpSaved TEXT,\n  l_df TEXT,\n  l_svpt TEXT,\n  loser_age FLOAT,\n  loser_entry TEXT,\n  loser_hand TEXT,\n  loser_ht INT,\n  loser_id INT,\n  loser_ioc TEXT,\n  loser_name TEXT,\n  loser_rank INT,\n  loser_rank_points INT,\n  loser_seed INT,\n  match_num INT,\n  minutes INT,\n  round TEXT,\n  score TEXT,\n  surface TEXT,\n  tourney_date DATE,\n  tourney_id TEXT,\n  tourney_level TEXT,\n  tourney_name TEXT,\n  w_1stIn TEXT,\n  w_1stWon TEXT,\n  w_2ndWon TEXT,\n  w_SvGms TEXT,\n  w_ace TEXT,\n  w_bpFaced TEXT,\n  w_bpSaved TEXT,\n  w_df TEXT,\n  w_svpt TEXT,\n  winner_age FLOAT,\n  winner_entry TEXT,\n  winner_hand TEXT,\n  winner_ht INT,\n  winner_id INT,\n  winner_ioc TEXT,\n  winner_name TEXT,\n  winner_rank INT,\n  winner_rank_points INT,\n  winner_seed INT,\n  year INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n);\nCREATE TABLE rankings(\n  ranking_date DATE,\n  ranking INT,\n  player_id INT,\n  ranking_points INT,\n  tours INT,\n  FOREIGN KEY(player_id) REFERENCES players(player_id)\n);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3","prompt":"Find the name and rank of the 3 youngest winners across all matches."}
{"context":"CRloser_rank_pointsEATE TABLE players(\n    player_id INT PRIMARY KEY,\n    first_name TEXT,\n    last_name TEXT,\n    hand TEXT,\n    birth_date DATE,\n    country_code TEXT\n);\nCREATE TABLE matches(\n  best_of INT,\n  draw_size INT,\n  loser_age FLOAT,\n  loser_entry TEXT,\n  loser_hand TEXT,\n  loser_ht INT,\n  loser_id INT,\n  loser_ioc TEXT,\n  loser_name TEXT,\n  loser_rank INT,\n  loser_rank_points INT,\n  loser_seed INT,\n  match_num INT,\n  minutes INT,\n  round TEXT,\n  score TEXT,\n  surface TEXT,\n  tourney_date DATE,\n  tourney_id TEXT,\n  tourney_level TEXT,\n  tourney_name TEXT,\n  winner_age FLOAT,\n  winner_entry TEXT,\n  winner_hand TEXT,\n  winner_ht INT,\n  winner_id INT,\n  winner_ioc TEXT,\n  winner_name TEXT,\n  winner_rank INT,\n  winner_rank_points INT,\n  winner_seed INT,\n  year INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n);\n\nCREATE TABLE qualifying_matches(\n  best_of INT,\n  draw_size INT,\n  l_1stIn TEXT,\n  l_1stWon TEXT,\n  l_2ndWon TEXT,\n  l_SvGms TEXT,\n  l_ace TEXT,\n  l_bpFaced TEXT,\n  l_bpSaved TEXT,\n  l_df TEXT,\n  l_svpt TEXT,\n  loser_age FLOAT,\n  loser_entry TEXT,\n  loser_hand TEXT,\n  loser_ht INT,\n  loser_id INT,\n  loser_ioc TEXT,\n  loser_name TEXT,\n  loser_rank INT,\n  loser_rank_points INT,\n  loser_seed INT,\n  match_num INT,\n  minutes INT,\n  round TEXT,\n  score TEXT,\n  surface TEXT,\n  tourney_date DATE,\n  tourney_id TEXT,\n  tourney_level TEXT,\n  tourney_name TEXT,\n  w_1stIn TEXT,\n  w_1stWon TEXT,\n  w_2ndWon TEXT,\n  w_SvGms TEXT,\n  w_ace TEXT,\n  w_bpFaced TEXT,\n  w_bpSaved TEXT,\n  w_df TEXT,\n  w_svpt TEXT,\n  winner_age FLOAT,\n  winner_entry TEXT,\n  winner_hand TEXT,\n  winner_ht INT,\n  winner_id INT,\n  winner_ioc TEXT,\n  winner_name TEXT,\n  winner_rank INT,\n  winner_rank_points INT,\n  winner_seed INT,\n  year INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n);\nCREATE TABLE rankings(\n  ranking_date DATE,\n  ranking INT,\n  player_id INT,\n  ranking_points INT,\n  tours INT,\n  FOREIGN KEY(player_id) REFERENCES players(player_id)\n);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3","prompt":"What are the names and ranks of the three youngest winners across all matches?"}
{"context":"CRloser_rank_pointsEATE TABLE players(\n    player_id INT PRIMARY KEY,\n    first_name TEXT,\n    last_name TEXT,\n    hand TEXT,\n    birth_date DATE,\n    country_code TEXT\n);\nCREATE TABLE matches(\n  best_of INT,\n  draw_size INT,\n  loser_age FLOAT,\n  loser_entry TEXT,\n  loser_hand TEXT,\n  loser_ht INT,\n  loser_id INT,\n  loser_ioc TEXT,\n  loser_name TEXT,\n  loser_rank INT,\n  loser_rank_points INT,\n  loser_seed INT,\n  match_num INT,\n  minutes INT,\n  round TEXT,\n  score TEXT,\n  surface TEXT,\n  tourney_date DATE,\n  tourney_id TEXT,\n  tourney_level TEXT,\n  tourney_name TEXT,\n  winner_age FLOAT,\n  winner_entry TEXT,\n  winner_hand TEXT,\n  winner_ht INT,\n  winner_id INT,\n  winner_ioc TEXT,\n  winner_name TEXT,\n  winner_rank INT,\n  winner_rank_points INT,\n  winner_seed INT,\n  year INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n);\n\nCREATE TABLE qualifying_matches(\n  best_of INT,\n  draw_size INT,\n  l_1stIn TEXT,\n  l_1stWon TEXT,\n  l_2ndWon TEXT,\n  l_SvGms TEXT,\n  l_ace TEXT,\n  l_bpFaced TEXT,\n  l_bpSaved TEXT,\n  l_df TEXT,\n  l_svpt TEXT,\n  loser_age FLOAT,\n  loser_entry TEXT,\n  loser_hand TEXT,\n  loser_ht INT,\n  loser_id INT,\n  loser_ioc TEXT,\n  loser_name TEXT,\n  loser_rank INT,\n  loser_rank_points INT,\n  loser_seed INT,\n  match_num INT,\n  minutes INT,\n  round TEXT,\n  score TEXT,\n  surface TEXT,\n  tourney_date DATE,\n  tourney_id TEXT,\n  tourney_level TEXT,\n  tourney_name TEXT,\n  w_1stIn TEXT,\n  w_1stWon TEXT,\n  w_2ndWon TEXT,\n  w_SvGms TEXT,\n  w_ace TEXT,\n  w_bpFaced TEXT,\n  w_bpSaved TEXT,\n  w_df TEXT,\n  w_svpt TEXT,\n  winner_age FLOAT,\n  winner_entry TEXT,\n  winner_hand TEXT,\n  winner_ht INT,\n  winner_id INT,\n  winner_ioc TEXT,\n  winner_name TEXT,\n  winner_rank INT,\n  winner_rank_points INT,\n  winner_seed INT,\n  year INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n);\nCREATE TABLE rankings(\n  ranking_date DATE,\n  ranking INT,\n  player_id INT,\n  ranking_points INT,\n  tours INT,\n  FOREIGN KEY(player_id) REFERENCES players(player_id)\n);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT count(*) ,  hand FROM players GROUP BY hand","prompt":"Find the number of players for each hand type."}
{"context":"CRloser_rank_pointsEATE TABLE players(\n    player_id INT PRIMARY KEY,\n    first_name TEXT,\n    last_name TEXT,\n    hand TEXT,\n    birth_date DATE,\n    country_code TEXT\n);\nCREATE TABLE matches(\n  best_of INT,\n  draw_size INT,\n  loser_age FLOAT,\n  loser_entry TEXT,\n  loser_hand TEXT,\n  loser_ht INT,\n  loser_id INT,\n  loser_ioc TEXT,\n  loser_name TEXT,\n  loser_rank INT,\n  loser_rank_points INT,\n  loser_seed INT,\n  match_num INT,\n  minutes INT,\n  round TEXT,\n  score TEXT,\n  surface TEXT,\n  tourney_date DATE,\n  tourney_id TEXT,\n  tourney_level TEXT,\n  tourney_name TEXT,\n  winner_age FLOAT,\n  winner_entry TEXT,\n  winner_hand TEXT,\n  winner_ht INT,\n  winner_id INT,\n  winner_ioc TEXT,\n  winner_name TEXT,\n  winner_rank INT,\n  winner_rank_points INT,\n  winner_seed INT,\n  year INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n);\n\nCREATE TABLE qualifying_matches(\n  best_of INT,\n  draw_size INT,\n  l_1stIn TEXT,\n  l_1stWon TEXT,\n  l_2ndWon TEXT,\n  l_SvGms TEXT,\n  l_ace TEXT,\n  l_bpFaced TEXT,\n  l_bpSaved TEXT,\n  l_df TEXT,\n  l_svpt TEXT,\n  loser_age FLOAT,\n  loser_entry TEXT,\n  loser_hand TEXT,\n  loser_ht INT,\n  loser_id INT,\n  loser_ioc TEXT,\n  loser_name TEXT,\n  loser_rank INT,\n  loser_rank_points INT,\n  loser_seed INT,\n  match_num INT,\n  minutes INT,\n  round TEXT,\n  score TEXT,\n  surface TEXT,\n  tourney_date DATE,\n  tourney_id TEXT,\n  tourney_level TEXT,\n  tourney_name TEXT,\n  w_1stIn TEXT,\n  w_1stWon TEXT,\n  w_2ndWon TEXT,\n  w_SvGms TEXT,\n  w_ace TEXT,\n  w_bpFaced TEXT,\n  w_bpSaved TEXT,\n  w_df TEXT,\n  w_svpt TEXT,\n  winner_age FLOAT,\n  winner_entry TEXT,\n  winner_hand TEXT,\n  winner_ht INT,\n  winner_id INT,\n  winner_ioc TEXT,\n  winner_name TEXT,\n  winner_rank INT,\n  winner_rank_points INT,\n  winner_seed INT,\n  year INT,\n  FOREIGN KEY(loser_id) REFERENCES players(player_id),\n  FOREIGN KEY(winner_id) REFERENCES players(player_id)\n);\nCREATE TABLE rankings(\n  ranking_date DATE,\n  ranking INT,\n  player_id INT,\n  ranking_points INT,\n  tours INT,\n  FOREIGN KEY(player_id) REFERENCES players(player_id)\n);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT count(*) ,  hand FROM players GROUP BY hand","prompt":"How many players are there for each hand type?"}
{"context":"PRAGMA foreign_keys = ON;\nCREATE TABLE poker_player (\nPoker_Player_ID int,\nPeople_ID int,\nFinal_Table_Made real,\nBest_Finish real,\nMoney_Rank real,\nEarnings real,\nPRIMARY KEY (Poker_Player_ID),\nFOREIGN KEY (People_ID) REFERENCES people(People_ID)\n);\nCREATE TABLE people (\nPeople_ID int,\nNationality text,\nName text,\nBirth_Date text,\nHeight real,\nPRIMARY KEY (People_ID)\n);\nINSERT INTO  people VALUES (1,Russia,Aleksey Ostapenko,May 26, 1986,207);\nINSERT INTO  people VALUES (2,Bulgaria,Teodor Salparov,August 16, 1982,182);\nINSERT INTO  people VALUES (3,Russia,Roman Bragin,April 17, 1987,187);\nINSERT INTO  people VALUES (4,Russia,Sergey Grankin,January 22, 1987,193);\nINSERT INTO  people VALUES (5,Russia,Yevgeni Sivozhelez,August 8, 1986,196);\nINSERT INTO  people VALUES (6,Russia,Maksim Botin,July 14, 1983,194);\nINSERT INTO  people VALUES (7,Russia,Semen Poltavskiy,February 8, 1981,205);\nINSERT INTO  poker_player VALUES (1,1,42,1,68,476090);\nINSERT INTO  poker_player VALUES (2,2,10,2,141,189233);\nINSERT INTO  poker_player VALUES (3,5,21,1,166,104871);\nINSERT INTO  poker_player VALUES (4,6,19,2,58,596462);\nINSERT INTO  poker_player VALUES (5,7,26,3,154,142800);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT count(*) FROM poker_player","prompt":"How many poker players are there?"}
{"context":"PRAGMA foreign_keys = ON;\nCREATE TABLE poker_player (\nPoker_Player_ID int,\nPeople_ID int,\nFinal_Table_Made real,\nBest_Finish real,\nMoney_Rank real,\nEarnings real,\nPRIMARY KEY (Poker_Player_ID),\nFOREIGN KEY (People_ID) REFERENCES people(People_ID)\n);\nCREATE TABLE people (\nPeople_ID int,\nNationality text,\nName text,\nBirth_Date text,\nHeight real,\nPRIMARY KEY (People_ID)\n);\nINSERT INTO  people VALUES (1,Russia,Aleksey Ostapenko,May 26, 1986,207);\nINSERT INTO  people VALUES (2,Bulgaria,Teodor Salparov,August 16, 1982,182);\nINSERT INTO  people VALUES (3,Russia,Roman Bragin,April 17, 1987,187);\nINSERT INTO  people VALUES (4,Russia,Sergey Grankin,January 22, 1987,193);\nINSERT INTO  people VALUES (5,Russia,Yevgeni Sivozhelez,August 8, 1986,196);\nINSERT INTO  people VALUES (6,Russia,Maksim Botin,July 14, 1983,194);\nINSERT INTO  people VALUES (7,Russia,Semen Poltavskiy,February 8, 1981,205);\nINSERT INTO  poker_player VALUES (1,1,42,1,68,476090);\nINSERT INTO  poker_player VALUES (2,2,10,2,141,189233);\nINSERT INTO  poker_player VALUES (3,5,21,1,166,104871);\nINSERT INTO  poker_player VALUES (4,6,19,2,58,596462);\nINSERT INTO  poker_player VALUES (5,7,26,3,154,142800);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT count(*) FROM poker_player","prompt":"Count the number of poker players."}
{"context":"PRAGMA foreign_keys = ON;\nCREATE TABLE poker_player (\nPoker_Player_ID int,\nPeople_ID int,\nFinal_Table_Made real,\nBest_Finish real,\nMoney_Rank real,\nEarnings real,\nPRIMARY KEY (Poker_Player_ID),\nFOREIGN KEY (People_ID) REFERENCES people(People_ID)\n);\nCREATE TABLE people (\nPeople_ID int,\nNationality text,\nName text,\nBirth_Date text,\nHeight real,\nPRIMARY KEY (People_ID)\n);\nINSERT INTO  people VALUES (1,Russia,Aleksey Ostapenko,May 26, 1986,207);\nINSERT INTO  people VALUES (2,Bulgaria,Teodor Salparov,August 16, 1982,182);\nINSERT INTO  people VALUES (3,Russia,Roman Bragin,April 17, 1987,187);\nINSERT INTO  people VALUES (4,Russia,Sergey Grankin,January 22, 1987,193);\nINSERT INTO  people VALUES (5,Russia,Yevgeni Sivozhelez,August 8, 1986,196);\nINSERT INTO  people VALUES (6,Russia,Maksim Botin,July 14, 1983,194);\nINSERT INTO  people VALUES (7,Russia,Semen Poltavskiy,February 8, 1981,205);\nINSERT INTO  poker_player VALUES (1,1,42,1,68,476090);\nINSERT INTO  poker_player VALUES (2,2,10,2,141,189233);\nINSERT INTO  poker_player VALUES (3,5,21,1,166,104871);\nINSERT INTO  poker_player VALUES (4,6,19,2,58,596462);\nINSERT INTO  poker_player VALUES (5,7,26,3,154,142800);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT Earnings FROM poker_player ORDER BY Earnings DESC","prompt":"List the earnings of poker players in descending order."}
{"context":"PRAGMA foreign_keys = ON;\nCREATE TABLE poker_player (\nPoker_Player_ID int,\nPeople_ID int,\nFinal_Table_Made real,\nBest_Finish real,\nMoney_Rank real,\nEarnings real,\nPRIMARY KEY (Poker_Player_ID),\nFOREIGN KEY (People_ID) REFERENCES people(People_ID)\n);\nCREATE TABLE people (\nPeople_ID int,\nNationality text,\nName text,\nBirth_Date text,\nHeight real,\nPRIMARY KEY (People_ID)\n);\nINSERT INTO  people VALUES (1,Russia,Aleksey Ostapenko,May 26, 1986,207);\nINSERT INTO  people VALUES (2,Bulgaria,Teodor Salparov,August 16, 1982,182);\nINSERT INTO  people VALUES (3,Russia,Roman Bragin,April 17, 1987,187);\nINSERT INTO  people VALUES (4,Russia,Sergey Grankin,January 22, 1987,193);\nINSERT INTO  people VALUES (5,Russia,Yevgeni Sivozhelez,August 8, 1986,196);\nINSERT INTO  people VALUES (6,Russia,Maksim Botin,July 14, 1983,194);\nINSERT INTO  people VALUES (7,Russia,Semen Poltavskiy,February 8, 1981,205);\nINSERT INTO  poker_player VALUES (1,1,42,1,68,476090);\nINSERT INTO  poker_player VALUES (2,2,10,2,141,189233);\nINSERT INTO  poker_player VALUES (3,5,21,1,166,104871);\nINSERT INTO  poker_player VALUES (4,6,19,2,58,596462);\nINSERT INTO  poker_player VALUES (5,7,26,3,154,142800);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT Earnings FROM poker_player ORDER BY Earnings DESC","prompt":"What are the earnings of poker players, ordered descending by value?"}
{"context":"PRAGMA foreign_keys = ON;\nCREATE TABLE poker_player (\nPoker_Player_ID int,\nPeople_ID int,\nFinal_Table_Made real,\nBest_Finish real,\nMoney_Rank real,\nEarnings real,\nPRIMARY KEY (Poker_Player_ID),\nFOREIGN KEY (People_ID) REFERENCES people(People_ID)\n);\nCREATE TABLE people (\nPeople_ID int,\nNationality text,\nName text,\nBirth_Date text,\nHeight real,\nPRIMARY KEY (People_ID)\n);\nINSERT INTO  people VALUES (1,Russia,Aleksey Ostapenko,May 26, 1986,207);\nINSERT INTO  people VALUES (2,Bulgaria,Teodor Salparov,August 16, 1982,182);\nINSERT INTO  people VALUES (3,Russia,Roman Bragin,April 17, 1987,187);\nINSERT INTO  people VALUES (4,Russia,Sergey Grankin,January 22, 1987,193);\nINSERT INTO  people VALUES (5,Russia,Yevgeni Sivozhelez,August 8, 1986,196);\nINSERT INTO  people VALUES (6,Russia,Maksim Botin,July 14, 1983,194);\nINSERT INTO  people VALUES (7,Russia,Semen Poltavskiy,February 8, 1981,205);\nINSERT INTO  poker_player VALUES (1,1,42,1,68,476090);\nINSERT INTO  poker_player VALUES (2,2,10,2,141,189233);\nINSERT INTO  poker_player VALUES (3,5,21,1,166,104871);\nINSERT INTO  poker_player VALUES (4,6,19,2,58,596462);\nINSERT INTO  poker_player VALUES (5,7,26,3,154,142800);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT Final_Table_Made ,  Best_Finish FROM poker_player","prompt":"List the final tables made and the best finishes of poker players."}
{"context":"PRAGMA foreign_keys = ON;\nCREATE TABLE poker_player (\nPoker_Player_ID int,\nPeople_ID int,\nFinal_Table_Made real,\nBest_Finish real,\nMoney_Rank real,\nEarnings real,\nPRIMARY KEY (Poker_Player_ID),\nFOREIGN KEY (People_ID) REFERENCES people(People_ID)\n);\nCREATE TABLE people (\nPeople_ID int,\nNationality text,\nName text,\nBirth_Date text,\nHeight real,\nPRIMARY KEY (People_ID)\n);\nINSERT INTO  people VALUES (1,Russia,Aleksey Ostapenko,May 26, 1986,207);\nINSERT INTO  people VALUES (2,Bulgaria,Teodor Salparov,August 16, 1982,182);\nINSERT INTO  people VALUES (3,Russia,Roman Bragin,April 17, 1987,187);\nINSERT INTO  people VALUES (4,Russia,Sergey Grankin,January 22, 1987,193);\nINSERT INTO  people VALUES (5,Russia,Yevgeni Sivozhelez,August 8, 1986,196);\nINSERT INTO  people VALUES (6,Russia,Maksim Botin,July 14, 1983,194);\nINSERT INTO  people VALUES (7,Russia,Semen Poltavskiy,February 8, 1981,205);\nINSERT INTO  poker_player VALUES (1,1,42,1,68,476090);\nINSERT INTO  poker_player VALUES (2,2,10,2,141,189233);\nINSERT INTO  poker_player VALUES (3,5,21,1,166,104871);\nINSERT INTO  poker_player VALUES (4,6,19,2,58,596462);\nINSERT INTO  poker_player VALUES (5,7,26,3,154,142800);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT Final_Table_Made ,  Best_Finish FROM poker_player","prompt":"What are the final tables made and best finishes for all poker players?"}
{"context":"PRAGMA foreign_keys = ON;\nCREATE TABLE poker_player (\nPoker_Player_ID int,\nPeople_ID int,\nFinal_Table_Made real,\nBest_Finish real,\nMoney_Rank real,\nEarnings real,\nPRIMARY KEY (Poker_Player_ID),\nFOREIGN KEY (People_ID) REFERENCES people(People_ID)\n);\nCREATE TABLE people (\nPeople_ID int,\nNationality text,\nName text,\nBirth_Date text,\nHeight real,\nPRIMARY KEY (People_ID)\n);\nINSERT INTO  people VALUES (1,Russia,Aleksey Ostapenko,May 26, 1986,207);\nINSERT INTO  people VALUES (2,Bulgaria,Teodor Salparov,August 16, 1982,182);\nINSERT INTO  people VALUES (3,Russia,Roman Bragin,April 17, 1987,187);\nINSERT INTO  people VALUES (4,Russia,Sergey Grankin,January 22, 1987,193);\nINSERT INTO  people VALUES (5,Russia,Yevgeni Sivozhelez,August 8, 1986,196);\nINSERT INTO  people VALUES (6,Russia,Maksim Botin,July 14, 1983,194);\nINSERT INTO  people VALUES (7,Russia,Semen Poltavskiy,February 8, 1981,205);\nINSERT INTO  poker_player VALUES (1,1,42,1,68,476090);\nINSERT INTO  poker_player VALUES (2,2,10,2,141,189233);\nINSERT INTO  poker_player VALUES (3,5,21,1,166,104871);\nINSERT INTO  poker_player VALUES (4,6,19,2,58,596462);\nINSERT INTO  poker_player VALUES (5,7,26,3,154,142800);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT avg(Earnings) FROM poker_player","prompt":"What is the average earnings of poker players?"}
{"context":"PRAGMA foreign_keys = ON;\nCREATE TABLE poker_player (\nPoker_Player_ID int,\nPeople_ID int,\nFinal_Table_Made real,\nBest_Finish real,\nMoney_Rank real,\nEarnings real,\nPRIMARY KEY (Poker_Player_ID),\nFOREIGN KEY (People_ID) REFERENCES people(People_ID)\n);\nCREATE TABLE people (\nPeople_ID int,\nNationality text,\nName text,\nBirth_Date text,\nHeight real,\nPRIMARY KEY (People_ID)\n);\nINSERT INTO  people VALUES (1,Russia,Aleksey Ostapenko,May 26, 1986,207);\nINSERT INTO  people VALUES (2,Bulgaria,Teodor Salparov,August 16, 1982,182);\nINSERT INTO  people VALUES (3,Russia,Roman Bragin,April 17, 1987,187);\nINSERT INTO  people VALUES (4,Russia,Sergey Grankin,January 22, 1987,193);\nINSERT INTO  people VALUES (5,Russia,Yevgeni Sivozhelez,August 8, 1986,196);\nINSERT INTO  people VALUES (6,Russia,Maksim Botin,July 14, 1983,194);\nINSERT INTO  people VALUES (7,Russia,Semen Poltavskiy,February 8, 1981,205);\nINSERT INTO  poker_player VALUES (1,1,42,1,68,476090);\nINSERT INTO  poker_player VALUES (2,2,10,2,141,189233);\nINSERT INTO  poker_player VALUES (3,5,21,1,166,104871);\nINSERT INTO  poker_player VALUES (4,6,19,2,58,596462);\nINSERT INTO  poker_player VALUES (5,7,26,3,154,142800);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT avg(Earnings) FROM poker_player","prompt":"Return the average earnings across all poker players."}
{"context":"PRAGMA foreign_keys = ON;\nCREATE TABLE poker_player (\nPoker_Player_ID int,\nPeople_ID int,\nFinal_Table_Made real,\nBest_Finish real,\nMoney_Rank real,\nEarnings real,\nPRIMARY KEY (Poker_Player_ID),\nFOREIGN KEY (People_ID) REFERENCES people(People_ID)\n);\nCREATE TABLE people (\nPeople_ID int,\nNationality text,\nName text,\nBirth_Date text,\nHeight real,\nPRIMARY KEY (People_ID)\n);\nINSERT INTO  people VALUES (1,Russia,Aleksey Ostapenko,May 26, 1986,207);\nINSERT INTO  people VALUES (2,Bulgaria,Teodor Salparov,August 16, 1982,182);\nINSERT INTO  people VALUES (3,Russia,Roman Bragin,April 17, 1987,187);\nINSERT INTO  people VALUES (4,Russia,Sergey Grankin,January 22, 1987,193);\nINSERT INTO  people VALUES (5,Russia,Yevgeni Sivozhelez,August 8, 1986,196);\nINSERT INTO  people VALUES (6,Russia,Maksim Botin,July 14, 1983,194);\nINSERT INTO  people VALUES (7,Russia,Semen Poltavskiy,February 8, 1981,205);\nINSERT INTO  poker_player VALUES (1,1,42,1,68,476090);\nINSERT INTO  poker_player VALUES (2,2,10,2,141,189233);\nINSERT INTO  poker_player VALUES (3,5,21,1,166,104871);\nINSERT INTO  poker_player VALUES (4,6,19,2,58,596462);\nINSERT INTO  poker_player VALUES (5,7,26,3,154,142800);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1","prompt":"What is the money rank of the poker player with the highest earnings?"}
{"context":"PRAGMA foreign_keys = ON;\nCREATE TABLE poker_player (\nPoker_Player_ID int,\nPeople_ID int,\nFinal_Table_Made real,\nBest_Finish real,\nMoney_Rank real,\nEarnings real,\nPRIMARY KEY (Poker_Player_ID),\nFOREIGN KEY (People_ID) REFERENCES people(People_ID)\n);\nCREATE TABLE people (\nPeople_ID int,\nNationality text,\nName text,\nBirth_Date text,\nHeight real,\nPRIMARY KEY (People_ID)\n);\nINSERT INTO  people VALUES (1,Russia,Aleksey Ostapenko,May 26, 1986,207);\nINSERT INTO  people VALUES (2,Bulgaria,Teodor Salparov,August 16, 1982,182);\nINSERT INTO  people VALUES (3,Russia,Roman Bragin,April 17, 1987,187);\nINSERT INTO  people VALUES (4,Russia,Sergey Grankin,January 22, 1987,193);\nINSERT INTO  people VALUES (5,Russia,Yevgeni Sivozhelez,August 8, 1986,196);\nINSERT INTO  people VALUES (6,Russia,Maksim Botin,July 14, 1983,194);\nINSERT INTO  people VALUES (7,Russia,Semen Poltavskiy,February 8, 1981,205);\nINSERT INTO  poker_player VALUES (1,1,42,1,68,476090);\nINSERT INTO  poker_player VALUES (2,2,10,2,141,189233);\nINSERT INTO  poker_player VALUES (3,5,21,1,166,104871);\nINSERT INTO  poker_player VALUES (4,6,19,2,58,596462);\nINSERT INTO  poker_player VALUES (5,7,26,3,154,142800);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1","prompt":"Return the money rank of the player with the greatest earnings."}
{"context":"PRAGMA foreign_keys = ON;\nCREATE TABLE poker_player (\nPoker_Player_ID int,\nPeople_ID int,\nFinal_Table_Made real,\nBest_Finish real,\nMoney_Rank real,\nEarnings real,\nPRIMARY KEY (Poker_Player_ID),\nFOREIGN KEY (People_ID) REFERENCES people(People_ID)\n);\nCREATE TABLE people (\nPeople_ID int,\nNationality text,\nName text,\nBirth_Date text,\nHeight real,\nPRIMARY KEY (People_ID)\n);\nINSERT INTO  people VALUES (1,Russia,Aleksey Ostapenko,May 26, 1986,207);\nINSERT INTO  people VALUES (2,Bulgaria,Teodor Salparov,August 16, 1982,182);\nINSERT INTO  people VALUES (3,Russia,Roman Bragin,April 17, 1987,187);\nINSERT INTO  people VALUES (4,Russia,Sergey Grankin,January 22, 1987,193);\nINSERT INTO  people VALUES (5,Russia,Yevgeni Sivozhelez,August 8, 1986,196);\nINSERT INTO  people VALUES (6,Russia,Maksim Botin,July 14, 1983,194);\nINSERT INTO  people VALUES (7,Russia,Semen Poltavskiy,February 8, 1981,205);\nINSERT INTO  poker_player VALUES (1,1,42,1,68,476090);\nINSERT INTO  poker_player VALUES (2,2,10,2,141,189233);\nINSERT INTO  poker_player VALUES (3,5,21,1,166,104871);\nINSERT INTO  poker_player VALUES (4,6,19,2,58,596462);\nINSERT INTO  poker_player VALUES (5,7,26,3,154,142800);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000","prompt":"What is the maximum number of final tables made among poker players with earnings less than 200000?"}
{"context":"PRAGMA foreign_keys = ON;\nCREATE TABLE poker_player (\nPoker_Player_ID int,\nPeople_ID int,\nFinal_Table_Made real,\nBest_Finish real,\nMoney_Rank real,\nEarnings real,\nPRIMARY KEY (Poker_Player_ID),\nFOREIGN KEY (People_ID) REFERENCES people(People_ID)\n);\nCREATE TABLE people (\nPeople_ID int,\nNationality text,\nName text,\nBirth_Date text,\nHeight real,\nPRIMARY KEY (People_ID)\n);\nINSERT INTO  people VALUES (1,Russia,Aleksey Ostapenko,May 26, 1986,207);\nINSERT INTO  people VALUES (2,Bulgaria,Teodor Salparov,August 16, 1982,182);\nINSERT INTO  people VALUES (3,Russia,Roman Bragin,April 17, 1987,187);\nINSERT INTO  people VALUES (4,Russia,Sergey Grankin,January 22, 1987,193);\nINSERT INTO  people VALUES (5,Russia,Yevgeni Sivozhelez,August 8, 1986,196);\nINSERT INTO  people VALUES (6,Russia,Maksim Botin,July 14, 1983,194);\nINSERT INTO  people VALUES (7,Russia,Semen Poltavskiy,February 8, 1981,205);\nINSERT INTO  poker_player VALUES (1,1,42,1,68,476090);\nINSERT INTO  poker_player VALUES (2,2,10,2,141,189233);\nINSERT INTO  poker_player VALUES (3,5,21,1,166,104871);\nINSERT INTO  poker_player VALUES (4,6,19,2,58,596462);\nINSERT INTO  poker_player VALUES (5,7,26,3,154,142800);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000","prompt":"Return the maximum final tables made across all poker players who have earnings below 200000."}
{"context":"PRAGMA foreign_keys = ON;\nCREATE TABLE poker_player (\nPoker_Player_ID int,\nPeople_ID int,\nFinal_Table_Made real,\nBest_Finish real,\nMoney_Rank real,\nEarnings real,\nPRIMARY KEY (Poker_Player_ID),\nFOREIGN KEY (People_ID) REFERENCES people(People_ID)\n);\nCREATE TABLE people (\nPeople_ID int,\nNationality text,\nName text,\nBirth_Date text,\nHeight real,\nPRIMARY KEY (People_ID)\n);\nINSERT INTO  people VALUES (1,Russia,Aleksey Ostapenko,May 26, 1986,207);\nINSERT INTO  people VALUES (2,Bulgaria,Teodor Salparov,August 16, 1982,182);\nINSERT INTO  people VALUES (3,Russia,Roman Bragin,April 17, 1987,187);\nINSERT INTO  people VALUES (4,Russia,Sergey Grankin,January 22, 1987,193);\nINSERT INTO  people VALUES (5,Russia,Yevgeni Sivozhelez,August 8, 1986,196);\nINSERT INTO  people VALUES (6,Russia,Maksim Botin,July 14, 1983,194);\nINSERT INTO  people VALUES (7,Russia,Semen Poltavskiy,February 8, 1981,205);\nINSERT INTO  poker_player VALUES (1,1,42,1,68,476090);\nINSERT INTO  poker_player VALUES (2,2,10,2,141,189233);\nINSERT INTO  poker_player VALUES (3,5,21,1,166,104871);\nINSERT INTO  poker_player VALUES (4,6,19,2,58,596462);\nINSERT INTO  poker_player VALUES (5,7,26,3,154,142800);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID","prompt":"What are the names of poker players?"}
{"context":"PRAGMA foreign_keys = ON;\nCREATE TABLE poker_player (\nPoker_Player_ID int,\nPeople_ID int,\nFinal_Table_Made real,\nBest_Finish real,\nMoney_Rank real,\nEarnings real,\nPRIMARY KEY (Poker_Player_ID),\nFOREIGN KEY (People_ID) REFERENCES people(People_ID)\n);\nCREATE TABLE people (\nPeople_ID int,\nNationality text,\nName text,\nBirth_Date text,\nHeight real,\nPRIMARY KEY (People_ID)\n);\nINSERT INTO  people VALUES (1,Russia,Aleksey Ostapenko,May 26, 1986,207);\nINSERT INTO  people VALUES (2,Bulgaria,Teodor Salparov,August 16, 1982,182);\nINSERT INTO  people VALUES (3,Russia,Roman Bragin,April 17, 1987,187);\nINSERT INTO  people VALUES (4,Russia,Sergey Grankin,January 22, 1987,193);\nINSERT INTO  people VALUES (5,Russia,Yevgeni Sivozhelez,August 8, 1986,196);\nINSERT INTO  people VALUES (6,Russia,Maksim Botin,July 14, 1983,194);\nINSERT INTO  people VALUES (7,Russia,Semen Poltavskiy,February 8, 1981,205);\nINSERT INTO  poker_player VALUES (1,1,42,1,68,476090);\nINSERT INTO  poker_player VALUES (2,2,10,2,141,189233);\nINSERT INTO  poker_player VALUES (3,5,21,1,166,104871);\nINSERT INTO  poker_player VALUES (4,6,19,2,58,596462);\nINSERT INTO  poker_player VALUES (5,7,26,3,154,142800);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID","prompt":"Return the names of all the poker players."}
{"context":"PRAGMA foreign_keys = ON;\nCREATE TABLE poker_player (\nPoker_Player_ID int,\nPeople_ID int,\nFinal_Table_Made real,\nBest_Finish real,\nMoney_Rank real,\nEarnings real,\nPRIMARY KEY (Poker_Player_ID),\nFOREIGN KEY (People_ID) REFERENCES people(People_ID)\n);\nCREATE TABLE people (\nPeople_ID int,\nNationality text,\nName text,\nBirth_Date text,\nHeight real,\nPRIMARY KEY (People_ID)\n);\nINSERT INTO  people VALUES (1,Russia,Aleksey Ostapenko,May 26, 1986,207);\nINSERT INTO  people VALUES (2,Bulgaria,Teodor Salparov,August 16, 1982,182);\nINSERT INTO  people VALUES (3,Russia,Roman Bragin,April 17, 1987,187);\nINSERT INTO  people VALUES (4,Russia,Sergey Grankin,January 22, 1987,193);\nINSERT INTO  people VALUES (5,Russia,Yevgeni Sivozhelez,August 8, 1986,196);\nINSERT INTO  people VALUES (6,Russia,Maksim Botin,July 14, 1983,194);\nINSERT INTO  people VALUES (7,Russia,Semen Poltavskiy,February 8, 1981,205);\nINSERT INTO  poker_player VALUES (1,1,42,1,68,476090);\nINSERT INTO  poker_player VALUES (2,2,10,2,141,189233);\nINSERT INTO  poker_player VALUES (3,5,21,1,166,104871);\nINSERT INTO  poker_player VALUES (4,6,19,2,58,596462);\nINSERT INTO  poker_player VALUES (5,7,26,3,154,142800);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000","prompt":"What are the names of poker players whose earnings is higher than 300000?"}
{"context":"PRAGMA foreign_keys = ON;\nCREATE TABLE poker_player (\nPoker_Player_ID int,\nPeople_ID int,\nFinal_Table_Made real,\nBest_Finish real,\nMoney_Rank real,\nEarnings real,\nPRIMARY KEY (Poker_Player_ID),\nFOREIGN KEY (People_ID) REFERENCES people(People_ID)\n);\nCREATE TABLE people (\nPeople_ID int,\nNationality text,\nName text,\nBirth_Date text,\nHeight real,\nPRIMARY KEY (People_ID)\n);\nINSERT INTO  people VALUES (1,Russia,Aleksey Ostapenko,May 26, 1986,207);\nINSERT INTO  people VALUES (2,Bulgaria,Teodor Salparov,August 16, 1982,182);\nINSERT INTO  people VALUES (3,Russia,Roman Bragin,April 17, 1987,187);\nINSERT INTO  people VALUES (4,Russia,Sergey Grankin,January 22, 1987,193);\nINSERT INTO  people VALUES (5,Russia,Yevgeni Sivozhelez,August 8, 1986,196);\nINSERT INTO  people VALUES (6,Russia,Maksim Botin,July 14, 1983,194);\nINSERT INTO  people VALUES (7,Russia,Semen Poltavskiy,February 8, 1981,205);\nINSERT INTO  poker_player VALUES (1,1,42,1,68,476090);\nINSERT INTO  poker_player VALUES (2,2,10,2,141,189233);\nINSERT INTO  poker_player VALUES (3,5,21,1,166,104871);\nINSERT INTO  poker_player VALUES (4,6,19,2,58,596462);\nINSERT INTO  poker_player VALUES (5,7,26,3,154,142800);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000","prompt":"Give the names of poker players who have earnings above 300000."}
{"context":"PRAGMA foreign_keys = ON;\nCREATE TABLE poker_player (\nPoker_Player_ID int,\nPeople_ID int,\nFinal_Table_Made real,\nBest_Finish real,\nMoney_Rank real,\nEarnings real,\nPRIMARY KEY (Poker_Player_ID),\nFOREIGN KEY (People_ID) REFERENCES people(People_ID)\n);\nCREATE TABLE people (\nPeople_ID int,\nNationality text,\nName text,\nBirth_Date text,\nHeight real,\nPRIMARY KEY (People_ID)\n);\nINSERT INTO  people VALUES (1,Russia,Aleksey Ostapenko,May 26, 1986,207);\nINSERT INTO  people VALUES (2,Bulgaria,Teodor Salparov,August 16, 1982,182);\nINSERT INTO  people VALUES (3,Russia,Roman Bragin,April 17, 1987,187);\nINSERT INTO  people VALUES (4,Russia,Sergey Grankin,January 22, 1987,193);\nINSERT INTO  people VALUES (5,Russia,Yevgeni Sivozhelez,August 8, 1986,196);\nINSERT INTO  people VALUES (6,Russia,Maksim Botin,July 14, 1983,194);\nINSERT INTO  people VALUES (7,Russia,Semen Poltavskiy,February 8, 1981,205);\nINSERT INTO  poker_player VALUES (1,1,42,1,68,476090);\nINSERT INTO  poker_player VALUES (2,2,10,2,141,189233);\nINSERT INTO  poker_player VALUES (3,5,21,1,166,104871);\nINSERT INTO  poker_player VALUES (4,6,19,2,58,596462);\nINSERT INTO  poker_player VALUES (5,7,26,3,154,142800);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Final_Table_Made","prompt":"List the names of poker players ordered by the final tables made in ascending order."}
{"context":"PRAGMA foreign_keys = ON;\nCREATE TABLE poker_player (\nPoker_Player_ID int,\nPeople_ID int,\nFinal_Table_Made real,\nBest_Finish real,\nMoney_Rank real,\nEarnings real,\nPRIMARY KEY (Poker_Player_ID),\nFOREIGN KEY (People_ID) REFERENCES people(People_ID)\n);\nCREATE TABLE people (\nPeople_ID int,\nNationality text,\nName text,\nBirth_Date text,\nHeight real,\nPRIMARY KEY (People_ID)\n);\nINSERT INTO  people VALUES (1,Russia,Aleksey Ostapenko,May 26, 1986,207);\nINSERT INTO  people VALUES (2,Bulgaria,Teodor Salparov,August 16, 1982,182);\nINSERT INTO  people VALUES (3,Russia,Roman Bragin,April 17, 1987,187);\nINSERT INTO  people VALUES (4,Russia,Sergey Grankin,January 22, 1987,193);\nINSERT INTO  people VALUES (5,Russia,Yevgeni Sivozhelez,August 8, 1986,196);\nINSERT INTO  people VALUES (6,Russia,Maksim Botin,July 14, 1983,194);\nINSERT INTO  people VALUES (7,Russia,Semen Poltavskiy,February 8, 1981,205);\nINSERT INTO  poker_player VALUES (1,1,42,1,68,476090);\nINSERT INTO  poker_player VALUES (2,2,10,2,141,189233);\nINSERT INTO  poker_player VALUES (3,5,21,1,166,104871);\nINSERT INTO  poker_player VALUES (4,6,19,2,58,596462);\nINSERT INTO  poker_player VALUES (5,7,26,3,154,142800);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Final_Table_Made","prompt":"What are the names of poker players, ordered ascending by the number of final tables they have made?"}
{"context":"PRAGMA foreign_keys = ON;\nCREATE TABLE poker_player (\nPoker_Player_ID int,\nPeople_ID int,\nFinal_Table_Made real,\nBest_Finish real,\nMoney_Rank real,\nEarnings real,\nPRIMARY KEY (Poker_Player_ID),\nFOREIGN KEY (People_ID) REFERENCES people(People_ID)\n);\nCREATE TABLE people (\nPeople_ID int,\nNationality text,\nName text,\nBirth_Date text,\nHeight real,\nPRIMARY KEY (People_ID)\n);\nINSERT INTO  people VALUES (1,Russia,Aleksey Ostapenko,May 26, 1986,207);\nINSERT INTO  people VALUES (2,Bulgaria,Teodor Salparov,August 16, 1982,182);\nINSERT INTO  people VALUES (3,Russia,Roman Bragin,April 17, 1987,187);\nINSERT INTO  people VALUES (4,Russia,Sergey Grankin,January 22, 1987,193);\nINSERT INTO  people VALUES (5,Russia,Yevgeni Sivozhelez,August 8, 1986,196);\nINSERT INTO  people VALUES (6,Russia,Maksim Botin,July 14, 1983,194);\nINSERT INTO  people VALUES (7,Russia,Semen Poltavskiy,February 8, 1981,205);\nINSERT INTO  poker_player VALUES (1,1,42,1,68,476090);\nINSERT INTO  poker_player VALUES (2,2,10,2,141,189233);\nINSERT INTO  poker_player VALUES (3,5,21,1,166,104871);\nINSERT INTO  poker_player VALUES (4,6,19,2,58,596462);\nINSERT INTO  poker_player VALUES (5,7,26,3,154,142800);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1","prompt":"What is the birth date of the poker player with the lowest earnings?"}
{"context":"PRAGMA foreign_keys = ON;\nCREATE TABLE poker_player (\nPoker_Player_ID int,\nPeople_ID int,\nFinal_Table_Made real,\nBest_Finish real,\nMoney_Rank real,\nEarnings real,\nPRIMARY KEY (Poker_Player_ID),\nFOREIGN KEY (People_ID) REFERENCES people(People_ID)\n);\nCREATE TABLE people (\nPeople_ID int,\nNationality text,\nName text,\nBirth_Date text,\nHeight real,\nPRIMARY KEY (People_ID)\n);\nINSERT INTO  people VALUES (1,Russia,Aleksey Ostapenko,May 26, 1986,207);\nINSERT INTO  people VALUES (2,Bulgaria,Teodor Salparov,August 16, 1982,182);\nINSERT INTO  people VALUES (3,Russia,Roman Bragin,April 17, 1987,187);\nINSERT INTO  people VALUES (4,Russia,Sergey Grankin,January 22, 1987,193);\nINSERT INTO  people VALUES (5,Russia,Yevgeni Sivozhelez,August 8, 1986,196);\nINSERT INTO  people VALUES (6,Russia,Maksim Botin,July 14, 1983,194);\nINSERT INTO  people VALUES (7,Russia,Semen Poltavskiy,February 8, 1981,205);\nINSERT INTO  poker_player VALUES (1,1,42,1,68,476090);\nINSERT INTO  poker_player VALUES (2,2,10,2,141,189233);\nINSERT INTO  poker_player VALUES (3,5,21,1,166,104871);\nINSERT INTO  poker_player VALUES (4,6,19,2,58,596462);\nINSERT INTO  poker_player VALUES (5,7,26,3,154,142800);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1","prompt":"Return the birth date of the poker player with the lowest earnings."}
{"context":"PRAGMA foreign_keys = ON;\nCREATE TABLE poker_player (\nPoker_Player_ID int,\nPeople_ID int,\nFinal_Table_Made real,\nBest_Finish real,\nMoney_Rank real,\nEarnings real,\nPRIMARY KEY (Poker_Player_ID),\nFOREIGN KEY (People_ID) REFERENCES people(People_ID)\n);\nCREATE TABLE people (\nPeople_ID int,\nNationality text,\nName text,\nBirth_Date text,\nHeight real,\nPRIMARY KEY (People_ID)\n);\nINSERT INTO  people VALUES (1,Russia,Aleksey Ostapenko,May 26, 1986,207);\nINSERT INTO  people VALUES (2,Bulgaria,Teodor Salparov,August 16, 1982,182);\nINSERT INTO  people VALUES (3,Russia,Roman Bragin,April 17, 1987,187);\nINSERT INTO  people VALUES (4,Russia,Sergey Grankin,January 22, 1987,193);\nINSERT INTO  people VALUES (5,Russia,Yevgeni Sivozhelez,August 8, 1986,196);\nINSERT INTO  people VALUES (6,Russia,Maksim Botin,July 14, 1983,194);\nINSERT INTO  people VALUES (7,Russia,Semen Poltavskiy,February 8, 1981,205);\nINSERT INTO  poker_player VALUES (1,1,42,1,68,476090);\nINSERT INTO  poker_player VALUES (2,2,10,2,141,189233);\nINSERT INTO  poker_player VALUES (3,5,21,1,166,104871);\nINSERT INTO  poker_player VALUES (4,6,19,2,58,596462);\nINSERT INTO  poker_player VALUES (5,7,26,3,154,142800);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1","prompt":"What is the money rank of the tallest poker player?"}
{"context":"PRAGMA foreign_keys = ON;\nCREATE TABLE poker_player (\nPoker_Player_ID int,\nPeople_ID int,\nFinal_Table_Made real,\nBest_Finish real,\nMoney_Rank real,\nEarnings real,\nPRIMARY KEY (Poker_Player_ID),\nFOREIGN KEY (People_ID) REFERENCES people(People_ID)\n);\nCREATE TABLE people (\nPeople_ID int,\nNationality text,\nName text,\nBirth_Date text,\nHeight real,\nPRIMARY KEY (People_ID)\n);\nINSERT INTO  people VALUES (1,Russia,Aleksey Ostapenko,May 26, 1986,207);\nINSERT INTO  people VALUES (2,Bulgaria,Teodor Salparov,August 16, 1982,182);\nINSERT INTO  people VALUES (3,Russia,Roman Bragin,April 17, 1987,187);\nINSERT INTO  people VALUES (4,Russia,Sergey Grankin,January 22, 1987,193);\nINSERT INTO  people VALUES (5,Russia,Yevgeni Sivozhelez,August 8, 1986,196);\nINSERT INTO  people VALUES (6,Russia,Maksim Botin,July 14, 1983,194);\nINSERT INTO  people VALUES (7,Russia,Semen Poltavskiy,February 8, 1981,205);\nINSERT INTO  poker_player VALUES (1,1,42,1,68,476090);\nINSERT INTO  poker_player VALUES (2,2,10,2,141,189233);\nINSERT INTO  poker_player VALUES (3,5,21,1,166,104871);\nINSERT INTO  poker_player VALUES (4,6,19,2,58,596462);\nINSERT INTO  poker_player VALUES (5,7,26,3,154,142800);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1","prompt":"Return the money rank of the poker player with the greatest height."}
{"context":"PRAGMA foreign_keys = ON;\nCREATE TABLE poker_player (\nPoker_Player_ID int,\nPeople_ID int,\nFinal_Table_Made real,\nBest_Finish real,\nMoney_Rank real,\nEarnings real,\nPRIMARY KEY (Poker_Player_ID),\nFOREIGN KEY (People_ID) REFERENCES people(People_ID)\n);\nCREATE TABLE people (\nPeople_ID int,\nNationality text,\nName text,\nBirth_Date text,\nHeight real,\nPRIMARY KEY (People_ID)\n);\nINSERT INTO  people VALUES (1,Russia,Aleksey Ostapenko,May 26, 1986,207);\nINSERT INTO  people VALUES (2,Bulgaria,Teodor Salparov,August 16, 1982,182);\nINSERT INTO  people VALUES (3,Russia,Roman Bragin,April 17, 1987,187);\nINSERT INTO  people VALUES (4,Russia,Sergey Grankin,January 22, 1987,193);\nINSERT INTO  people VALUES (5,Russia,Yevgeni Sivozhelez,August 8, 1986,196);\nINSERT INTO  people VALUES (6,Russia,Maksim Botin,July 14, 1983,194);\nINSERT INTO  people VALUES (7,Russia,Semen Poltavskiy,February 8, 1981,205);\nINSERT INTO  poker_player VALUES (1,1,42,1,68,476090);\nINSERT INTO  poker_player VALUES (2,2,10,2,141,189233);\nINSERT INTO  poker_player VALUES (3,5,21,1,166,104871);\nINSERT INTO  poker_player VALUES (4,6,19,2,58,596462);\nINSERT INTO  poker_player VALUES (5,7,26,3,154,142800);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200","prompt":"What is the average earnings of poker players with height higher than 200?"}
{"context":"PRAGMA foreign_keys = ON;\nCREATE TABLE poker_player (\nPoker_Player_ID int,\nPeople_ID int,\nFinal_Table_Made real,\nBest_Finish real,\nMoney_Rank real,\nEarnings real,\nPRIMARY KEY (Poker_Player_ID),\nFOREIGN KEY (People_ID) REFERENCES people(People_ID)\n);\nCREATE TABLE people (\nPeople_ID int,\nNationality text,\nName text,\nBirth_Date text,\nHeight real,\nPRIMARY KEY (People_ID)\n);\nINSERT INTO  people VALUES (1,Russia,Aleksey Ostapenko,May 26, 1986,207);\nINSERT INTO  people VALUES (2,Bulgaria,Teodor Salparov,August 16, 1982,182);\nINSERT INTO  people VALUES (3,Russia,Roman Bragin,April 17, 1987,187);\nINSERT INTO  people VALUES (4,Russia,Sergey Grankin,January 22, 1987,193);\nINSERT INTO  people VALUES (5,Russia,Yevgeni Sivozhelez,August 8, 1986,196);\nINSERT INTO  people VALUES (6,Russia,Maksim Botin,July 14, 1983,194);\nINSERT INTO  people VALUES (7,Russia,Semen Poltavskiy,February 8, 1981,205);\nINSERT INTO  poker_player VALUES (1,1,42,1,68,476090);\nINSERT INTO  poker_player VALUES (2,2,10,2,141,189233);\nINSERT INTO  poker_player VALUES (3,5,21,1,166,104871);\nINSERT INTO  poker_player VALUES (4,6,19,2,58,596462);\nINSERT INTO  poker_player VALUES (5,7,26,3,154,142800);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200","prompt":"Give average earnings of poker players who are taller than 200."}
{"context":"PRAGMA foreign_keys = ON;\nCREATE TABLE poker_player (\nPoker_Player_ID int,\nPeople_ID int,\nFinal_Table_Made real,\nBest_Finish real,\nMoney_Rank real,\nEarnings real,\nPRIMARY KEY (Poker_Player_ID),\nFOREIGN KEY (People_ID) REFERENCES people(People_ID)\n);\nCREATE TABLE people (\nPeople_ID int,\nNationality text,\nName text,\nBirth_Date text,\nHeight real,\nPRIMARY KEY (People_ID)\n);\nINSERT INTO  people VALUES (1,Russia,Aleksey Ostapenko,May 26, 1986,207);\nINSERT INTO  people VALUES (2,Bulgaria,Teodor Salparov,August 16, 1982,182);\nINSERT INTO  people VALUES (3,Russia,Roman Bragin,April 17, 1987,187);\nINSERT INTO  people VALUES (4,Russia,Sergey Grankin,January 22, 1987,193);\nINSERT INTO  people VALUES (5,Russia,Yevgeni Sivozhelez,August 8, 1986,196);\nINSERT INTO  people VALUES (6,Russia,Maksim Botin,July 14, 1983,194);\nINSERT INTO  people VALUES (7,Russia,Semen Poltavskiy,February 8, 1981,205);\nINSERT INTO  poker_player VALUES (1,1,42,1,68,476090);\nINSERT INTO  poker_player VALUES (2,2,10,2,141,189233);\nINSERT INTO  poker_player VALUES (3,5,21,1,166,104871);\nINSERT INTO  poker_player VALUES (4,6,19,2,58,596462);\nINSERT INTO  poker_player VALUES (5,7,26,3,154,142800);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings DESC","prompt":"What are the names of poker players in descending order of earnings?"}
{"context":"PRAGMA foreign_keys = ON;\nCREATE TABLE poker_player (\nPoker_Player_ID int,\nPeople_ID int,\nFinal_Table_Made real,\nBest_Finish real,\nMoney_Rank real,\nEarnings real,\nPRIMARY KEY (Poker_Player_ID),\nFOREIGN KEY (People_ID) REFERENCES people(People_ID)\n);\nCREATE TABLE people (\nPeople_ID int,\nNationality text,\nName text,\nBirth_Date text,\nHeight real,\nPRIMARY KEY (People_ID)\n);\nINSERT INTO  people VALUES (1,Russia,Aleksey Ostapenko,May 26, 1986,207);\nINSERT INTO  people VALUES (2,Bulgaria,Teodor Salparov,August 16, 1982,182);\nINSERT INTO  people VALUES (3,Russia,Roman Bragin,April 17, 1987,187);\nINSERT INTO  people VALUES (4,Russia,Sergey Grankin,January 22, 1987,193);\nINSERT INTO  people VALUES (5,Russia,Yevgeni Sivozhelez,August 8, 1986,196);\nINSERT INTO  people VALUES (6,Russia,Maksim Botin,July 14, 1983,194);\nINSERT INTO  people VALUES (7,Russia,Semen Poltavskiy,February 8, 1981,205);\nINSERT INTO  poker_player VALUES (1,1,42,1,68,476090);\nINSERT INTO  poker_player VALUES (2,2,10,2,141,189233);\nINSERT INTO  poker_player VALUES (3,5,21,1,166,104871);\nINSERT INTO  poker_player VALUES (4,6,19,2,58,596462);\nINSERT INTO  poker_player VALUES (5,7,26,3,154,142800);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings DESC","prompt":"Return the names of poker players sorted by their earnings descending."}
{"context":"PRAGMA foreign_keys = ON;\nCREATE TABLE poker_player (\nPoker_Player_ID int,\nPeople_ID int,\nFinal_Table_Made real,\nBest_Finish real,\nMoney_Rank real,\nEarnings real,\nPRIMARY KEY (Poker_Player_ID),\nFOREIGN KEY (People_ID) REFERENCES people(People_ID)\n);\nCREATE TABLE people (\nPeople_ID int,\nNationality text,\nName text,\nBirth_Date text,\nHeight real,\nPRIMARY KEY (People_ID)\n);\nINSERT INTO  people VALUES (1,Russia,Aleksey Ostapenko,May 26, 1986,207);\nINSERT INTO  people VALUES (2,Bulgaria,Teodor Salparov,August 16, 1982,182);\nINSERT INTO  people VALUES (3,Russia,Roman Bragin,April 17, 1987,187);\nINSERT INTO  people VALUES (4,Russia,Sergey Grankin,January 22, 1987,193);\nINSERT INTO  people VALUES (5,Russia,Yevgeni Sivozhelez,August 8, 1986,196);\nINSERT INTO  people VALUES (6,Russia,Maksim Botin,July 14, 1983,194);\nINSERT INTO  people VALUES (7,Russia,Semen Poltavskiy,February 8, 1981,205);\nINSERT INTO  poker_player VALUES (1,1,42,1,68,476090);\nINSERT INTO  poker_player VALUES (2,2,10,2,141,189233);\nINSERT INTO  poker_player VALUES (3,5,21,1,166,104871);\nINSERT INTO  poker_player VALUES (4,6,19,2,58,596462);\nINSERT INTO  poker_player VALUES (5,7,26,3,154,142800);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT Nationality ,  COUNT(*) FROM people GROUP BY Nationality","prompt":"What are different nationalities of people and the corresponding number of people from each nation?"}
{"context":"PRAGMA foreign_keys = ON;\nCREATE TABLE poker_player (\nPoker_Player_ID int,\nPeople_ID int,\nFinal_Table_Made real,\nBest_Finish real,\nMoney_Rank real,\nEarnings real,\nPRIMARY KEY (Poker_Player_ID),\nFOREIGN KEY (People_ID) REFERENCES people(People_ID)\n);\nCREATE TABLE people (\nPeople_ID int,\nNationality text,\nName text,\nBirth_Date text,\nHeight real,\nPRIMARY KEY (People_ID)\n);\nINSERT INTO  people VALUES (1,Russia,Aleksey Ostapenko,May 26, 1986,207);\nINSERT INTO  people VALUES (2,Bulgaria,Teodor Salparov,August 16, 1982,182);\nINSERT INTO  people VALUES (3,Russia,Roman Bragin,April 17, 1987,187);\nINSERT INTO  people VALUES (4,Russia,Sergey Grankin,January 22, 1987,193);\nINSERT INTO  people VALUES (5,Russia,Yevgeni Sivozhelez,August 8, 1986,196);\nINSERT INTO  people VALUES (6,Russia,Maksim Botin,July 14, 1983,194);\nINSERT INTO  people VALUES (7,Russia,Semen Poltavskiy,February 8, 1981,205);\nINSERT INTO  poker_player VALUES (1,1,42,1,68,476090);\nINSERT INTO  poker_player VALUES (2,2,10,2,141,189233);\nINSERT INTO  poker_player VALUES (3,5,21,1,166,104871);\nINSERT INTO  poker_player VALUES (4,6,19,2,58,596462);\nINSERT INTO  poker_player VALUES (5,7,26,3,154,142800);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT Nationality ,  COUNT(*) FROM people GROUP BY Nationality","prompt":"How many people are there of each nationality?"}
{"context":"PRAGMA foreign_keys = ON;\nCREATE TABLE poker_player (\nPoker_Player_ID int,\nPeople_ID int,\nFinal_Table_Made real,\nBest_Finish real,\nMoney_Rank real,\nEarnings real,\nPRIMARY KEY (Poker_Player_ID),\nFOREIGN KEY (People_ID) REFERENCES people(People_ID)\n);\nCREATE TABLE people (\nPeople_ID int,\nNationality text,\nName text,\nBirth_Date text,\nHeight real,\nPRIMARY KEY (People_ID)\n);\nINSERT INTO  people VALUES (1,Russia,Aleksey Ostapenko,May 26, 1986,207);\nINSERT INTO  people VALUES (2,Bulgaria,Teodor Salparov,August 16, 1982,182);\nINSERT INTO  people VALUES (3,Russia,Roman Bragin,April 17, 1987,187);\nINSERT INTO  people VALUES (4,Russia,Sergey Grankin,January 22, 1987,193);\nINSERT INTO  people VALUES (5,Russia,Yevgeni Sivozhelez,August 8, 1986,196);\nINSERT INTO  people VALUES (6,Russia,Maksim Botin,July 14, 1983,194);\nINSERT INTO  people VALUES (7,Russia,Semen Poltavskiy,February 8, 1981,205);\nINSERT INTO  poker_player VALUES (1,1,42,1,68,476090);\nINSERT INTO  poker_player VALUES (2,2,10,2,141,189233);\nINSERT INTO  poker_player VALUES (3,5,21,1,166,104871);\nINSERT INTO  poker_player VALUES (4,6,19,2,58,596462);\nINSERT INTO  poker_player VALUES (5,7,26,3,154,142800);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1","prompt":"What is the most common nationality of people?"}
{"context":"PRAGMA foreign_keys = ON;\nCREATE TABLE poker_player (\nPoker_Player_ID int,\nPeople_ID int,\nFinal_Table_Made real,\nBest_Finish real,\nMoney_Rank real,\nEarnings real,\nPRIMARY KEY (Poker_Player_ID),\nFOREIGN KEY (People_ID) REFERENCES people(People_ID)\n);\nCREATE TABLE people (\nPeople_ID int,\nNationality text,\nName text,\nBirth_Date text,\nHeight real,\nPRIMARY KEY (People_ID)\n);\nINSERT INTO  people VALUES (1,Russia,Aleksey Ostapenko,May 26, 1986,207);\nINSERT INTO  people VALUES (2,Bulgaria,Teodor Salparov,August 16, 1982,182);\nINSERT INTO  people VALUES (3,Russia,Roman Bragin,April 17, 1987,187);\nINSERT INTO  people VALUES (4,Russia,Sergey Grankin,January 22, 1987,193);\nINSERT INTO  people VALUES (5,Russia,Yevgeni Sivozhelez,August 8, 1986,196);\nINSERT INTO  people VALUES (6,Russia,Maksim Botin,July 14, 1983,194);\nINSERT INTO  people VALUES (7,Russia,Semen Poltavskiy,February 8, 1981,205);\nINSERT INTO  poker_player VALUES (1,1,42,1,68,476090);\nINSERT INTO  poker_player VALUES (2,2,10,2,141,189233);\nINSERT INTO  poker_player VALUES (3,5,21,1,166,104871);\nINSERT INTO  poker_player VALUES (4,6,19,2,58,596462);\nINSERT INTO  poker_player VALUES (5,7,26,3,154,142800);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1","prompt":"Give the nationality that is most common across all people."}
{"context":"PRAGMA foreign_keys = ON;\nCREATE TABLE poker_player (\nPoker_Player_ID int,\nPeople_ID int,\nFinal_Table_Made real,\nBest_Finish real,\nMoney_Rank real,\nEarnings real,\nPRIMARY KEY (Poker_Player_ID),\nFOREIGN KEY (People_ID) REFERENCES people(People_ID)\n);\nCREATE TABLE people (\nPeople_ID int,\nNationality text,\nName text,\nBirth_Date text,\nHeight real,\nPRIMARY KEY (People_ID)\n);\nINSERT INTO  people VALUES (1,Russia,Aleksey Ostapenko,May 26, 1986,207);\nINSERT INTO  people VALUES (2,Bulgaria,Teodor Salparov,August 16, 1982,182);\nINSERT INTO  people VALUES (3,Russia,Roman Bragin,April 17, 1987,187);\nINSERT INTO  people VALUES (4,Russia,Sergey Grankin,January 22, 1987,193);\nINSERT INTO  people VALUES (5,Russia,Yevgeni Sivozhelez,August 8, 1986,196);\nINSERT INTO  people VALUES (6,Russia,Maksim Botin,July 14, 1983,194);\nINSERT INTO  people VALUES (7,Russia,Semen Poltavskiy,February 8, 1981,205);\nINSERT INTO  poker_player VALUES (1,1,42,1,68,476090);\nINSERT INTO  poker_player VALUES (2,2,10,2,141,189233);\nINSERT INTO  poker_player VALUES (3,5,21,1,166,104871);\nINSERT INTO  poker_player VALUES (4,6,19,2,58,596462);\nINSERT INTO  poker_player VALUES (5,7,26,3,154,142800);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2","prompt":"What are the nationalities that are shared by at least two people?"}
{"context":"PRAGMA foreign_keys = ON;\nCREATE TABLE poker_player (\nPoker_Player_ID int,\nPeople_ID int,\nFinal_Table_Made real,\nBest_Finish real,\nMoney_Rank real,\nEarnings real,\nPRIMARY KEY (Poker_Player_ID),\nFOREIGN KEY (People_ID) REFERENCES people(People_ID)\n);\nCREATE TABLE people (\nPeople_ID int,\nNationality text,\nName text,\nBirth_Date text,\nHeight real,\nPRIMARY KEY (People_ID)\n);\nINSERT INTO  people VALUES (1,Russia,Aleksey Ostapenko,May 26, 1986,207);\nINSERT INTO  people VALUES (2,Bulgaria,Teodor Salparov,August 16, 1982,182);\nINSERT INTO  people VALUES (3,Russia,Roman Bragin,April 17, 1987,187);\nINSERT INTO  people VALUES (4,Russia,Sergey Grankin,January 22, 1987,193);\nINSERT INTO  people VALUES (5,Russia,Yevgeni Sivozhelez,August 8, 1986,196);\nINSERT INTO  people VALUES (6,Russia,Maksim Botin,July 14, 1983,194);\nINSERT INTO  people VALUES (7,Russia,Semen Poltavskiy,February 8, 1981,205);\nINSERT INTO  poker_player VALUES (1,1,42,1,68,476090);\nINSERT INTO  poker_player VALUES (2,2,10,2,141,189233);\nINSERT INTO  poker_player VALUES (3,5,21,1,166,104871);\nINSERT INTO  poker_player VALUES (4,6,19,2,58,596462);\nINSERT INTO  poker_player VALUES (5,7,26,3,154,142800);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2","prompt":"Return the nationalities for which there are two or more people."}
{"context":"PRAGMA foreign_keys = ON;\nCREATE TABLE poker_player (\nPoker_Player_ID int,\nPeople_ID int,\nFinal_Table_Made real,\nBest_Finish real,\nMoney_Rank real,\nEarnings real,\nPRIMARY KEY (Poker_Player_ID),\nFOREIGN KEY (People_ID) REFERENCES people(People_ID)\n);\nCREATE TABLE people (\nPeople_ID int,\nNationality text,\nName text,\nBirth_Date text,\nHeight real,\nPRIMARY KEY (People_ID)\n);\nINSERT INTO  people VALUES (1,Russia,Aleksey Ostapenko,May 26, 1986,207);\nINSERT INTO  people VALUES (2,Bulgaria,Teodor Salparov,August 16, 1982,182);\nINSERT INTO  people VALUES (3,Russia,Roman Bragin,April 17, 1987,187);\nINSERT INTO  people VALUES (4,Russia,Sergey Grankin,January 22, 1987,193);\nINSERT INTO  people VALUES (5,Russia,Yevgeni Sivozhelez,August 8, 1986,196);\nINSERT INTO  people VALUES (6,Russia,Maksim Botin,July 14, 1983,194);\nINSERT INTO  people VALUES (7,Russia,Semen Poltavskiy,February 8, 1981,205);\nINSERT INTO  poker_player VALUES (1,1,42,1,68,476090);\nINSERT INTO  poker_player VALUES (2,2,10,2,141,189233);\nINSERT INTO  poker_player VALUES (3,5,21,1,166,104871);\nINSERT INTO  poker_player VALUES (4,6,19,2,58,596462);\nINSERT INTO  poker_player VALUES (5,7,26,3,154,142800);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT Name ,  Birth_Date FROM people ORDER BY Name ASC","prompt":"List the names and birth dates of people in ascending alphabetical order of name."}
{"context":"PRAGMA foreign_keys = ON;\nCREATE TABLE poker_player (\nPoker_Player_ID int,\nPeople_ID int,\nFinal_Table_Made real,\nBest_Finish real,\nMoney_Rank real,\nEarnings real,\nPRIMARY KEY (Poker_Player_ID),\nFOREIGN KEY (People_ID) REFERENCES people(People_ID)\n);\nCREATE TABLE people (\nPeople_ID int,\nNationality text,\nName text,\nBirth_Date text,\nHeight real,\nPRIMARY KEY (People_ID)\n);\nINSERT INTO  people VALUES (1,Russia,Aleksey Ostapenko,May 26, 1986,207);\nINSERT INTO  people VALUES (2,Bulgaria,Teodor Salparov,August 16, 1982,182);\nINSERT INTO  people VALUES (3,Russia,Roman Bragin,April 17, 1987,187);\nINSERT INTO  people VALUES (4,Russia,Sergey Grankin,January 22, 1987,193);\nINSERT INTO  people VALUES (5,Russia,Yevgeni Sivozhelez,August 8, 1986,196);\nINSERT INTO  people VALUES (6,Russia,Maksim Botin,July 14, 1983,194);\nINSERT INTO  people VALUES (7,Russia,Semen Poltavskiy,February 8, 1981,205);\nINSERT INTO  poker_player VALUES (1,1,42,1,68,476090);\nINSERT INTO  poker_player VALUES (2,2,10,2,141,189233);\nINSERT INTO  poker_player VALUES (3,5,21,1,166,104871);\nINSERT INTO  poker_player VALUES (4,6,19,2,58,596462);\nINSERT INTO  poker_player VALUES (5,7,26,3,154,142800);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT Name ,  Birth_Date FROM people ORDER BY Name ASC","prompt":"What are the names and birth dates of people, ordered by their names in alphabetical order?"}
{"context":"PRAGMA foreign_keys = ON;\nCREATE TABLE poker_player (\nPoker_Player_ID int,\nPeople_ID int,\nFinal_Table_Made real,\nBest_Finish real,\nMoney_Rank real,\nEarnings real,\nPRIMARY KEY (Poker_Player_ID),\nFOREIGN KEY (People_ID) REFERENCES people(People_ID)\n);\nCREATE TABLE people (\nPeople_ID int,\nNationality text,\nName text,\nBirth_Date text,\nHeight real,\nPRIMARY KEY (People_ID)\n);\nINSERT INTO  people VALUES (1,Russia,Aleksey Ostapenko,May 26, 1986,207);\nINSERT INTO  people VALUES (2,Bulgaria,Teodor Salparov,August 16, 1982,182);\nINSERT INTO  people VALUES (3,Russia,Roman Bragin,April 17, 1987,187);\nINSERT INTO  people VALUES (4,Russia,Sergey Grankin,January 22, 1987,193);\nINSERT INTO  people VALUES (5,Russia,Yevgeni Sivozhelez,August 8, 1986,196);\nINSERT INTO  people VALUES (6,Russia,Maksim Botin,July 14, 1983,194);\nINSERT INTO  people VALUES (7,Russia,Semen Poltavskiy,February 8, 1981,205);\nINSERT INTO  poker_player VALUES (1,1,42,1,68,476090);\nINSERT INTO  poker_player VALUES (2,2,10,2,141,189233);\nINSERT INTO  poker_player VALUES (3,5,21,1,166,104871);\nINSERT INTO  poker_player VALUES (4,6,19,2,58,596462);\nINSERT INTO  poker_player VALUES (5,7,26,3,154,142800);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT Name FROM people WHERE Nationality != \"Russia\"","prompt":"Show names of people whose nationality is not \"Russia\"."}
{"context":"PRAGMA foreign_keys = ON;\nCREATE TABLE poker_player (\nPoker_Player_ID int,\nPeople_ID int,\nFinal_Table_Made real,\nBest_Finish real,\nMoney_Rank real,\nEarnings real,\nPRIMARY KEY (Poker_Player_ID),\nFOREIGN KEY (People_ID) REFERENCES people(People_ID)\n);\nCREATE TABLE people (\nPeople_ID int,\nNationality text,\nName text,\nBirth_Date text,\nHeight real,\nPRIMARY KEY (People_ID)\n);\nINSERT INTO  people VALUES (1,Russia,Aleksey Ostapenko,May 26, 1986,207);\nINSERT INTO  people VALUES (2,Bulgaria,Teodor Salparov,August 16, 1982,182);\nINSERT INTO  people VALUES (3,Russia,Roman Bragin,April 17, 1987,187);\nINSERT INTO  people VALUES (4,Russia,Sergey Grankin,January 22, 1987,193);\nINSERT INTO  people VALUES (5,Russia,Yevgeni Sivozhelez,August 8, 1986,196);\nINSERT INTO  people VALUES (6,Russia,Maksim Botin,July 14, 1983,194);\nINSERT INTO  people VALUES (7,Russia,Semen Poltavskiy,February 8, 1981,205);\nINSERT INTO  poker_player VALUES (1,1,42,1,68,476090);\nINSERT INTO  poker_player VALUES (2,2,10,2,141,189233);\nINSERT INTO  poker_player VALUES (3,5,21,1,166,104871);\nINSERT INTO  poker_player VALUES (4,6,19,2,58,596462);\nINSERT INTO  poker_player VALUES (5,7,26,3,154,142800);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT Name FROM people WHERE Nationality != \"Russia\"","prompt":"What are the names of people who are not from Russia?"}
{"context":"PRAGMA foreign_keys = ON;\nCREATE TABLE poker_player (\nPoker_Player_ID int,\nPeople_ID int,\nFinal_Table_Made real,\nBest_Finish real,\nMoney_Rank real,\nEarnings real,\nPRIMARY KEY (Poker_Player_ID),\nFOREIGN KEY (People_ID) REFERENCES people(People_ID)\n);\nCREATE TABLE people (\nPeople_ID int,\nNationality text,\nName text,\nBirth_Date text,\nHeight real,\nPRIMARY KEY (People_ID)\n);\nINSERT INTO  people VALUES (1,Russia,Aleksey Ostapenko,May 26, 1986,207);\nINSERT INTO  people VALUES (2,Bulgaria,Teodor Salparov,August 16, 1982,182);\nINSERT INTO  people VALUES (3,Russia,Roman Bragin,April 17, 1987,187);\nINSERT INTO  people VALUES (4,Russia,Sergey Grankin,January 22, 1987,193);\nINSERT INTO  people VALUES (5,Russia,Yevgeni Sivozhelez,August 8, 1986,196);\nINSERT INTO  people VALUES (6,Russia,Maksim Botin,July 14, 1983,194);\nINSERT INTO  people VALUES (7,Russia,Semen Poltavskiy,February 8, 1981,205);\nINSERT INTO  poker_player VALUES (1,1,42,1,68,476090);\nINSERT INTO  poker_player VALUES (2,2,10,2,141,189233);\nINSERT INTO  poker_player VALUES (3,5,21,1,166,104871);\nINSERT INTO  poker_player VALUES (4,6,19,2,58,596462);\nINSERT INTO  poker_player VALUES (5,7,26,3,154,142800);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)","prompt":"List the names of people that are not poker players."}
{"context":"PRAGMA foreign_keys = ON;\nCREATE TABLE poker_player (\nPoker_Player_ID int,\nPeople_ID int,\nFinal_Table_Made real,\nBest_Finish real,\nMoney_Rank real,\nEarnings real,\nPRIMARY KEY (Poker_Player_ID),\nFOREIGN KEY (People_ID) REFERENCES people(People_ID)\n);\nCREATE TABLE people (\nPeople_ID int,\nNationality text,\nName text,\nBirth_Date text,\nHeight real,\nPRIMARY KEY (People_ID)\n);\nINSERT INTO  people VALUES (1,Russia,Aleksey Ostapenko,May 26, 1986,207);\nINSERT INTO  people VALUES (2,Bulgaria,Teodor Salparov,August 16, 1982,182);\nINSERT INTO  people VALUES (3,Russia,Roman Bragin,April 17, 1987,187);\nINSERT INTO  people VALUES (4,Russia,Sergey Grankin,January 22, 1987,193);\nINSERT INTO  people VALUES (5,Russia,Yevgeni Sivozhelez,August 8, 1986,196);\nINSERT INTO  people VALUES (6,Russia,Maksim Botin,July 14, 1983,194);\nINSERT INTO  people VALUES (7,Russia,Semen Poltavskiy,February 8, 1981,205);\nINSERT INTO  poker_player VALUES (1,1,42,1,68,476090);\nINSERT INTO  poker_player VALUES (2,2,10,2,141,189233);\nINSERT INTO  poker_player VALUES (3,5,21,1,166,104871);\nINSERT INTO  poker_player VALUES (4,6,19,2,58,596462);\nINSERT INTO  poker_player VALUES (5,7,26,3,154,142800);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)","prompt":"What are the names of people who do not play poker?"}
{"context":"PRAGMA foreign_keys = ON;\nCREATE TABLE poker_player (\nPoker_Player_ID int,\nPeople_ID int,\nFinal_Table_Made real,\nBest_Finish real,\nMoney_Rank real,\nEarnings real,\nPRIMARY KEY (Poker_Player_ID),\nFOREIGN KEY (People_ID) REFERENCES people(People_ID)\n);\nCREATE TABLE people (\nPeople_ID int,\nNationality text,\nName text,\nBirth_Date text,\nHeight real,\nPRIMARY KEY (People_ID)\n);\nINSERT INTO  people VALUES (1,Russia,Aleksey Ostapenko,May 26, 1986,207);\nINSERT INTO  people VALUES (2,Bulgaria,Teodor Salparov,August 16, 1982,182);\nINSERT INTO  people VALUES (3,Russia,Roman Bragin,April 17, 1987,187);\nINSERT INTO  people VALUES (4,Russia,Sergey Grankin,January 22, 1987,193);\nINSERT INTO  people VALUES (5,Russia,Yevgeni Sivozhelez,August 8, 1986,196);\nINSERT INTO  people VALUES (6,Russia,Maksim Botin,July 14, 1983,194);\nINSERT INTO  people VALUES (7,Russia,Semen Poltavskiy,February 8, 1981,205);\nINSERT INTO  poker_player VALUES (1,1,42,1,68,476090);\nINSERT INTO  poker_player VALUES (2,2,10,2,141,189233);\nINSERT INTO  poker_player VALUES (3,5,21,1,166,104871);\nINSERT INTO  poker_player VALUES (4,6,19,2,58,596462);\nINSERT INTO  poker_player VALUES (5,7,26,3,154,142800);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT count(DISTINCT Nationality) FROM people","prompt":"How many distinct nationalities are there?"}
{"context":"PRAGMA foreign_keys = ON;\nCREATE TABLE poker_player (\nPoker_Player_ID int,\nPeople_ID int,\nFinal_Table_Made real,\nBest_Finish real,\nMoney_Rank real,\nEarnings real,\nPRIMARY KEY (Poker_Player_ID),\nFOREIGN KEY (People_ID) REFERENCES people(People_ID)\n);\nCREATE TABLE people (\nPeople_ID int,\nNationality text,\nName text,\nBirth_Date text,\nHeight real,\nPRIMARY KEY (People_ID)\n);\nINSERT INTO  people VALUES (1,Russia,Aleksey Ostapenko,May 26, 1986,207);\nINSERT INTO  people VALUES (2,Bulgaria,Teodor Salparov,August 16, 1982,182);\nINSERT INTO  people VALUES (3,Russia,Roman Bragin,April 17, 1987,187);\nINSERT INTO  people VALUES (4,Russia,Sergey Grankin,January 22, 1987,193);\nINSERT INTO  people VALUES (5,Russia,Yevgeni Sivozhelez,August 8, 1986,196);\nINSERT INTO  people VALUES (6,Russia,Maksim Botin,July 14, 1983,194);\nINSERT INTO  people VALUES (7,Russia,Semen Poltavskiy,February 8, 1981,205);\nINSERT INTO  poker_player VALUES (1,1,42,1,68,476090);\nINSERT INTO  poker_player VALUES (2,2,10,2,141,189233);\nINSERT INTO  poker_player VALUES (3,5,21,1,166,104871);\nINSERT INTO  poker_player VALUES (4,6,19,2,58,596462);\nINSERT INTO  poker_player VALUES (5,7,26,3,154,142800);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT count(DISTINCT Nationality) FROM people","prompt":"Count the number of different nationalities."}
{"context":"PRAGMA foreign_keys = ON;\nCREATE TABLE singer (\nSinger_ID int,\nName text,\nBirth_Year real,\nNet_Worth_Millions real,\nCitizenship text,\nPRIMARY KEY (Singer_ID)\n);\nCREATE TABLE song (\nSong_ID int,\nTitle text,\nSinger_ID int,\nSales real,\nHighest_Position real,\nPRIMARY KEY (Song_ID),\nFOREIGN KEY (Singer_ID) REFERENCES singer(Singer_ID)\n);\nINSERT INTO  singer VALUES (1,Liliane Bettencourt,1944,30.0,France);\nINSERT INTO  singer VALUES (2,Christy Walton,1948,28.8,United States);\nINSERT INTO  singer VALUES (3,Alice Walton,1949,26.3,United States);\nINSERT INTO  singer VALUES (4,Iris Fontbona,1942,17.4,Chile);\nINSERT INTO  singer VALUES (5,Jacqueline Mars,1940,17.8,United States);\nINSERT INTO  singer VALUES (6,Gina Rinehart,1953,17,Australia);\nINSERT INTO  singer VALUES (7,Susanne Klatten,1962,14.3,Germany);\nINSERT INTO  singer VALUES (8,Abigail Johnson,1961,12.7,United States);\nINSERT INTO  song VALUES (1,Do They Know It's Christmas,1,1094000,1);\nINSERT INTO  song VALUES (2,F**k It (I Don't Want You Back),1,552407,1);\nINSERT INTO  song VALUES (3,Cha Cha Slide,2,351421,1);\nINSERT INTO  song VALUES (4,Call on Me,4,335000,1);\nINSERT INTO  song VALUES (5,Yeah,2,300000,1);\nINSERT INTO  song VALUES (6,All This Time,6,292000,1);\nINSERT INTO  song VALUES (7,Left Outside Alone,5,275000,3);\nINSERT INTO  song VALUES (8,Mysterious Girl,7,261000,1);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT count(*) FROM singer","prompt":"How many singers are there?"}
{"context":"PRAGMA foreign_keys = ON;\nCREATE TABLE singer (\nSinger_ID int,\nName text,\nBirth_Year real,\nNet_Worth_Millions real,\nCitizenship text,\nPRIMARY KEY (Singer_ID)\n);\nCREATE TABLE song (\nSong_ID int,\nTitle text,\nSinger_ID int,\nSales real,\nHighest_Position real,\nPRIMARY KEY (Song_ID),\nFOREIGN KEY (Singer_ID) REFERENCES singer(Singer_ID)\n);\nINSERT INTO  singer VALUES (1,Liliane Bettencourt,1944,30.0,France);\nINSERT INTO  singer VALUES (2,Christy Walton,1948,28.8,United States);\nINSERT INTO  singer VALUES (3,Alice Walton,1949,26.3,United States);\nINSERT INTO  singer VALUES (4,Iris Fontbona,1942,17.4,Chile);\nINSERT INTO  singer VALUES (5,Jacqueline Mars,1940,17.8,United States);\nINSERT INTO  singer VALUES (6,Gina Rinehart,1953,17,Australia);\nINSERT INTO  singer VALUES (7,Susanne Klatten,1962,14.3,Germany);\nINSERT INTO  singer VALUES (8,Abigail Johnson,1961,12.7,United States);\nINSERT INTO  song VALUES (1,Do They Know It's Christmas,1,1094000,1);\nINSERT INTO  song VALUES (2,F**k It (I Don't Want You Back),1,552407,1);\nINSERT INTO  song VALUES (3,Cha Cha Slide,2,351421,1);\nINSERT INTO  song VALUES (4,Call on Me,4,335000,1);\nINSERT INTO  song VALUES (5,Yeah,2,300000,1);\nINSERT INTO  song VALUES (6,All This Time,6,292000,1);\nINSERT INTO  song VALUES (7,Left Outside Alone,5,275000,3);\nINSERT INTO  song VALUES (8,Mysterious Girl,7,261000,1);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT count(*) FROM singer","prompt":"What is the count of singers?"}
{"context":"PRAGMA foreign_keys = ON;\nCREATE TABLE singer (\nSinger_ID int,\nName text,\nBirth_Year real,\nNet_Worth_Millions real,\nCitizenship text,\nPRIMARY KEY (Singer_ID)\n);\nCREATE TABLE song (\nSong_ID int,\nTitle text,\nSinger_ID int,\nSales real,\nHighest_Position real,\nPRIMARY KEY (Song_ID),\nFOREIGN KEY (Singer_ID) REFERENCES singer(Singer_ID)\n);\nINSERT INTO  singer VALUES (1,Liliane Bettencourt,1944,30.0,France);\nINSERT INTO  singer VALUES (2,Christy Walton,1948,28.8,United States);\nINSERT INTO  singer VALUES (3,Alice Walton,1949,26.3,United States);\nINSERT INTO  singer VALUES (4,Iris Fontbona,1942,17.4,Chile);\nINSERT INTO  singer VALUES (5,Jacqueline Mars,1940,17.8,United States);\nINSERT INTO  singer VALUES (6,Gina Rinehart,1953,17,Australia);\nINSERT INTO  singer VALUES (7,Susanne Klatten,1962,14.3,Germany);\nINSERT INTO  singer VALUES (8,Abigail Johnson,1961,12.7,United States);\nINSERT INTO  song VALUES (1,Do They Know It's Christmas,1,1094000,1);\nINSERT INTO  song VALUES (2,F**k It (I Don't Want You Back),1,552407,1);\nINSERT INTO  song VALUES (3,Cha Cha Slide,2,351421,1);\nINSERT INTO  song VALUES (4,Call on Me,4,335000,1);\nINSERT INTO  song VALUES (5,Yeah,2,300000,1);\nINSERT INTO  song VALUES (6,All This Time,6,292000,1);\nINSERT INTO  song VALUES (7,Left Outside Alone,5,275000,3);\nINSERT INTO  song VALUES (8,Mysterious Girl,7,261000,1);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC","prompt":"List the name of singers in ascending order of net worth."}
{"context":"PRAGMA foreign_keys = ON;\nCREATE TABLE singer (\nSinger_ID int,\nName text,\nBirth_Year real,\nNet_Worth_Millions real,\nCitizenship text,\nPRIMARY KEY (Singer_ID)\n);\nCREATE TABLE song (\nSong_ID int,\nTitle text,\nSinger_ID int,\nSales real,\nHighest_Position real,\nPRIMARY KEY (Song_ID),\nFOREIGN KEY (Singer_ID) REFERENCES singer(Singer_ID)\n);\nINSERT INTO  singer VALUES (1,Liliane Bettencourt,1944,30.0,France);\nINSERT INTO  singer VALUES (2,Christy Walton,1948,28.8,United States);\nINSERT INTO  singer VALUES (3,Alice Walton,1949,26.3,United States);\nINSERT INTO  singer VALUES (4,Iris Fontbona,1942,17.4,Chile);\nINSERT INTO  singer VALUES (5,Jacqueline Mars,1940,17.8,United States);\nINSERT INTO  singer VALUES (6,Gina Rinehart,1953,17,Australia);\nINSERT INTO  singer VALUES (7,Susanne Klatten,1962,14.3,Germany);\nINSERT INTO  singer VALUES (8,Abigail Johnson,1961,12.7,United States);\nINSERT INTO  song VALUES (1,Do They Know It's Christmas,1,1094000,1);\nINSERT INTO  song VALUES (2,F**k It (I Don't Want You Back),1,552407,1);\nINSERT INTO  song VALUES (3,Cha Cha Slide,2,351421,1);\nINSERT INTO  song VALUES (4,Call on Me,4,335000,1);\nINSERT INTO  song VALUES (5,Yeah,2,300000,1);\nINSERT INTO  song VALUES (6,All This Time,6,292000,1);\nINSERT INTO  song VALUES (7,Left Outside Alone,5,275000,3);\nINSERT INTO  song VALUES (8,Mysterious Girl,7,261000,1);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC","prompt":"What are the names of singers ordered by ascending net worth?"}
{"context":"PRAGMA foreign_keys = ON;\nCREATE TABLE singer (\nSinger_ID int,\nName text,\nBirth_Year real,\nNet_Worth_Millions real,\nCitizenship text,\nPRIMARY KEY (Singer_ID)\n);\nCREATE TABLE song (\nSong_ID int,\nTitle text,\nSinger_ID int,\nSales real,\nHighest_Position real,\nPRIMARY KEY (Song_ID),\nFOREIGN KEY (Singer_ID) REFERENCES singer(Singer_ID)\n);\nINSERT INTO  singer VALUES (1,Liliane Bettencourt,1944,30.0,France);\nINSERT INTO  singer VALUES (2,Christy Walton,1948,28.8,United States);\nINSERT INTO  singer VALUES (3,Alice Walton,1949,26.3,United States);\nINSERT INTO  singer VALUES (4,Iris Fontbona,1942,17.4,Chile);\nINSERT INTO  singer VALUES (5,Jacqueline Mars,1940,17.8,United States);\nINSERT INTO  singer VALUES (6,Gina Rinehart,1953,17,Australia);\nINSERT INTO  singer VALUES (7,Susanne Klatten,1962,14.3,Germany);\nINSERT INTO  singer VALUES (8,Abigail Johnson,1961,12.7,United States);\nINSERT INTO  song VALUES (1,Do They Know It's Christmas,1,1094000,1);\nINSERT INTO  song VALUES (2,F**k It (I Don't Want You Back),1,552407,1);\nINSERT INTO  song VALUES (3,Cha Cha Slide,2,351421,1);\nINSERT INTO  song VALUES (4,Call on Me,4,335000,1);\nINSERT INTO  song VALUES (5,Yeah,2,300000,1);\nINSERT INTO  song VALUES (6,All This Time,6,292000,1);\nINSERT INTO  song VALUES (7,Left Outside Alone,5,275000,3);\nINSERT INTO  song VALUES (8,Mysterious Girl,7,261000,1);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT Birth_Year ,  Citizenship FROM singer","prompt":"What are the birth year and citizenship of singers?"}
{"context":"PRAGMA foreign_keys = ON;\nCREATE TABLE singer (\nSinger_ID int,\nName text,\nBirth_Year real,\nNet_Worth_Millions real,\nCitizenship text,\nPRIMARY KEY (Singer_ID)\n);\nCREATE TABLE song (\nSong_ID int,\nTitle text,\nSinger_ID int,\nSales real,\nHighest_Position real,\nPRIMARY KEY (Song_ID),\nFOREIGN KEY (Singer_ID) REFERENCES singer(Singer_ID)\n);\nINSERT INTO  singer VALUES (1,Liliane Bettencourt,1944,30.0,France);\nINSERT INTO  singer VALUES (2,Christy Walton,1948,28.8,United States);\nINSERT INTO  singer VALUES (3,Alice Walton,1949,26.3,United States);\nINSERT INTO  singer VALUES (4,Iris Fontbona,1942,17.4,Chile);\nINSERT INTO  singer VALUES (5,Jacqueline Mars,1940,17.8,United States);\nINSERT INTO  singer VALUES (6,Gina Rinehart,1953,17,Australia);\nINSERT INTO  singer VALUES (7,Susanne Klatten,1962,14.3,Germany);\nINSERT INTO  singer VALUES (8,Abigail Johnson,1961,12.7,United States);\nINSERT INTO  song VALUES (1,Do They Know It's Christmas,1,1094000,1);\nINSERT INTO  song VALUES (2,F**k It (I Don't Want You Back),1,552407,1);\nINSERT INTO  song VALUES (3,Cha Cha Slide,2,351421,1);\nINSERT INTO  song VALUES (4,Call on Me,4,335000,1);\nINSERT INTO  song VALUES (5,Yeah,2,300000,1);\nINSERT INTO  song VALUES (6,All This Time,6,292000,1);\nINSERT INTO  song VALUES (7,Left Outside Alone,5,275000,3);\nINSERT INTO  song VALUES (8,Mysterious Girl,7,261000,1);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT Birth_Year ,  Citizenship FROM singer","prompt":"What are the birth years and citizenships of the singers?"}
{"context":"PRAGMA foreign_keys = ON;\nCREATE TABLE singer (\nSinger_ID int,\nName text,\nBirth_Year real,\nNet_Worth_Millions real,\nCitizenship text,\nPRIMARY KEY (Singer_ID)\n);\nCREATE TABLE song (\nSong_ID int,\nTitle text,\nSinger_ID int,\nSales real,\nHighest_Position real,\nPRIMARY KEY (Song_ID),\nFOREIGN KEY (Singer_ID) REFERENCES singer(Singer_ID)\n);\nINSERT INTO  singer VALUES (1,Liliane Bettencourt,1944,30.0,France);\nINSERT INTO  singer VALUES (2,Christy Walton,1948,28.8,United States);\nINSERT INTO  singer VALUES (3,Alice Walton,1949,26.3,United States);\nINSERT INTO  singer VALUES (4,Iris Fontbona,1942,17.4,Chile);\nINSERT INTO  singer VALUES (5,Jacqueline Mars,1940,17.8,United States);\nINSERT INTO  singer VALUES (6,Gina Rinehart,1953,17,Australia);\nINSERT INTO  singer VALUES (7,Susanne Klatten,1962,14.3,Germany);\nINSERT INTO  singer VALUES (8,Abigail Johnson,1961,12.7,United States);\nINSERT INTO  song VALUES (1,Do They Know It's Christmas,1,1094000,1);\nINSERT INTO  song VALUES (2,F**k It (I Don't Want You Back),1,552407,1);\nINSERT INTO  song VALUES (3,Cha Cha Slide,2,351421,1);\nINSERT INTO  song VALUES (4,Call on Me,4,335000,1);\nINSERT INTO  song VALUES (5,Yeah,2,300000,1);\nINSERT INTO  song VALUES (6,All This Time,6,292000,1);\nINSERT INTO  song VALUES (7,Left Outside Alone,5,275000,3);\nINSERT INTO  song VALUES (8,Mysterious Girl,7,261000,1);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT Name FROM singer WHERE Citizenship != \"France\"","prompt":"List the name of singers whose citizenship is not \"France\"."}
{"context":"PRAGMA foreign_keys = ON;\nCREATE TABLE singer (\nSinger_ID int,\nName text,\nBirth_Year real,\nNet_Worth_Millions real,\nCitizenship text,\nPRIMARY KEY (Singer_ID)\n);\nCREATE TABLE song (\nSong_ID int,\nTitle text,\nSinger_ID int,\nSales real,\nHighest_Position real,\nPRIMARY KEY (Song_ID),\nFOREIGN KEY (Singer_ID) REFERENCES singer(Singer_ID)\n);\nINSERT INTO  singer VALUES (1,Liliane Bettencourt,1944,30.0,France);\nINSERT INTO  singer VALUES (2,Christy Walton,1948,28.8,United States);\nINSERT INTO  singer VALUES (3,Alice Walton,1949,26.3,United States);\nINSERT INTO  singer VALUES (4,Iris Fontbona,1942,17.4,Chile);\nINSERT INTO  singer VALUES (5,Jacqueline Mars,1940,17.8,United States);\nINSERT INTO  singer VALUES (6,Gina Rinehart,1953,17,Australia);\nINSERT INTO  singer VALUES (7,Susanne Klatten,1962,14.3,Germany);\nINSERT INTO  singer VALUES (8,Abigail Johnson,1961,12.7,United States);\nINSERT INTO  song VALUES (1,Do They Know It's Christmas,1,1094000,1);\nINSERT INTO  song VALUES (2,F**k It (I Don't Want You Back),1,552407,1);\nINSERT INTO  song VALUES (3,Cha Cha Slide,2,351421,1);\nINSERT INTO  song VALUES (4,Call on Me,4,335000,1);\nINSERT INTO  song VALUES (5,Yeah,2,300000,1);\nINSERT INTO  song VALUES (6,All This Time,6,292000,1);\nINSERT INTO  song VALUES (7,Left Outside Alone,5,275000,3);\nINSERT INTO  song VALUES (8,Mysterious Girl,7,261000,1);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT Name FROM singer WHERE Citizenship != \"France\"","prompt":"What are the names of the singers who are not French citizens?"}
{"context":"PRAGMA foreign_keys = ON;\nCREATE TABLE singer (\nSinger_ID int,\nName text,\nBirth_Year real,\nNet_Worth_Millions real,\nCitizenship text,\nPRIMARY KEY (Singer_ID)\n);\nCREATE TABLE song (\nSong_ID int,\nTitle text,\nSinger_ID int,\nSales real,\nHighest_Position real,\nPRIMARY KEY (Song_ID),\nFOREIGN KEY (Singer_ID) REFERENCES singer(Singer_ID)\n);\nINSERT INTO  singer VALUES (1,Liliane Bettencourt,1944,30.0,France);\nINSERT INTO  singer VALUES (2,Christy Walton,1948,28.8,United States);\nINSERT INTO  singer VALUES (3,Alice Walton,1949,26.3,United States);\nINSERT INTO  singer VALUES (4,Iris Fontbona,1942,17.4,Chile);\nINSERT INTO  singer VALUES (5,Jacqueline Mars,1940,17.8,United States);\nINSERT INTO  singer VALUES (6,Gina Rinehart,1953,17,Australia);\nINSERT INTO  singer VALUES (7,Susanne Klatten,1962,14.3,Germany);\nINSERT INTO  singer VALUES (8,Abigail Johnson,1961,12.7,United States);\nINSERT INTO  song VALUES (1,Do They Know It's Christmas,1,1094000,1);\nINSERT INTO  song VALUES (2,F**k It (I Don't Want You Back),1,552407,1);\nINSERT INTO  song VALUES (3,Cha Cha Slide,2,351421,1);\nINSERT INTO  song VALUES (4,Call on Me,4,335000,1);\nINSERT INTO  song VALUES (5,Yeah,2,300000,1);\nINSERT INTO  song VALUES (6,All This Time,6,292000,1);\nINSERT INTO  song VALUES (7,Left Outside Alone,5,275000,3);\nINSERT INTO  song VALUES (8,Mysterious Girl,7,261000,1);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949","prompt":"Show the name of singers whose birth year is either 1948 or 1949?"}
{"context":"PRAGMA foreign_keys = ON;\nCREATE TABLE singer (\nSinger_ID int,\nName text,\nBirth_Year real,\nNet_Worth_Millions real,\nCitizenship text,\nPRIMARY KEY (Singer_ID)\n);\nCREATE TABLE song (\nSong_ID int,\nTitle text,\nSinger_ID int,\nSales real,\nHighest_Position real,\nPRIMARY KEY (Song_ID),\nFOREIGN KEY (Singer_ID) REFERENCES singer(Singer_ID)\n);\nINSERT INTO  singer VALUES (1,Liliane Bettencourt,1944,30.0,France);\nINSERT INTO  singer VALUES (2,Christy Walton,1948,28.8,United States);\nINSERT INTO  singer VALUES (3,Alice Walton,1949,26.3,United States);\nINSERT INTO  singer VALUES (4,Iris Fontbona,1942,17.4,Chile);\nINSERT INTO  singer VALUES (5,Jacqueline Mars,1940,17.8,United States);\nINSERT INTO  singer VALUES (6,Gina Rinehart,1953,17,Australia);\nINSERT INTO  singer VALUES (7,Susanne Klatten,1962,14.3,Germany);\nINSERT INTO  singer VALUES (8,Abigail Johnson,1961,12.7,United States);\nINSERT INTO  song VALUES (1,Do They Know It's Christmas,1,1094000,1);\nINSERT INTO  song VALUES (2,F**k It (I Don't Want You Back),1,552407,1);\nINSERT INTO  song VALUES (3,Cha Cha Slide,2,351421,1);\nINSERT INTO  song VALUES (4,Call on Me,4,335000,1);\nINSERT INTO  song VALUES (5,Yeah,2,300000,1);\nINSERT INTO  song VALUES (6,All This Time,6,292000,1);\nINSERT INTO  song VALUES (7,Left Outside Alone,5,275000,3);\nINSERT INTO  song VALUES (8,Mysterious Girl,7,261000,1);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949","prompt":"What are the names of the singers whose birth years are either 1948 or 1949?"}
{"context":"PRAGMA foreign_keys = ON;\nCREATE TABLE singer (\nSinger_ID int,\nName text,\nBirth_Year real,\nNet_Worth_Millions real,\nCitizenship text,\nPRIMARY KEY (Singer_ID)\n);\nCREATE TABLE song (\nSong_ID int,\nTitle text,\nSinger_ID int,\nSales real,\nHighest_Position real,\nPRIMARY KEY (Song_ID),\nFOREIGN KEY (Singer_ID) REFERENCES singer(Singer_ID)\n);\nINSERT INTO  singer VALUES (1,Liliane Bettencourt,1944,30.0,France);\nINSERT INTO  singer VALUES (2,Christy Walton,1948,28.8,United States);\nINSERT INTO  singer VALUES (3,Alice Walton,1949,26.3,United States);\nINSERT INTO  singer VALUES (4,Iris Fontbona,1942,17.4,Chile);\nINSERT INTO  singer VALUES (5,Jacqueline Mars,1940,17.8,United States);\nINSERT INTO  singer VALUES (6,Gina Rinehart,1953,17,Australia);\nINSERT INTO  singer VALUES (7,Susanne Klatten,1962,14.3,Germany);\nINSERT INTO  singer VALUES (8,Abigail Johnson,1961,12.7,United States);\nINSERT INTO  song VALUES (1,Do They Know It's Christmas,1,1094000,1);\nINSERT INTO  song VALUES (2,F**k It (I Don't Want You Back),1,552407,1);\nINSERT INTO  song VALUES (3,Cha Cha Slide,2,351421,1);\nINSERT INTO  song VALUES (4,Call on Me,4,335000,1);\nINSERT INTO  song VALUES (5,Yeah,2,300000,1);\nINSERT INTO  song VALUES (6,All This Time,6,292000,1);\nINSERT INTO  song VALUES (7,Left Outside Alone,5,275000,3);\nINSERT INTO  song VALUES (8,Mysterious Girl,7,261000,1);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1","prompt":"What is the name of the singer with the largest net worth?"}
{"context":"PRAGMA foreign_keys = ON;\nCREATE TABLE singer (\nSinger_ID int,\nName text,\nBirth_Year real,\nNet_Worth_Millions real,\nCitizenship text,\nPRIMARY KEY (Singer_ID)\n);\nCREATE TABLE song (\nSong_ID int,\nTitle text,\nSinger_ID int,\nSales real,\nHighest_Position real,\nPRIMARY KEY (Song_ID),\nFOREIGN KEY (Singer_ID) REFERENCES singer(Singer_ID)\n);\nINSERT INTO  singer VALUES (1,Liliane Bettencourt,1944,30.0,France);\nINSERT INTO  singer VALUES (2,Christy Walton,1948,28.8,United States);\nINSERT INTO  singer VALUES (3,Alice Walton,1949,26.3,United States);\nINSERT INTO  singer VALUES (4,Iris Fontbona,1942,17.4,Chile);\nINSERT INTO  singer VALUES (5,Jacqueline Mars,1940,17.8,United States);\nINSERT INTO  singer VALUES (6,Gina Rinehart,1953,17,Australia);\nINSERT INTO  singer VALUES (7,Susanne Klatten,1962,14.3,Germany);\nINSERT INTO  singer VALUES (8,Abigail Johnson,1961,12.7,United States);\nINSERT INTO  song VALUES (1,Do They Know It's Christmas,1,1094000,1);\nINSERT INTO  song VALUES (2,F**k It (I Don't Want You Back),1,552407,1);\nINSERT INTO  song VALUES (3,Cha Cha Slide,2,351421,1);\nINSERT INTO  song VALUES (4,Call on Me,4,335000,1);\nINSERT INTO  song VALUES (5,Yeah,2,300000,1);\nINSERT INTO  song VALUES (6,All This Time,6,292000,1);\nINSERT INTO  song VALUES (7,Left Outside Alone,5,275000,3);\nINSERT INTO  song VALUES (8,Mysterious Girl,7,261000,1);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1","prompt":"What is the name of the singer who is worth the most?"}
{"context":"PRAGMA foreign_keys = ON;\nCREATE TABLE singer (\nSinger_ID int,\nName text,\nBirth_Year real,\nNet_Worth_Millions real,\nCitizenship text,\nPRIMARY KEY (Singer_ID)\n);\nCREATE TABLE song (\nSong_ID int,\nTitle text,\nSinger_ID int,\nSales real,\nHighest_Position real,\nPRIMARY KEY (Song_ID),\nFOREIGN KEY (Singer_ID) REFERENCES singer(Singer_ID)\n);\nINSERT INTO  singer VALUES (1,Liliane Bettencourt,1944,30.0,France);\nINSERT INTO  singer VALUES (2,Christy Walton,1948,28.8,United States);\nINSERT INTO  singer VALUES (3,Alice Walton,1949,26.3,United States);\nINSERT INTO  singer VALUES (4,Iris Fontbona,1942,17.4,Chile);\nINSERT INTO  singer VALUES (5,Jacqueline Mars,1940,17.8,United States);\nINSERT INTO  singer VALUES (6,Gina Rinehart,1953,17,Australia);\nINSERT INTO  singer VALUES (7,Susanne Klatten,1962,14.3,Germany);\nINSERT INTO  singer VALUES (8,Abigail Johnson,1961,12.7,United States);\nINSERT INTO  song VALUES (1,Do They Know It's Christmas,1,1094000,1);\nINSERT INTO  song VALUES (2,F**k It (I Don't Want You Back),1,552407,1);\nINSERT INTO  song VALUES (3,Cha Cha Slide,2,351421,1);\nINSERT INTO  song VALUES (4,Call on Me,4,335000,1);\nINSERT INTO  song VALUES (5,Yeah,2,300000,1);\nINSERT INTO  song VALUES (6,All This Time,6,292000,1);\nINSERT INTO  song VALUES (7,Left Outside Alone,5,275000,3);\nINSERT INTO  song VALUES (8,Mysterious Girl,7,261000,1);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT Citizenship ,  COUNT(*) FROM singer GROUP BY Citizenship","prompt":"Show different citizenship of singers and the number of singers of each citizenship."}
{"context":"PRAGMA foreign_keys = ON;\nCREATE TABLE singer (\nSinger_ID int,\nName text,\nBirth_Year real,\nNet_Worth_Millions real,\nCitizenship text,\nPRIMARY KEY (Singer_ID)\n);\nCREATE TABLE song (\nSong_ID int,\nTitle text,\nSinger_ID int,\nSales real,\nHighest_Position real,\nPRIMARY KEY (Song_ID),\nFOREIGN KEY (Singer_ID) REFERENCES singer(Singer_ID)\n);\nINSERT INTO  singer VALUES (1,Liliane Bettencourt,1944,30.0,France);\nINSERT INTO  singer VALUES (2,Christy Walton,1948,28.8,United States);\nINSERT INTO  singer VALUES (3,Alice Walton,1949,26.3,United States);\nINSERT INTO  singer VALUES (4,Iris Fontbona,1942,17.4,Chile);\nINSERT INTO  singer VALUES (5,Jacqueline Mars,1940,17.8,United States);\nINSERT INTO  singer VALUES (6,Gina Rinehart,1953,17,Australia);\nINSERT INTO  singer VALUES (7,Susanne Klatten,1962,14.3,Germany);\nINSERT INTO  singer VALUES (8,Abigail Johnson,1961,12.7,United States);\nINSERT INTO  song VALUES (1,Do They Know It's Christmas,1,1094000,1);\nINSERT INTO  song VALUES (2,F**k It (I Don't Want You Back),1,552407,1);\nINSERT INTO  song VALUES (3,Cha Cha Slide,2,351421,1);\nINSERT INTO  song VALUES (4,Call on Me,4,335000,1);\nINSERT INTO  song VALUES (5,Yeah,2,300000,1);\nINSERT INTO  song VALUES (6,All This Time,6,292000,1);\nINSERT INTO  song VALUES (7,Left Outside Alone,5,275000,3);\nINSERT INTO  song VALUES (8,Mysterious Girl,7,261000,1);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT Citizenship ,  COUNT(*) FROM singer GROUP BY Citizenship","prompt":"For each citizenship, how many singers are from that country?"}
{"context":"PRAGMA foreign_keys = ON;\nCREATE TABLE singer (\nSinger_ID int,\nName text,\nBirth_Year real,\nNet_Worth_Millions real,\nCitizenship text,\nPRIMARY KEY (Singer_ID)\n);\nCREATE TABLE song (\nSong_ID int,\nTitle text,\nSinger_ID int,\nSales real,\nHighest_Position real,\nPRIMARY KEY (Song_ID),\nFOREIGN KEY (Singer_ID) REFERENCES singer(Singer_ID)\n);\nINSERT INTO  singer VALUES (1,Liliane Bettencourt,1944,30.0,France);\nINSERT INTO  singer VALUES (2,Christy Walton,1948,28.8,United States);\nINSERT INTO  singer VALUES (3,Alice Walton,1949,26.3,United States);\nINSERT INTO  singer VALUES (4,Iris Fontbona,1942,17.4,Chile);\nINSERT INTO  singer VALUES (5,Jacqueline Mars,1940,17.8,United States);\nINSERT INTO  singer VALUES (6,Gina Rinehart,1953,17,Australia);\nINSERT INTO  singer VALUES (7,Susanne Klatten,1962,14.3,Germany);\nINSERT INTO  singer VALUES (8,Abigail Johnson,1961,12.7,United States);\nINSERT INTO  song VALUES (1,Do They Know It's Christmas,1,1094000,1);\nINSERT INTO  song VALUES (2,F**k It (I Don't Want You Back),1,552407,1);\nINSERT INTO  song VALUES (3,Cha Cha Slide,2,351421,1);\nINSERT INTO  song VALUES (4,Call on Me,4,335000,1);\nINSERT INTO  song VALUES (5,Yeah,2,300000,1);\nINSERT INTO  song VALUES (6,All This Time,6,292000,1);\nINSERT INTO  song VALUES (7,Left Outside Alone,5,275000,3);\nINSERT INTO  song VALUES (8,Mysterious Girl,7,261000,1);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1","prompt":"Please show the most common citizenship of singers."}
{"context":"PRAGMA foreign_keys = ON;\nCREATE TABLE singer (\nSinger_ID int,\nName text,\nBirth_Year real,\nNet_Worth_Millions real,\nCitizenship text,\nPRIMARY KEY (Singer_ID)\n);\nCREATE TABLE song (\nSong_ID int,\nTitle text,\nSinger_ID int,\nSales real,\nHighest_Position real,\nPRIMARY KEY (Song_ID),\nFOREIGN KEY (Singer_ID) REFERENCES singer(Singer_ID)\n);\nINSERT INTO  singer VALUES (1,Liliane Bettencourt,1944,30.0,France);\nINSERT INTO  singer VALUES (2,Christy Walton,1948,28.8,United States);\nINSERT INTO  singer VALUES (3,Alice Walton,1949,26.3,United States);\nINSERT INTO  singer VALUES (4,Iris Fontbona,1942,17.4,Chile);\nINSERT INTO  singer VALUES (5,Jacqueline Mars,1940,17.8,United States);\nINSERT INTO  singer VALUES (6,Gina Rinehart,1953,17,Australia);\nINSERT INTO  singer VALUES (7,Susanne Klatten,1962,14.3,Germany);\nINSERT INTO  singer VALUES (8,Abigail Johnson,1961,12.7,United States);\nINSERT INTO  song VALUES (1,Do They Know It's Christmas,1,1094000,1);\nINSERT INTO  song VALUES (2,F**k It (I Don't Want You Back),1,552407,1);\nINSERT INTO  song VALUES (3,Cha Cha Slide,2,351421,1);\nINSERT INTO  song VALUES (4,Call on Me,4,335000,1);\nINSERT INTO  song VALUES (5,Yeah,2,300000,1);\nINSERT INTO  song VALUES (6,All This Time,6,292000,1);\nINSERT INTO  song VALUES (7,Left Outside Alone,5,275000,3);\nINSERT INTO  song VALUES (8,Mysterious Girl,7,261000,1);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"select citizenship from singer group by citizenship order by count(*) desc limit 1","prompt":"What is the most common singer citizenship ?"}
{"context":"PRAGMA foreign_keys = ON;\nCREATE TABLE singer (\nSinger_ID int,\nName text,\nBirth_Year real,\nNet_Worth_Millions real,\nCitizenship text,\nPRIMARY KEY (Singer_ID)\n);\nCREATE TABLE song (\nSong_ID int,\nTitle text,\nSinger_ID int,\nSales real,\nHighest_Position real,\nPRIMARY KEY (Song_ID),\nFOREIGN KEY (Singer_ID) REFERENCES singer(Singer_ID)\n);\nINSERT INTO  singer VALUES (1,Liliane Bettencourt,1944,30.0,France);\nINSERT INTO  singer VALUES (2,Christy Walton,1948,28.8,United States);\nINSERT INTO  singer VALUES (3,Alice Walton,1949,26.3,United States);\nINSERT INTO  singer VALUES (4,Iris Fontbona,1942,17.4,Chile);\nINSERT INTO  singer VALUES (5,Jacqueline Mars,1940,17.8,United States);\nINSERT INTO  singer VALUES (6,Gina Rinehart,1953,17,Australia);\nINSERT INTO  singer VALUES (7,Susanne Klatten,1962,14.3,Germany);\nINSERT INTO  singer VALUES (8,Abigail Johnson,1961,12.7,United States);\nINSERT INTO  song VALUES (1,Do They Know It's Christmas,1,1094000,1);\nINSERT INTO  song VALUES (2,F**k It (I Don't Want You Back),1,552407,1);\nINSERT INTO  song VALUES (3,Cha Cha Slide,2,351421,1);\nINSERT INTO  song VALUES (4,Call on Me,4,335000,1);\nINSERT INTO  song VALUES (5,Yeah,2,300000,1);\nINSERT INTO  song VALUES (6,All This Time,6,292000,1);\nINSERT INTO  song VALUES (7,Left Outside Alone,5,275000,3);\nINSERT INTO  song VALUES (8,Mysterious Girl,7,261000,1);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT Citizenship ,  max(Net_Worth_Millions) FROM singer GROUP BY Citizenship","prompt":"Show different citizenships and the maximum net worth of singers of each citizenship."}
{"context":"PRAGMA foreign_keys = ON;\nCREATE TABLE singer (\nSinger_ID int,\nName text,\nBirth_Year real,\nNet_Worth_Millions real,\nCitizenship text,\nPRIMARY KEY (Singer_ID)\n);\nCREATE TABLE song (\nSong_ID int,\nTitle text,\nSinger_ID int,\nSales real,\nHighest_Position real,\nPRIMARY KEY (Song_ID),\nFOREIGN KEY (Singer_ID) REFERENCES singer(Singer_ID)\n);\nINSERT INTO  singer VALUES (1,Liliane Bettencourt,1944,30.0,France);\nINSERT INTO  singer VALUES (2,Christy Walton,1948,28.8,United States);\nINSERT INTO  singer VALUES (3,Alice Walton,1949,26.3,United States);\nINSERT INTO  singer VALUES (4,Iris Fontbona,1942,17.4,Chile);\nINSERT INTO  singer VALUES (5,Jacqueline Mars,1940,17.8,United States);\nINSERT INTO  singer VALUES (6,Gina Rinehart,1953,17,Australia);\nINSERT INTO  singer VALUES (7,Susanne Klatten,1962,14.3,Germany);\nINSERT INTO  singer VALUES (8,Abigail Johnson,1961,12.7,United States);\nINSERT INTO  song VALUES (1,Do They Know It's Christmas,1,1094000,1);\nINSERT INTO  song VALUES (2,F**k It (I Don't Want You Back),1,552407,1);\nINSERT INTO  song VALUES (3,Cha Cha Slide,2,351421,1);\nINSERT INTO  song VALUES (4,Call on Me,4,335000,1);\nINSERT INTO  song VALUES (5,Yeah,2,300000,1);\nINSERT INTO  song VALUES (6,All This Time,6,292000,1);\nINSERT INTO  song VALUES (7,Left Outside Alone,5,275000,3);\nINSERT INTO  song VALUES (8,Mysterious Girl,7,261000,1);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT Citizenship ,  max(Net_Worth_Millions) FROM singer GROUP BY Citizenship","prompt":"For each citizenship, what is the maximum net worth?"}
{"context":"PRAGMA foreign_keys = ON;\nCREATE TABLE singer (\nSinger_ID int,\nName text,\nBirth_Year real,\nNet_Worth_Millions real,\nCitizenship text,\nPRIMARY KEY (Singer_ID)\n);\nCREATE TABLE song (\nSong_ID int,\nTitle text,\nSinger_ID int,\nSales real,\nHighest_Position real,\nPRIMARY KEY (Song_ID),\nFOREIGN KEY (Singer_ID) REFERENCES singer(Singer_ID)\n);\nINSERT INTO  singer VALUES (1,Liliane Bettencourt,1944,30.0,France);\nINSERT INTO  singer VALUES (2,Christy Walton,1948,28.8,United States);\nINSERT INTO  singer VALUES (3,Alice Walton,1949,26.3,United States);\nINSERT INTO  singer VALUES (4,Iris Fontbona,1942,17.4,Chile);\nINSERT INTO  singer VALUES (5,Jacqueline Mars,1940,17.8,United States);\nINSERT INTO  singer VALUES (6,Gina Rinehart,1953,17,Australia);\nINSERT INTO  singer VALUES (7,Susanne Klatten,1962,14.3,Germany);\nINSERT INTO  singer VALUES (8,Abigail Johnson,1961,12.7,United States);\nINSERT INTO  song VALUES (1,Do They Know It's Christmas,1,1094000,1);\nINSERT INTO  song VALUES (2,F**k It (I Don't Want You Back),1,552407,1);\nINSERT INTO  song VALUES (3,Cha Cha Slide,2,351421,1);\nINSERT INTO  song VALUES (4,Call on Me,4,335000,1);\nINSERT INTO  song VALUES (5,Yeah,2,300000,1);\nINSERT INTO  song VALUES (6,All This Time,6,292000,1);\nINSERT INTO  song VALUES (7,Left Outside Alone,5,275000,3);\nINSERT INTO  song VALUES (8,Mysterious Girl,7,261000,1);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID","prompt":"Show titles of songs and names of singers."}
{"context":"PRAGMA foreign_keys = ON;\nCREATE TABLE singer (\nSinger_ID int,\nName text,\nBirth_Year real,\nNet_Worth_Millions real,\nCitizenship text,\nPRIMARY KEY (Singer_ID)\n);\nCREATE TABLE song (\nSong_ID int,\nTitle text,\nSinger_ID int,\nSales real,\nHighest_Position real,\nPRIMARY KEY (Song_ID),\nFOREIGN KEY (Singer_ID) REFERENCES singer(Singer_ID)\n);\nINSERT INTO  singer VALUES (1,Liliane Bettencourt,1944,30.0,France);\nINSERT INTO  singer VALUES (2,Christy Walton,1948,28.8,United States);\nINSERT INTO  singer VALUES (3,Alice Walton,1949,26.3,United States);\nINSERT INTO  singer VALUES (4,Iris Fontbona,1942,17.4,Chile);\nINSERT INTO  singer VALUES (5,Jacqueline Mars,1940,17.8,United States);\nINSERT INTO  singer VALUES (6,Gina Rinehart,1953,17,Australia);\nINSERT INTO  singer VALUES (7,Susanne Klatten,1962,14.3,Germany);\nINSERT INTO  singer VALUES (8,Abigail Johnson,1961,12.7,United States);\nINSERT INTO  song VALUES (1,Do They Know It's Christmas,1,1094000,1);\nINSERT INTO  song VALUES (2,F**k It (I Don't Want You Back),1,552407,1);\nINSERT INTO  song VALUES (3,Cha Cha Slide,2,351421,1);\nINSERT INTO  song VALUES (4,Call on Me,4,335000,1);\nINSERT INTO  song VALUES (5,Yeah,2,300000,1);\nINSERT INTO  song VALUES (6,All This Time,6,292000,1);\nINSERT INTO  song VALUES (7,Left Outside Alone,5,275000,3);\nINSERT INTO  song VALUES (8,Mysterious Girl,7,261000,1);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID","prompt":"What are the song titles and singer names?"}
{"context":"PRAGMA foreign_keys = ON;\nCREATE TABLE singer (\nSinger_ID int,\nName text,\nBirth_Year real,\nNet_Worth_Millions real,\nCitizenship text,\nPRIMARY KEY (Singer_ID)\n);\nCREATE TABLE song (\nSong_ID int,\nTitle text,\nSinger_ID int,\nSales real,\nHighest_Position real,\nPRIMARY KEY (Song_ID),\nFOREIGN KEY (Singer_ID) REFERENCES singer(Singer_ID)\n);\nINSERT INTO  singer VALUES (1,Liliane Bettencourt,1944,30.0,France);\nINSERT INTO  singer VALUES (2,Christy Walton,1948,28.8,United States);\nINSERT INTO  singer VALUES (3,Alice Walton,1949,26.3,United States);\nINSERT INTO  singer VALUES (4,Iris Fontbona,1942,17.4,Chile);\nINSERT INTO  singer VALUES (5,Jacqueline Mars,1940,17.8,United States);\nINSERT INTO  singer VALUES (6,Gina Rinehart,1953,17,Australia);\nINSERT INTO  singer VALUES (7,Susanne Klatten,1962,14.3,Germany);\nINSERT INTO  singer VALUES (8,Abigail Johnson,1961,12.7,United States);\nINSERT INTO  song VALUES (1,Do They Know It's Christmas,1,1094000,1);\nINSERT INTO  song VALUES (2,F**k It (I Don't Want You Back),1,552407,1);\nINSERT INTO  song VALUES (3,Cha Cha Slide,2,351421,1);\nINSERT INTO  song VALUES (4,Call on Me,4,335000,1);\nINSERT INTO  song VALUES (5,Yeah,2,300000,1);\nINSERT INTO  song VALUES (6,All This Time,6,292000,1);\nINSERT INTO  song VALUES (7,Left Outside Alone,5,275000,3);\nINSERT INTO  song VALUES (8,Mysterious Girl,7,261000,1);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000","prompt":"Show distinct names of singers that have songs with sales more than 300000."}
{"context":"PRAGMA foreign_keys = ON;\nCREATE TABLE singer (\nSinger_ID int,\nName text,\nBirth_Year real,\nNet_Worth_Millions real,\nCitizenship text,\nPRIMARY KEY (Singer_ID)\n);\nCREATE TABLE song (\nSong_ID int,\nTitle text,\nSinger_ID int,\nSales real,\nHighest_Position real,\nPRIMARY KEY (Song_ID),\nFOREIGN KEY (Singer_ID) REFERENCES singer(Singer_ID)\n);\nINSERT INTO  singer VALUES (1,Liliane Bettencourt,1944,30.0,France);\nINSERT INTO  singer VALUES (2,Christy Walton,1948,28.8,United States);\nINSERT INTO  singer VALUES (3,Alice Walton,1949,26.3,United States);\nINSERT INTO  singer VALUES (4,Iris Fontbona,1942,17.4,Chile);\nINSERT INTO  singer VALUES (5,Jacqueline Mars,1940,17.8,United States);\nINSERT INTO  singer VALUES (6,Gina Rinehart,1953,17,Australia);\nINSERT INTO  singer VALUES (7,Susanne Klatten,1962,14.3,Germany);\nINSERT INTO  singer VALUES (8,Abigail Johnson,1961,12.7,United States);\nINSERT INTO  song VALUES (1,Do They Know It's Christmas,1,1094000,1);\nINSERT INTO  song VALUES (2,F**k It (I Don't Want You Back),1,552407,1);\nINSERT INTO  song VALUES (3,Cha Cha Slide,2,351421,1);\nINSERT INTO  song VALUES (4,Call on Me,4,335000,1);\nINSERT INTO  song VALUES (5,Yeah,2,300000,1);\nINSERT INTO  song VALUES (6,All This Time,6,292000,1);\nINSERT INTO  song VALUES (7,Left Outside Alone,5,275000,3);\nINSERT INTO  song VALUES (8,Mysterious Girl,7,261000,1);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000","prompt":"what are the different names of the singers that have sales more than 300000?"}
{"context":"PRAGMA foreign_keys = ON;\nCREATE TABLE singer (\nSinger_ID int,\nName text,\nBirth_Year real,\nNet_Worth_Millions real,\nCitizenship text,\nPRIMARY KEY (Singer_ID)\n);\nCREATE TABLE song (\nSong_ID int,\nTitle text,\nSinger_ID int,\nSales real,\nHighest_Position real,\nPRIMARY KEY (Song_ID),\nFOREIGN KEY (Singer_ID) REFERENCES singer(Singer_ID)\n);\nINSERT INTO  singer VALUES (1,Liliane Bettencourt,1944,30.0,France);\nINSERT INTO  singer VALUES (2,Christy Walton,1948,28.8,United States);\nINSERT INTO  singer VALUES (3,Alice Walton,1949,26.3,United States);\nINSERT INTO  singer VALUES (4,Iris Fontbona,1942,17.4,Chile);\nINSERT INTO  singer VALUES (5,Jacqueline Mars,1940,17.8,United States);\nINSERT INTO  singer VALUES (6,Gina Rinehart,1953,17,Australia);\nINSERT INTO  singer VALUES (7,Susanne Klatten,1962,14.3,Germany);\nINSERT INTO  singer VALUES (8,Abigail Johnson,1961,12.7,United States);\nINSERT INTO  song VALUES (1,Do They Know It's Christmas,1,1094000,1);\nINSERT INTO  song VALUES (2,F**k It (I Don't Want You Back),1,552407,1);\nINSERT INTO  song VALUES (3,Cha Cha Slide,2,351421,1);\nINSERT INTO  song VALUES (4,Call on Me,4,335000,1);\nINSERT INTO  song VALUES (5,Yeah,2,300000,1);\nINSERT INTO  song VALUES (6,All This Time,6,292000,1);\nINSERT INTO  song VALUES (7,Left Outside Alone,5,275000,3);\nINSERT INTO  song VALUES (8,Mysterious Girl,7,261000,1);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*)  >  1","prompt":"Show the names of singers that have more than one song."}
{"context":"PRAGMA foreign_keys = ON;\nCREATE TABLE singer (\nSinger_ID int,\nName text,\nBirth_Year real,\nNet_Worth_Millions real,\nCitizenship text,\nPRIMARY KEY (Singer_ID)\n);\nCREATE TABLE song (\nSong_ID int,\nTitle text,\nSinger_ID int,\nSales real,\nHighest_Position real,\nPRIMARY KEY (Song_ID),\nFOREIGN KEY (Singer_ID) REFERENCES singer(Singer_ID)\n);\nINSERT INTO  singer VALUES (1,Liliane Bettencourt,1944,30.0,France);\nINSERT INTO  singer VALUES (2,Christy Walton,1948,28.8,United States);\nINSERT INTO  singer VALUES (3,Alice Walton,1949,26.3,United States);\nINSERT INTO  singer VALUES (4,Iris Fontbona,1942,17.4,Chile);\nINSERT INTO  singer VALUES (5,Jacqueline Mars,1940,17.8,United States);\nINSERT INTO  singer VALUES (6,Gina Rinehart,1953,17,Australia);\nINSERT INTO  singer VALUES (7,Susanne Klatten,1962,14.3,Germany);\nINSERT INTO  singer VALUES (8,Abigail Johnson,1961,12.7,United States);\nINSERT INTO  song VALUES (1,Do They Know It's Christmas,1,1094000,1);\nINSERT INTO  song VALUES (2,F**k It (I Don't Want You Back),1,552407,1);\nINSERT INTO  song VALUES (3,Cha Cha Slide,2,351421,1);\nINSERT INTO  song VALUES (4,Call on Me,4,335000,1);\nINSERT INTO  song VALUES (5,Yeah,2,300000,1);\nINSERT INTO  song VALUES (6,All This Time,6,292000,1);\nINSERT INTO  song VALUES (7,Left Outside Alone,5,275000,3);\nINSERT INTO  song VALUES (8,Mysterious Girl,7,261000,1);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*)  >  1","prompt":"What are the names of the singers that have more than one songs?"}
{"context":"PRAGMA foreign_keys = ON;\nCREATE TABLE singer (\nSinger_ID int,\nName text,\nBirth_Year real,\nNet_Worth_Millions real,\nCitizenship text,\nPRIMARY KEY (Singer_ID)\n);\nCREATE TABLE song (\nSong_ID int,\nTitle text,\nSinger_ID int,\nSales real,\nHighest_Position real,\nPRIMARY KEY (Song_ID),\nFOREIGN KEY (Singer_ID) REFERENCES singer(Singer_ID)\n);\nINSERT INTO  singer VALUES (1,Liliane Bettencourt,1944,30.0,France);\nINSERT INTO  singer VALUES (2,Christy Walton,1948,28.8,United States);\nINSERT INTO  singer VALUES (3,Alice Walton,1949,26.3,United States);\nINSERT INTO  singer VALUES (4,Iris Fontbona,1942,17.4,Chile);\nINSERT INTO  singer VALUES (5,Jacqueline Mars,1940,17.8,United States);\nINSERT INTO  singer VALUES (6,Gina Rinehart,1953,17,Australia);\nINSERT INTO  singer VALUES (7,Susanne Klatten,1962,14.3,Germany);\nINSERT INTO  singer VALUES (8,Abigail Johnson,1961,12.7,United States);\nINSERT INTO  song VALUES (1,Do They Know It's Christmas,1,1094000,1);\nINSERT INTO  song VALUES (2,F**k It (I Don't Want You Back),1,552407,1);\nINSERT INTO  song VALUES (3,Cha Cha Slide,2,351421,1);\nINSERT INTO  song VALUES (4,Call on Me,4,335000,1);\nINSERT INTO  song VALUES (5,Yeah,2,300000,1);\nINSERT INTO  song VALUES (6,All This Time,6,292000,1);\nINSERT INTO  song VALUES (7,Left Outside Alone,5,275000,3);\nINSERT INTO  song VALUES (8,Mysterious Girl,7,261000,1);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT T1.Name ,  sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name","prompt":"Show the names of singers and the total sales of their songs."}
{"context":"PRAGMA foreign_keys = ON;\nCREATE TABLE singer (\nSinger_ID int,\nName text,\nBirth_Year real,\nNet_Worth_Millions real,\nCitizenship text,\nPRIMARY KEY (Singer_ID)\n);\nCREATE TABLE song (\nSong_ID int,\nTitle text,\nSinger_ID int,\nSales real,\nHighest_Position real,\nPRIMARY KEY (Song_ID),\nFOREIGN KEY (Singer_ID) REFERENCES singer(Singer_ID)\n);\nINSERT INTO  singer VALUES (1,Liliane Bettencourt,1944,30.0,France);\nINSERT INTO  singer VALUES (2,Christy Walton,1948,28.8,United States);\nINSERT INTO  singer VALUES (3,Alice Walton,1949,26.3,United States);\nINSERT INTO  singer VALUES (4,Iris Fontbona,1942,17.4,Chile);\nINSERT INTO  singer VALUES (5,Jacqueline Mars,1940,17.8,United States);\nINSERT INTO  singer VALUES (6,Gina Rinehart,1953,17,Australia);\nINSERT INTO  singer VALUES (7,Susanne Klatten,1962,14.3,Germany);\nINSERT INTO  singer VALUES (8,Abigail Johnson,1961,12.7,United States);\nINSERT INTO  song VALUES (1,Do They Know It's Christmas,1,1094000,1);\nINSERT INTO  song VALUES (2,F**k It (I Don't Want You Back),1,552407,1);\nINSERT INTO  song VALUES (3,Cha Cha Slide,2,351421,1);\nINSERT INTO  song VALUES (4,Call on Me,4,335000,1);\nINSERT INTO  song VALUES (5,Yeah,2,300000,1);\nINSERT INTO  song VALUES (6,All This Time,6,292000,1);\nINSERT INTO  song VALUES (7,Left Outside Alone,5,275000,3);\nINSERT INTO  song VALUES (8,Mysterious Girl,7,261000,1);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT T1.Name ,  sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name","prompt":"For each singer name, what is the total sales for their songs?"}
{"context":"PRAGMA foreign_keys = ON;\nCREATE TABLE singer (\nSinger_ID int,\nName text,\nBirth_Year real,\nNet_Worth_Millions real,\nCitizenship text,\nPRIMARY KEY (Singer_ID)\n);\nCREATE TABLE song (\nSong_ID int,\nTitle text,\nSinger_ID int,\nSales real,\nHighest_Position real,\nPRIMARY KEY (Song_ID),\nFOREIGN KEY (Singer_ID) REFERENCES singer(Singer_ID)\n);\nINSERT INTO  singer VALUES (1,Liliane Bettencourt,1944,30.0,France);\nINSERT INTO  singer VALUES (2,Christy Walton,1948,28.8,United States);\nINSERT INTO  singer VALUES (3,Alice Walton,1949,26.3,United States);\nINSERT INTO  singer VALUES (4,Iris Fontbona,1942,17.4,Chile);\nINSERT INTO  singer VALUES (5,Jacqueline Mars,1940,17.8,United States);\nINSERT INTO  singer VALUES (6,Gina Rinehart,1953,17,Australia);\nINSERT INTO  singer VALUES (7,Susanne Klatten,1962,14.3,Germany);\nINSERT INTO  singer VALUES (8,Abigail Johnson,1961,12.7,United States);\nINSERT INTO  song VALUES (1,Do They Know It's Christmas,1,1094000,1);\nINSERT INTO  song VALUES (2,F**k It (I Don't Want You Back),1,552407,1);\nINSERT INTO  song VALUES (3,Cha Cha Slide,2,351421,1);\nINSERT INTO  song VALUES (4,Call on Me,4,335000,1);\nINSERT INTO  song VALUES (5,Yeah,2,300000,1);\nINSERT INTO  song VALUES (6,All This Time,6,292000,1);\nINSERT INTO  song VALUES (7,Left Outside Alone,5,275000,3);\nINSERT INTO  song VALUES (8,Mysterious Girl,7,261000,1);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)","prompt":"List the name of singers that do not have any song."}
{"context":"PRAGMA foreign_keys = ON;\nCREATE TABLE singer (\nSinger_ID int,\nName text,\nBirth_Year real,\nNet_Worth_Millions real,\nCitizenship text,\nPRIMARY KEY (Singer_ID)\n);\nCREATE TABLE song (\nSong_ID int,\nTitle text,\nSinger_ID int,\nSales real,\nHighest_Position real,\nPRIMARY KEY (Song_ID),\nFOREIGN KEY (Singer_ID) REFERENCES singer(Singer_ID)\n);\nINSERT INTO  singer VALUES (1,Liliane Bettencourt,1944,30.0,France);\nINSERT INTO  singer VALUES (2,Christy Walton,1948,28.8,United States);\nINSERT INTO  singer VALUES (3,Alice Walton,1949,26.3,United States);\nINSERT INTO  singer VALUES (4,Iris Fontbona,1942,17.4,Chile);\nINSERT INTO  singer VALUES (5,Jacqueline Mars,1940,17.8,United States);\nINSERT INTO  singer VALUES (6,Gina Rinehart,1953,17,Australia);\nINSERT INTO  singer VALUES (7,Susanne Klatten,1962,14.3,Germany);\nINSERT INTO  singer VALUES (8,Abigail Johnson,1961,12.7,United States);\nINSERT INTO  song VALUES (1,Do They Know It's Christmas,1,1094000,1);\nINSERT INTO  song VALUES (2,F**k It (I Don't Want You Back),1,552407,1);\nINSERT INTO  song VALUES (3,Cha Cha Slide,2,351421,1);\nINSERT INTO  song VALUES (4,Call on Me,4,335000,1);\nINSERT INTO  song VALUES (5,Yeah,2,300000,1);\nINSERT INTO  song VALUES (6,All This Time,6,292000,1);\nINSERT INTO  song VALUES (7,Left Outside Alone,5,275000,3);\nINSERT INTO  song VALUES (8,Mysterious Girl,7,261000,1);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)","prompt":"What is the sname of every sing that does not have any song?"}
{"context":"PRAGMA foreign_keys = ON;\nCREATE TABLE singer (\nSinger_ID int,\nName text,\nBirth_Year real,\nNet_Worth_Millions real,\nCitizenship text,\nPRIMARY KEY (Singer_ID)\n);\nCREATE TABLE song (\nSong_ID int,\nTitle text,\nSinger_ID int,\nSales real,\nHighest_Position real,\nPRIMARY KEY (Song_ID),\nFOREIGN KEY (Singer_ID) REFERENCES singer(Singer_ID)\n);\nINSERT INTO  singer VALUES (1,Liliane Bettencourt,1944,30.0,France);\nINSERT INTO  singer VALUES (2,Christy Walton,1948,28.8,United States);\nINSERT INTO  singer VALUES (3,Alice Walton,1949,26.3,United States);\nINSERT INTO  singer VALUES (4,Iris Fontbona,1942,17.4,Chile);\nINSERT INTO  singer VALUES (5,Jacqueline Mars,1940,17.8,United States);\nINSERT INTO  singer VALUES (6,Gina Rinehart,1953,17,Australia);\nINSERT INTO  singer VALUES (7,Susanne Klatten,1962,14.3,Germany);\nINSERT INTO  singer VALUES (8,Abigail Johnson,1961,12.7,United States);\nINSERT INTO  song VALUES (1,Do They Know It's Christmas,1,1094000,1);\nINSERT INTO  song VALUES (2,F**k It (I Don't Want You Back),1,552407,1);\nINSERT INTO  song VALUES (3,Cha Cha Slide,2,351421,1);\nINSERT INTO  song VALUES (4,Call on Me,4,335000,1);\nINSERT INTO  song VALUES (5,Yeah,2,300000,1);\nINSERT INTO  song VALUES (6,All This Time,6,292000,1);\nINSERT INTO  song VALUES (7,Left Outside Alone,5,275000,3);\nINSERT INTO  song VALUES (8,Mysterious Girl,7,261000,1);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  >  1955","prompt":"Show the citizenship shared by singers with birth year before 1945 and after 1955."}
{"context":"PRAGMA foreign_keys = ON;\nCREATE TABLE singer (\nSinger_ID int,\nName text,\nBirth_Year real,\nNet_Worth_Millions real,\nCitizenship text,\nPRIMARY KEY (Singer_ID)\n);\nCREATE TABLE song (\nSong_ID int,\nTitle text,\nSinger_ID int,\nSales real,\nHighest_Position real,\nPRIMARY KEY (Song_ID),\nFOREIGN KEY (Singer_ID) REFERENCES singer(Singer_ID)\n);\nINSERT INTO  singer VALUES (1,Liliane Bettencourt,1944,30.0,France);\nINSERT INTO  singer VALUES (2,Christy Walton,1948,28.8,United States);\nINSERT INTO  singer VALUES (3,Alice Walton,1949,26.3,United States);\nINSERT INTO  singer VALUES (4,Iris Fontbona,1942,17.4,Chile);\nINSERT INTO  singer VALUES (5,Jacqueline Mars,1940,17.8,United States);\nINSERT INTO  singer VALUES (6,Gina Rinehart,1953,17,Australia);\nINSERT INTO  singer VALUES (7,Susanne Klatten,1962,14.3,Germany);\nINSERT INTO  singer VALUES (8,Abigail Johnson,1961,12.7,United States);\nINSERT INTO  song VALUES (1,Do They Know It's Christmas,1,1094000,1);\nINSERT INTO  song VALUES (2,F**k It (I Don't Want You Back),1,552407,1);\nINSERT INTO  song VALUES (3,Cha Cha Slide,2,351421,1);\nINSERT INTO  song VALUES (4,Call on Me,4,335000,1);\nINSERT INTO  song VALUES (5,Yeah,2,300000,1);\nINSERT INTO  song VALUES (6,All This Time,6,292000,1);\nINSERT INTO  song VALUES (7,Left Outside Alone,5,275000,3);\nINSERT INTO  song VALUES (8,Mysterious Girl,7,261000,1);\n-- Using valid SQLite, answer the following questions for the tables provided above.\n\n-- ","response":"SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  >  1955","prompt":"What are the citizenships that are shared by singers with a birth year before 1945 and after 1955?"}
